[{"content":" 1 2 3 4 5 6 7 Windows 服务是 Windows 操作系统的核心。它们控制着操作系统的运行，定义了图形用户界面（GUI）与系统硬件之间的通信以及其他许多功能。没有这些服务，Windows 操作系统将无法正常运行。 对普通用户而言，可以简单将 Windows 服务视为没有界面的普通应用程序，无需用户干预即可启动和停止。它们是 Windows 操作系统所必需的，用于创建和执行需要长时间运行的进程，以执行不同的任务。 虽然 Windows 服务独立运行且无需用户干预，但它们也可能遇到问题。它们可能会损坏，或者在需要时停止运行。在某些情况下，由于资源利用率或其他原因，您可能希望禁用、停止或暂停某项 Windows 服务。 在这种情况下，可以手动安全地管理 Windows 服务，而不会影响操作系统本身。 以上是 Windows 服务的定义，说白了，服务就是从开机时就默默在后台运行或者是待运行的程序，在你使用 Windows 的过程中，你很难注意到它们，但如果它们都罢工了，那你的计算机系统就难以运行下去了。\n有点像我们的社会，外卖员、网约车司机、清洁工……也许我们平时连正眼看他们一眼都不会，但如果没有他们，社会真的有可能停摆，花点钱就有人来伺候的日子更是不再可能出现。\n说回咱们的 Windows 系统，事实上，所有的操作系统中，程序自启动都是很重要的一环。在 Linux 中，现在许多的主流发行版都使用了 systemd 来进行一站式管理。那么用户如何使用 systemd 来管理程序自启动呢？\n首先，我们需要编写一份 .service 文件，它通常类似这个样子：\n1 2 3 4 5 6 7 8 9 [Unit] Description=example systemd service unit file After=network.target [Service] ExecStart=/bin/bash /usr/sbin/example.sh [Install] WantedBy = multi-user.target 将这份文件保存为 \u0026lt;serviceName\u0026gt;.service 后，使用 systemctl daemon-reload 命令重载所有的服务，再使用 systemctl start \u0026lt;serviceName\u0026gt;.service，如果需要服务自启动的话，就使用 systemctl enable \u0026lt;serviceName\u0026gt;.service。\n这不是 Windows 教程吗？为什么在这里我要详细介绍 Linux 服务？\n因为虽然两个操作系统的设计完全不同，但在服务这一块，两者相似之处比较多。在 Windows 中，我们仍然需要指定程序的路径、程序运行的参数、自启动方式等等。只不过这些操作我们可以在图形界面中完成，相对来说更加直观。\n先来说说自启动 在 Windows 系统中，程序可以通过多种方式实现自启动，这些方式主要利用了系统启动时加载的特定位置或机制。以下是两种主流的程序自启动方式：\n开始菜单的“启动”文件夹 位置：C:\\Users\\\u0026lt;用户名\u0026gt;\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup。\n将程序的快捷方式放置在该文件夹中，系统启动时会自动运行这些程序。简单易用，适合普通用户手动添加启动项。容易被用户发现并手动删除。打开你电脑的该文件夹，就可以找到哪些应用程序在这里偷偷自启动。\n注册表启动项 位置：\n1 2 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run（当前用户） HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run（所有用户） 在注册表中添加程序的路径，系统启动时会根据这些路径加载程序。程序可以隐藏得更深，适合需要隐蔽启动的应用程序。需要一定的技术知识来操作注册表，且容易被安全软件检测。一些过于流氓的软件，可能会把启动项放置在这里。\n此外，还有 DLL 劫持和驱动程序加载等等方式可以使程序自启动，但我们一般把这样的程序叫做病毒（正常设备驱动程序除外。\n程序自启动的另一种方式——服务 程序以服务的形式安装到系统中，通过 Windows 服务管理器（services.msc）控制。服务可在系统启动时自动运行，甚至在用户未登录的情况下运行常用于后台程序（如杀毒软件、系统监控工具等）。高度自动化，适合需要长期运行的后台程序。\n事实上，可在用户未登录时就开始持续运行，是服务的精髓。\nWindows 操作系统中有许多不同的 Windows 服务，每个服务都具有不同的功能和启动类型。启动类型可以进行更改，它定义了服务是否启动以及将何时、如何启动。\n以下是 Windows 服务的四种启动类型：\n自动：服务会在 Windows 启动时自动启动。通常，这些是在计算机引导过程中所需的关键服务。 自动（延迟启动）：这些服务会在登录 Windows 后的一小段时间自动启动。通常，这些是非关键服务，并设置为在等待一段时间后启动，以加快系统启动时间。 手动：这些服务需要在用户方便的时候手动启动或停止。 禁用：这些 Windows 服务会在不更改启动类型的情况下永久禁用。\n那么服务究竟可以用在什么现实的地方呢？\n远程桌面：如果远程桌面需要某个用户登录才能使用，那么远程开机功能将成为无用功能，因为开了你也连不上。你也可以通过设置自动登录用户来启动它，但这会降低电脑的安全性，随便某个人都可以访问你的资料了。 hyper-v 虚拟机：在远程电脑上，hyper-v 可以同时运行多个操作系统，这时候，如果还需要登陆某个用户才能使用的话，是不是很不方便，平白多了一个连接远程桌面的步骤。 用户自己的后台服务：比如说你搭建了一个网站，或者是装了一个管理面板，如果需要登陆某个用户的话，也是非常麻烦的。 总结起来就是，如果某个程序，你希望它按一下开机键就能用，那么服务就很适合这样的程序。\n使用服务管理器管理服务 「服务」管理器是 Windows 操作系统中内置的 MMC（Microsoft 管理控制台），它列出了所有的 Windows 服务及其详细信息，是管理 Windows 服务的图形用户界面工具。\n使用 Windows + R 快捷键打开「运行」- 运行 service.msc 打开服务管理器，或者在 Windows 搜索框中搜索 服务。\n启动类型决定了服务是否能够启动（如果已停止）。如果某个服务的启动类型设置为「禁用」，则无法使用常规方法启动它。要启动某个服务，它的启动类型必须设置为「手动」、「自动」或「自动（延迟启动）」中的一种。\n以下是更改 Windows 服务启动类型的步骤：\n1 在服务管理器中双击某项服务，或者鼠标右击选择属性\n2 在启动类型下拉菜单中选择其中一项 – 然后点击应用和确定关闭窗口。\n也可以手动启动或重新启动某项服务，右键单击要启动的服务 – 然后选择启动或重新启动。\n但这时候你会发现，服务管理器\n只能管理已有的服务，无法新增或者删除某项服务，那么如何实现这个需求呢？\n使用 sc 管理服务 sc 是 Windows 自带的服务管理工具，可以完成一些 GUI 界面没有提供的操作。\n但这个工具我用得很少，不熟悉，暂时还是不讲这个了，以免误导大家。\n使用 nssm 管理服务 nssm 也是一项用于 Windows 的服务管理器，但遗憾的是，该软件已经停止更新多年，最终版本停留在了 2017 的预发布版本。不过，该软件已经足够稳定好用，功能也基本完善，操作方便简单，现在仍然可以正常使用。\nnssm 官方下载地址\n将解压后的文件夹放置在 C:\\Program Files\\ 目录下面，然后将 win64 目录添加到环境变量。\n随后你就可以在终端中使用该工具了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 PS C:\\Users\\\u0026lt;username\u0026gt;\\ nssm.exe NSSM: The non-sucking service manager Version 2.24-101-g897c7ad 64-bit, 2017-04-26 Usage: nssm \u0026lt;option\u0026gt; [\u0026lt;args\u0026gt; ...] To show service installation GUI: nssm install [\u0026lt;servicename\u0026gt;] To install a service without confirmation: nssm install \u0026lt;servicename\u0026gt; \u0026lt;app\u0026gt; [\u0026lt;args\u0026gt; ...] To show service editing GUI: nssm edit \u0026lt;servicename\u0026gt; To retrieve or edit service parameters directly: nssm dump \u0026lt;servicename\u0026gt; nssm get \u0026lt;servicename\u0026gt; \u0026lt;parameter\u0026gt; [\u0026lt;subparameter\u0026gt;] nssm set \u0026lt;servicename\u0026gt; \u0026lt;parameter\u0026gt; [\u0026lt;subparameter\u0026gt;] \u0026lt;value\u0026gt; nssm reset \u0026lt;servicename\u0026gt; \u0026lt;parameter\u0026gt; [\u0026lt;subparameter\u0026gt;] To show service removal GUI: nssm remove [\u0026lt;servicename\u0026gt;] To remove a service without confirmation: nssm remove \u0026lt;servicename\u0026gt; confirm To manage a service: nssm start \u0026lt;servicename\u0026gt; nssm stop \u0026lt;servicename\u0026gt; nssm restart \u0026lt;servicename\u0026gt; nssm status \u0026lt;servicename\u0026gt; nssm statuscode \u0026lt;servicename\u0026gt; nssm rotate \u0026lt;servicename\u0026gt; nssm processes \u0026lt;servicename\u0026gt; 在这里我们主要学习三个命令：install、remove、list。\ninstall 命令 用于安装某个服务，例如安装音乐服务 Navidrome，就可以直接\nnssm install Navidrome\n选择 Navidrome 程序的路径，添加好必要的参数就可以了，此外，还可以修改服务的启动方式。\nremove 命令 用于删除某个服务：\nnssm remove Navidrome\nlist 命令 这个命令是 2017 年的最后一个预发布版本才有的功能，list 命令并没有在 help 页面中出现，但确实是可用的， nssm list可以列出当前计算机上所有通过 nssm 创建的服务。\n相比 sc 工具，nssm 只能管理和配置 nssm 自身创建的服务项，他并没有权力改动系统本身的服务，相对来说更加安全。\n","date":"2025-03-03T22:23:44Z","permalink":"https://songguokunsgg.github.io/p/windows-11-%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/","title":"Windows 11 高阶应用指南——服务管理"},{"content":"恩山上面已经有较多的刷机教程，但始终没有一个相对完整的系统性教学，往往在过程中会漏掉那么几个步骤，让我也吃了不少苦头。今天一狠心把路由器也刷成 ImmortalWRT 了，并在这里记录一下详细的刷机过程。当然，这篇文章更像是一个系统性的整理，并非小白教学，必然是给懂一些网络的人看的，所以不会有过多配图。\n参考 恩山文章 Github 798x 相关项目 确保系统版本为 1.0.84 小米近期推送了 1.0.90 的系统更新，如果你不幸进行了升级，那么可以洗洗睡了。\n幸运的是，根据网友测试，1.0.90 刷机方法和 1.0.84 一样，但还是建议先降级到 1.0.84 再操作。\n首先，下载小米的救砖工具和系统包，包含以下两个文件：\n固件：miwifi_rd03_firmware_f85f9_1.0.84.bin 刷机工具：MIWIFIRepairTool.x86.zip 将路由器从光猫上拔下，路由器 LAN 口与电脑网口对插，并将路由器和电脑设置为同一网段，小米默认为 192.168.31.0/24 网段。\n解压刷机工具 MIWIFIRepairTool.x86.zip，运行刷机工具，根据提示操作即可。只有一个地方需要注意，最后一个步骤需要按住 reset 按钮重启，重启时 LED 灯会变黄，变黄后过几秒松掉 reset 键，黄灯闪烁，同时电脑屏幕会显示出刷机进度条。如果电脑没有任何弹窗出来，则路由器为正常开机，需要重新尝试操作。\n刷机之后需要手动把网段设置为 192.168.31.0/24，访问192.168.31.1，进行初始化设置。这里的设置不需要连上外网，只要把 webui 的密码设好就行了。\n解锁临时 SSH 来源：\n有线连接路由器后，打开 192.168.31.1 检查路由器可以正常访问并进行初始化设定 打开 xmir-patcher-main 目录中的 run.bat，选择【2】Connect to device，输入刚才初始化路由器时写的登陆密码 选择【4】Create full backup，备份并下载分区 注意：我进行到这一步时并不能备份原厂分区，由于我并不会刷回官方系统，就懒得操作这一步了。 最后再选择【8 - {{{ Other functions }}}】，再选择【2】修改 root 密码，并且固化 SSH，选择【7 - Install permanent SSH】 注意：这一步也是可选，刷完 OpenWRT 之后，系统都变了，这时候固化 SSH 有什么用呢？ 将 uboot 上传到路由器并刷入 这里可以选择用图形 SSH 工具 mobaxterm 进行，也可以直接使用系统 ssh 和 scp 命令进行，由于上传的文件就一个，所以就不演示 mobaxterm 了，道理都是相通的。\n起一个终端，拷贝 uboot 文件到/tmp/目录下\n1 2 scp mt7981_ax3000t_an8855-fip-fixed-parts-multi-layout.bin root@192.168.31.1:/tmp/ # passwd: root 另起一个终端，ssh 到路由器上\n1 2 ssh root@192.168.31.1 # passwd: root 刷入 uboot：\n1 mtd write /tmp/mt7981_ax3000t_an8855-fip-fixed-parts-multi-layout.bin FIP 进入 uboot 并刷机 进入 UBOOT：拔掉电源，卡针顶入 reset 孔并保持，连接电源，保持 reset 键 5 秒，路由器显示灯亮白色。 手动将电脑网段调整到 192.168.1.0/24，访问 192.168.1.1，进入 UBOOT 界面 因为我们要刷入的是 immortalwrt，所以选择 mtd layout 为 immortalwrt-112m 这里注意，在网上，你有可能下载到 4 种类型的固件：\nfactory 的固件表示固件通过 uboot 进行刷入。 sysupgrade 的固件表示，在 immortalwrt 安装完成之后，在系统内进行 OTA 升级所用的固件。 stoke 固件表示适用于官方分区布局。 带 initramfs 的固件一般用不上，这种固件貌似用于特殊用途，在这种固件中进行的配置更改并不会保存（ramfs 特点），应该仅用作调试，这一块我也不是很了解，当我没说。 推荐在 uboot 中刷入不带 stoke 的 factory 固件，当然，后续的系统 OTA 升级也必须使用不带 stoke 的固件，也就是看好这俩：\nimmortalwrt-mediatek-mt7981-xiaomi_mi-router-ax3000t-an8855-squashfs-factory.bin immortalwrt-mediatek-mt7981-xiaomi_mi-router-ax3000t-an8855-squashfs-sysupgrade.bin uboot 刷机用 1.，后续系统升级用 2.。\n刷完后的配置 一定要看固件发布者定下的默认网关地址，如果发布者没有说到，那么就把 IP 地址设置为自动，这些固件应该默认有启用 DHCP，会自动分发一个 IP 地址下来。在网页浏览器输入网关地址进行配置。\nimmortalwrt 对 WAN/WAN6 的默认配置是 DHCP/DHCPv6，适用于光猫拨号，如果你是路由器拨号，就把 WAN 改成 PPPoE 即可。\n后续的配置就跟 OpenWRT 一样了，不再赘述。\n系统洁癖？折腾党？固件定制党？ 这一部分讲解如何自己编译 ImmortalWRT 固件，但这里太小了写不下，等有时间了我再来。\n这里提供一份我自己编译的固件，带了以下功能：\nArgon 主题设置 ttyd 终端 Open 克拉什 网络唤醒 Alist ddns-go uHTTPd 管理 UPnP Zerotier Docker 默认网关地址：10.0.0.1\n通过网盘分享的文件：AX3000Tv2-ImmortalWRT 链接：https://pan.baidu.com/s/1Nto99D_bNqHjhZhozEVP1Q?pwd=7tu8 提取码：7tu8\n——————————————————————————\n有时间了，写一下。\n首先打开网址：，这是 hanwckf 发布的适用于 798x 芯片硬件的源代码。\n还有一个比较新的版本，不过我没试过：。\n我已经创建了一个，所以你的界面可能与我有所不同。\ncodespace 里面会包含一套完整的开发环境，整体编译步骤可以看我以前文章，搜索 immortalwrt 即可。\n主要区别在两点，一是选择配置，二是选择机型：\n以下引用 README.md\nQuickstart Run git clone --depth=1 https://github.com/hanwckf/immortalwrt-mt798x.git to clone the source code.\nRun cd immortalwrt-mt798x to enter source directory.\nRun ./scripts/feeds update -a to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default\nRun ./scripts/feeds install -a to install symlinks for all obtained packages into package/feeds/\nCopy the configuration file for your device from the defconfig directory to the project root directory and rename it .config\n1 2 3 4 5 6 7 8 # MT7981 cp -f defconfig/mt7981-ax3000.config .config # MT7986 cp -f defconfig/mt7986-ax6000.config .config # MT7986 256M Low Memory cp -f defconfig/mt7986-ax6000-256m.config .config Run make menuconfig to select your preferred configuration for the toolchain, target system \u0026amp; firmware packages.\nRun make -j$(nproc) to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel \u0026amp; all chosen applications for your target system.\n第 5 步，针对 AX3000Tv2，使用 cp -f defconfig/mt7981-ax3000.config .config，第 7 步，将除 AX3000Tv2 以外的机型全部去掉。\n然后定制 luci 软件包，编译即可，codespace 不存在网络问题，应该可以一次成功。\n但 codespace 的环境配置不高，编译时间比较长，还是更推荐本地搭建编译环境，需要使用 ubuntu20.04 系统，\n","date":"2025-02-24T23:40:04Z","permalink":"https://songguokunsgg.github.io/p/%E5%B0%8F%E7%B1%B3-ax3000tv2-%E5%88%B7%E6%9C%BA%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B/","title":"小米 AX3000Tv2 刷机完全教程"},{"content":"在当今数字化时代，我们每天都在与各种文件打交道。在 Windows 系统中，这些文件存储在硬盘上，并以 C: /D: /E: 等驱动器形式呈现在资源管理器中。然而，你是否曾好奇过这些文件在硬盘上的真实形态，以及它们背后的诸多奥秘？\n存储基础原理 分区表 一块新硬盘，暂时是没有分区表和分区格式的。之前在介绍系统安装的时候有提到过主引导记录（MBR）和 GUID 分区表（GPT）两种分区表格式：\nMBR（Master Boot Record，主引导记录）：这是一种传统的分区记录方法，最早在 1980 年代初随着 PC DOS 2.0 和 IBM PC XT 的发布而广泛使用。它不仅记录分区信息，还包含引导加载程序。MBR 曾是硬盘分区表的标准，并被广泛用于管理多个可引导分区。\nGPT（GUID Partition Table，GUID 分区表）：是一种较新的分区方案，GPT 与 UEFI（统一可扩展固件接口）标准一同出现于 2000 年代初。GPT 可以支持更大的硬盘容量和更多的分区数量，是现代硬件的首选分区表格式。\n较新的硬件应该全部使用 GPT 格式分区表，只有仍然使用传统 BIOS 的硬件可以使用 MBR。\n分区格式 在 Windows 系统中，常见的分区格式有 NTFS、FAT32 和 ExFAT。\nFAT32 文件系统是一种较早的文件系统格式，它的最大特点是兼容性较好，能够在多种操作系统中使用。但是，FAT32 文件系统存在一些局限性，例如它对单个文件的大小限制为 4GB，对分区的大小也有一定的限制，通常最大为 32GB。这意味着如果你有一个大于 4GB 的文件，如一部高清电影，就无法将其存储在 FAT32 分区的硬盘上。ExFAT 是 FAT32 文件格式的拓展，解除了 4GB 的文件大小限制。\n相比之下，NTFS 文件系统功能更为强大。它支持更大的分区和文件大小，理论上可以支持到 16EB（艾字节）的分区大小和单个文件大小，这对于现代计算机中动辄几十 GB 甚至上百 GB 的大型软件和数据文件来说至关重要。此外，NTFS 文件系统还提供了文件加密、文件压缩、文件权限管理等高级功能，能够更好地保护数据安全和隐私。NTFS 是现代 Windows 系统的推荐文件系统格式，对于 Windows 的兼容性是最好的。\n一般来说，传统 U 盘、TF 存储卡等设备使用 ExFAT 最佳，因为这些设备需要在不同的电脑上使用，兼容性非常重要。而长期固定在某台机器上的磁盘，则应该使用 NTFS 格式。如果有双系统的需求，那么公用的分区应该使用 ExFAT 格式。\n此外还有 APFS、EXT4、BITRFS 等文件系统，不过它们更常用于 Unix-Based 的系统。\n文件在硬盘上的物理存储结构 当我们把文件存储在硬盘上时，文件的数据并不是连续地存储在硬盘的某个区域，而是以簇为单位进行存储。簇是硬盘存储数据的基本单位，它由若干个扇区组成。硬盘在读写数据时，是以簇为最小单位进行操作的。\n也就是说，假如你设定的簇为 4KB，那么即使你存的文件只有 1KB，这份文件依然会占用 4KB 的空间。\n文件数据在硬盘上可能是连续存储的，也可能是离散存储的。当文件较大时，如果硬盘上有足够的连续空间，文件就会以连续的方式存储，这样在读取文件时速度会比较快。但如果硬盘空间比较碎片化，文件就会被分散存储在不同的簇中，读取文件时就需要硬盘磁头在不同的位置进行读取，速度会相对较慢。这样的设计提高了磁盘空间的利用率。\n格式深度剖析 常见文件格式分类 文件格式是文件的存储方式和数据组织形式，不同的文件格式适用于不同类型的数据和应用场景。在 Windows 系统中，常见的文件格式有文本格式、图像格式、音频格式、视频格式和可执行文件格式等。\n文本格式主要包括 .txt（纯文本文件）、.docx（Word 文档）、.xlsx（Excel 工作表）等。.txt 文件是最简单的文本格式，它只包含纯文本内容，没有任何格式设置。.docx 和 .xlsx 文件则可以包含丰富的文本格式、表格、图表等内容，适用于文档编辑和数据处理。\n图像格式有 .jpg（联合图像专家组格式）、.png（便携式网络图形格式）、.bmp（位图格式）等。.jpg 格式是一种有损压缩的图像格式，它能够在保证图像质量的前提下，大大减小文件大小，因此被广泛应用于网络图片和照片存储。.png 格式是一种无损压缩的图像格式，它支持透明背景，适用于网页设计和图标制作。.bmp 格式是一种未经压缩的位图格式，文件大小较大，但图像质量较高，常用于图像处理和编辑。\n音频格式包括 .mp3（MPEG-1 音频层 3 格式）、.wav（波形音频文件格式）等。.mp3 格式是一种有损压缩的音频格式，它能够在保证音质的前提下，大大减小文件大小，是目前最流行的音频格式之一。.wav 格式是一种未经压缩的音频格式，文件大小较大，但音质较好，常用于专业音频制作和编辑。\n视频格式有 .mp4（MPEG-4 部分 14 格式）、.avi（音频视频交错格式）等。.mp4 格式是一种有损压缩的视频格式，它能够在保证视频质量的前提下，大大减小文件大小，是目前最流行的视频格式之一。.avi 格式是一种较早的视频格式，它支持多种编码方式，但文件大小较大，兼容性较好。\n可执行文件格式主要包括 .exe（可执行文件）和 .dll（动态链接库文件）。.exe 文件是 Windows 系统中可直接运行的程序文件，当我们双击一个 .exe 文件时，操作系统会加载该程序并执行它。.dll 文件是一种包含可由多个程序共享的代码和数据的文件，它可以在程序运行时被动态加载和使用，有助于提高程序的运行效率和节省系统资源。\n格式的识别机制 在 Windows 系统中，文件格式的识别主要依靠文件扩展名和文件头。\n文件扩展名是文件名中位于最后一个“.”之后的部分，它通常用于标识文件的类型。例如，.txt 表示文本文件，.jpg 表示图像文件等。当我们打开一个文件时，操作系统会根据文件扩展名来确定使用哪个程序来打开该文件。然而，文件扩展名并不是文件格式的唯一标识，有些恶意用户可能会修改文件扩展名来伪装文件类型，因此仅依靠文件扩展名来识别文件格式并不完全可靠。\n文件头（也称为 Magic Number）是文件开头的一段特定的字节序列，它包含了文件格式的真正标识信息。不同的文件格式具有不同的文件头，例如，.jpg 文件的文件头是“FF D8 FF”，.png 文件的文件头是“89 50 4E 47 0D 0A 1A 0A”等。通过读取文件头，操作系统或应用程序可以准确地识别文件的格式，从而确保正确地处理文件。\n格式转换原理与方法 有时候，我们可能需要将一种文件格式转换为另一种文件格式，例如将 .jpg 图像转换为 .png 图像，或者将 .mp4 视频转换为 .avi 视频。文件格式转换的原理主要是根据不同的文件格式规范，对文件的数据进行重新编码和组织。\n在 Windows 系统中，我们可以使用一些专门的文件格式转换工具来进行文件格式转换。例如，对于图像格式转换，我们可以使用 IrfanView、XnConvert 等工具；对于视频格式转换，我们可以使用 Format Factory、Any Video Converter 等工具。这些工具通常提供了简单易用的界面，我们只需选择要转换的文件、目标文件格式和一些转换参数，然后点击“转换”按钮即可完成文件格式转换。\n需要注意的是，文件格式转换可能会导致文件质量的损失，特别是对于有损压缩的文件格式。例如，将 .jpg 图像多次转换为 .png 图像再转换回 .jpg 图像，可能会导致图像出现噪点、模糊等现象。因此，在进行文件格式转换时，我们应该尽量选择高质量的转换工具和参数，以减少文件质量的损失。\n权限管理 文件与文件夹权限类型 在 Windows 系统中，文件和文件夹的权限管理是非常重要的，它可以帮助我们控制用户对文件和文件夹的访问和操作权限。常见的文件和文件夹权限类型包括读取、写入、修改、执行等。\n读取权限允许用户查看文件的内容和文件夹中的文件列表。例如，当一个用户具有某个文件夹的读取权限时，他可以打开该文件夹，查看其中的文件名称、大小、类型等信息，但不能修改文件的内容或删除文件。\n写入权限允许用户修改文件的内容和文件夹中的文件。例如，当一个用户具有某个文件的写入权限时，他可以打开该文件并进行编辑、保存等操作；当一个用户具有某个文件夹的写入权限时，他可以在该文件夹中创建新文件、修改现有文件或删除文件。\n修改权限是读取和写入权限的组合，它允许用户对文件和文件夹进行读取、写入和删除操作。例如，当一个用户具有某个文件的修改权限时，他可以打开该文件进行编辑、保存，还可以删除该文件；当一个用户具有某个文件夹的修改权限时，他可以对文件夹中的文件进行创建、修改、删除等操作，还可以删除整个文件夹。\n执行权限允许用户运行可执行文件，如 .exe 文件。例如，当一个用户具有某个可执行文件的执行权限时，他可以双击该文件来运行它。\n权限分配原则与策略 在 Windows 系统中，文件和文件夹的权限分配遵循一定的原则和策略。默认情况下，系统会为每个文件和文件夹分配一组默认的权限，这些默认权限通常是根据用户的角色和组来确定的。\n例如，对于管理员用户，系统会赋予其对所有文件和文件夹的完全控制权限，包括读取、写入、修改、执行等所有权限；对于普通用户，系统会赋予其对某些文件和文件夹的读取和写入权限，但对于一些系统文件和文件夹，普通用户可能只有读取权限或没有权限。\n除了默认权限外，我们还可以根据实际需要对文件和文件夹的权限进行自定义分配。例如，我们可以为某个特定的用户或用户组赋予对某个文件或文件夹的特定权限，如只读权限、只写权限等。在进行权限分配时，我们应该遵循最小权限原则，即只赋予用户完成其工作任务所需的最小权限，以确保系统的安全性和稳定性。\n权限的继承与覆盖 在 Windows 系统中，文件和文件夹的权限具有继承性。当我们在一个文件夹中创建新文件或子文件夹时，新创建的文件和子文件夹会自动继承父文件夹的权限设置。例如，如果父文件夹的权限设置为允许用户 A 读取和写入，那么在该父文件夹中创建的新文件和子文件夹也会自动赋予用户 A 读取和写入权限。\n然而，在某些情况下，我们可能需要对文件或文件夹的权限进行单独设置，以覆盖继承的权限。例如，我们可以在一个继承了父文件夹权限的子文件夹中，为某个用户或用户组赋予不同的权限，如只读权限或完全控制权限。这种权限覆盖操作可以让我们更灵活地管理文件和文件夹的权限，以满足不同的安全和管理需求。\n文件的组织与管理 文件索引与搜索机制 随着计算机中文件数量的不断增加，快速找到所需的文件变得越来越重要。Windows 系统提供了文件索引和搜索功能，帮助我们快速定位文件。\n文件索引是通过对文件的元数据（如文件名、文件类型、文件大小、文件创建时间等）进行提取和存储，建立一个索引数据库。当我们使用搜索功能时，系统会根据输入的关键词在索引数据库中进行快速匹配，从而找到符合条件的文件。\n在 Windows 系统中，我们可以通过资源管理器的搜索框进行文件搜索。例如，我们可以在搜索框中输入文件名的一部分、文件类型（如 *.jpg）、文件大小（如大于 1MB）等关键词，系统会自动搜索并显示符合条件的文件。此外，我们还可以使用一些高级搜索技巧，如使用通配符（如 * 和？）、使用文件属性（如作者、标签等）进行搜索，以提高搜索的精度和效率。\n文件版本控制 在一些情况下，我们可能需要对文件进行多次修改和保存，这就涉及到文件版本控制的问题。文件版本控制可以帮助我们记录文件的修改历史，方便我们在需要时恢复到之前的版本。\n在 Windows 系统中，我们可以使用一些第三方的文件版本控制工具，如 Git、SVN 等，来对文件进行版本控制。这些工具可以记录文件的每一次修改，包括修改时间、修改内容、修改者等信息，并且可以方便地进行文件版本的比较、合并和回滚操作。\n此外，Windows 系统本身也提供了一些简单的文件版本控制功能，如文件历史记录。通过文件历史记录，我们可以定期备份文件的副本，当文件被修改或损坏时，我们可以从历史记录中恢复到之前的版本。\n文件的压缩与加密 文件压缩和加密是文件管理中的两个重要功能，它们可以帮助我们节省存储空间、提高文件传输效率和保护文件安全。\n文件压缩是通过一定的算法对文件的数据进行压缩，从而减小文件的大小。在 Windows 系统中，我们可以使用系统自带的压缩功能，右键单击文件或文件夹，选择“发送到” - “压缩（zipped）文件夹”即可将文件或文件夹压缩为一个 ZIP 文件。此外，我们还可以使用一些第三方的压缩工具，如 WinRAR、7 - Zip 等，这些工具支持更多的压缩格式和更高的压缩比。\n文件加密是通过加密算法对文件的数据进行加密，从而防止未经授权的用户访问文件内容。在 Windows 系统中，我们可以使用 EFS（加密文件系统）功能对文件进行加密。EFS 加密是基于用户账户的，只有加密文件的用户和具有解密权限的用户才能访问加密文件。此外，我们还可以使用一些第三方的加密工具，如 VeraCrypt、BitLocker 等，这些工具提供了更强大的加密功能和更高的安全性。\n文件的优化与维护 磁盘碎片整理 随着文件的不断创建、删除和修改，硬盘上的文件存储空间会变得越来越碎片化，这会导致文件读写速度变慢，影响计算机的性能。磁盘碎片整理是通过重新排列文件在硬盘上的存储位置，将文件的碎片合并为连续的存储空间，从而提高文件读写速度。 在 Windows 系统中，我们可以使用系统自带的磁盘碎片整理工具进行磁盘碎片整理。打开“此电脑”，右键单击要整理的磁盘分区，选择“属性”，在“工具”选项卡中点击“优化”按钮，然后选择要整理的磁盘分区，点击“分析磁盘”按钮，系统会自动分析磁盘的碎片情况，并给出是否需要整理的建议。如果需要整理，点击“优化”按钮即可开始磁盘碎片整理。\n需要注意的是，磁盘碎片整理对于机械硬盘效果比较明显，但对于固态硬盘（SSD）来说，由于其存储原理与机械硬盘不同，磁盘碎片整理对其性能提升并不明显，反而可能会缩短固态硬盘的使用寿命。因此，在对固态硬盘进行磁盘碎片整理时，我们需要谨慎操作。\n文件的备份与恢复策略 文件备份是保护数据安全的重要措施，它可以防止由于硬盘故障、误操作、病毒感染等原因导致的数据丢失。在 Windows 系统中，我们可以采用多种文件备份与恢复策略。\n一种常见的备份策略是使用系统自带的备份功能。打开“控制面板”，选择“备份和还原”，点击“设置备份”按钮，然后选择备份位置（如外部硬盘、网络位置等）、备份内容（如所有文件和文件夹、仅系统盘等）和备份时间（如每天、每周、每月等），系统会按照设置的备份计划自动进行文件备份。\n另一种备份策略是使用第三方备份软件，如 Acronis True Image、EaseUS Todo Backup 等。这些备份软件通常提供了更强大的备份功能，如增量备份、差异备份、镜像备份等，可以满足不同的备份需求。 在进行文件备份时，我们应该选择合适的备份位置和备份策略，确保备份文件的安全性和可靠性。同时，我们还应该定期检查备份文件的完整性和可用性，以确保在需要时能够成功恢复文件。\n文件的清理与优化 随着计算机的使用时间增长，系统中会积累大量的临时文件、缓存文件、无用文件等，这些文件会占用大量的磁盘空间，影响计算机的性能。文件清理与优化是通过删除这些无用文件、清理系统垃圾、优化系统设置等操作，来释放磁盘空间、提高计算机性能。\n在 Windows 系统中，我们可以使用系统自带的磁盘清理工具进行文件清理。打开“此电脑”，右键单击要清理的磁盘分区，选择“属性”，在“常规”选项卡中点击“磁盘清理”按钮，系统会自动扫描磁盘中的临时文件、回收站文件、系统缓存文件等，并给出可以清理的文件列表。我们只需勾选要清理的文件类型，点击“确定”按钮即可开始文件清理。\n此外，我们还可以使用一些第三方的系统优化工具，如 CCleaner、Advanced SystemCare 等，这些工具可以更全面地清理系统垃圾、优化系统设置、提高计算机性能。在使用这些工具时，我们应该选择可信赖的软件，并按照软件的提示进行操作，以避免对系统造成不必要的损害。\n文件相关高级应用案例 批量文件处理 在实际工作中，我们经常会遇到需要对大量文件进行批量处理的情况，如批量重命名、批量转换文件格式等。在 Windows 系统中，我们可以使用一些方法来实现批量文件处理。\n一种方法是使用 Windows 系统自带的批处理命令。例如，我们可以使用“ren”命令进行批量重命名，打开命令提示符，进入要处理的文件所在的目录，输入“ren *.txt *.doc”命令，即可将该目录下所有 .txt 文件重命名为 .doc 文件。我们还可以使用“for”命令进行更复杂的批量处理操作，如批量转换文件格式、批量修改文件属性等。\n另一种方法是使用第三方的批量文件处理工具，如 Bulk Rename Utility、File Converter 等。这些工具提供了更友好的界面和更强大的功能，可以方便地进行批量文件重命名、批量转换文件格式、批量修改文件属性等操作。\n文件关联与修复 文件关联是指将特定的文件类型与某个应用程序关联起来，当我们双击该文件时，系统会自动使用关联的应用程序来打开该文件。在 Windows 系统中，我们可以根据自己的需要对文件关联进行设置和修改。 有时候，由于某些原因，文件关联可能会出现问题，导致无法正常打开文件。例如，我们可能会遇到双击 .jpg 文件时，系统提示找不到关联的程序来打开该文件。在这种情况下，我们可以使用系统自带的文件关联修复工具进行修复。 打开“控制面板”，选择“程序和功能”，点击“默认程序”选项卡，然后点击“将文件类型或协议与程序关联”按钮，在弹出的窗口中找到出现问题的文件类型（如 .jpg），点击“更改程序”按钮，选择正确关联的应用程序（如 Windows 照片查看器），点击“确定”按钮即可修复文件关联。\n文件在网络共享中的应用与安全防护 在局域网环境中，我们经常需要将文件共享给其他用户访问。在 Windows 系统中，我们可以轻松地设置文件共享，并对共享文件进行安全防护。\n要设置文件共享，我们只需右键单击要共享的文件或文件夹，选择“属性”，在“共享”选项卡中点击“高级共享”按钮，勾选“共享此文件夹”，然后设置共享名称、共享级别（如读取、写入等）和共享权限。我们还可以点击“权限”按钮，对不同用户或用户组的共享权限进行更详细的设置。\n在设置文件共享时，我们需要注意安全防护。我们可以为共享文件设置访问密码，只有知道密码的用户才能访问共享文件。我们还可以使用防火墙、网络隔离等技术，限制对共享文件的访问范围，防止未经授权的用户访问共享文件。 总之，文件在网络共享中的应用与安全防护是一个重要的课题，我们需要根据实际需求和安全要求，合理设置文件共享和安全防护措施，确保文件的安全和共享的便利。\n通过以上对 Windows 系统中文件的存储原理、格式、权限管理、组织与管理、优化与维护以及高级应用案例的详细介绍，相信你对文件有了更深入的了解。在日常使用计算机的过程中，合理地管理文件、优化文件系统、保障文件安全，能够让我们更高效地利用计算机资源，提高工作效率。文件这一块，得益于微软近乎完美的封装，相对比较简单，因此配图较少。但是，如果一份文件在多种不同的系统上多次拷贝，可能会出现一些权限方面的问题，这些问题都需要我们自行定位并利用搜索引擎或 AI 来解决问题，或许，知道怎么问 AI，才是未来一项很重要的技能。\n","date":"2025-02-21T16:18:15Z","permalink":"https://songguokunsgg.github.io/p/windows-11-%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/","title":"Windows 11 高阶应用指南——文件管理"},{"content":"之前在 NAS 系统上一直使用 IPv6+ 端口号的形式来使用各项服务，日常使用倒是没有什么问题。但是，在需要远程维护路由器和服务器功能，外网仅 IPv6 的使用方式就存在一个大问题了——每次重启路由 wan/wan6，所有机器的 IPv6 地址都会变化，光是变化也还算好，毕竟我们还做了 ddns 服务，等十来分钟，新的 IPv6 地址就会被解析到 DNS 服务器。但是，解析之后，由于 DNS 缓存等等原因，域名仍然会存在一些问题……总之，每次重启之后，想要正常使用服务，需要等待一段较长的时间，并且由于连不上设备，只能坐在电脑前干等，挺煎熬的。所以我就想着再做一个 VPN，保留一个 IPv4 的远程访问接口。\n内网穿透与异地组网 异地组网是指将地理位置不同的网络或设备通过专用网络（如 MPLS 、VPN、SD-WAN 等）连接起来，形成一个虚拟的统一网络环境，使远程的设备和用户能够像在同一局域网内一样进行数据通信。异地组网广泛应用于企业的分支机构互联、跨地域办公等场景中。常见的异地组网方式有 ZeroTier 等。\n内网穿透（NAT Traversal）是一种通过中间服务器或代理服务器使位于不同内网环境中的设备可以直接通信的技术。其原理是将内网中的设备数据转发到公网上，允许外部设备访问内部网络资源。内网穿透通常用于远程访问内网服务（如家庭摄像头、局域网服务器）或便捷地连接内网中的特定设备。常见的内网穿透方式主要是 FRP。\n我的个人理解如下：内网穿透主要用于暴露某个端口（也就是某项服务）到公网上，具有明确的指向性。异地组网则是把各个设备通过 VPN 组成一个私有的虚拟局域网，这个局域网内的设备可以访问其它设备的所有服务，在服务方面不具有指向性，但对于连接设备具有针对性（只有虚拟局域网内的设备可以相互访问）。\n内网穿透很简单，以前也有讲过，这里就不赘述了，此文主要讲 zerotier 组网。\nZeroTier 配置 进入ZeroTier 官方网站，注册一个新账户。\n也可以使用社交帐号登录，登录之后创建一个 Network。\n点击新创建的 Network，进入配置页面，基本上不用改配置，把 Network 名字改改就行，然后选择一个/24 的网段，我实测/16 的网段稳定性较差。\n其它就不用动了，记下这个 Network 的 ID，后面需要用这个 ID 来加入这个局域网。\nWindows 安装 ZeroTier 进入 Download 页面，下载 Windows 版本的 ZeroTier，下载安装。\n安装后的 ZeroTier 不会在桌面创建快捷方式，但可以在开始菜单中找到，快捷方式可以自行创建（右键 ZeroTier，选择“打开文件位置”，将快捷方式复制到桌面即可）。\n打开 ZeroTier 后，右下角可以看到它的图标，点击图标，“Join a Network”来加入一个虚拟局域网。如果这个设备很常用，那么要把“Start UI at Login”选上。\n回到 zerotier 网页端，同意该设备加入。\n然后我们打开终端，查看 ipconfig，可以看到类似下面的输出\n1 2 3 4 5 6 7 以太网适配器 ZeroTier One [272f5********]: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址。. . . . . . . : fe80::f25d:1cdc:b591:f44c%19 IPv4 地址 . . . . . . . . . . . . : 10.147.19.12 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关。. . . . . . . . . . . . : 25.255.255.254 能获取到 IPv4 地址就可以了，保险起见的话，还可以核对一下网页端的 IP 地址。\nOpenWRT 安装 ZeroTier 路由器异地组网可以说是整个家庭网络的核心，只要路由器不出事，其它问题都好解决，因此 OpenWRT 安装 Zerotier 我觉得很有必要，但 OpenWRT 的安装相对 Windows 要困难许多。\n编译安装 在源码中 make menuconfig，luci-application 里面勾选 zerotier 即可。\n包管理器安装 1 2 opkg update opkg install zerotier 有条件的话，我非常建议所有软件都通过编译安装，不容易出问题，不方便的话就用包管理器安装也行。\n填入自己的网络 ID，然后启用。\n接下来，我们来配置防火墙，首先将“常规设置”里面的“转发”改为“接受”，然后新建一个防火墙区域。\n规则按图上即可，“涵盖的网络”这一项暂时选不了，因为我们还没有创建网络接口。\n然后来到“接口”，添加一个新接口，协议选择 DHCP 即可（也可以选择无协议，自行配置 IP，但一定要与管理页面上的 IP 对上，还是 DHCP 更方便）：\n然后回到防火墙设置，将“涵盖的网络”这一项选择 ZeroTier 接口，此外，还要添加一条通信规则：\n回到 ZeroTier 界面，查看接口信息，能获取到 IPv4 地址就可以了。\n最后，可以做一下 ping 测试，两台设备进行相互 ping，都能 ping 通的话即 OK。\nZerotier 原理 下面简单讲解一下 Zerotier 的原理。\nZeroTier 使用一个中央服务器来管理网络成员的身份验证和授权。每个加入网络的设备都需要一个 ZeroTier 身份（ZTID），这是一个类似于公钥的标识符。用户在 ZeroTier 中心服务器上注册，获取一个身份，并为设备分配 ZTID。每个设备在加入网络时，都会通过中心服务器来发现网络中的其他成员。中心服务器维护一个成员列表，包括每个设备的 ZTID 和网络地址。\nZeroTier 通过路径选择算法来确定数据在网络中的最佳传输路径。如果两个设备之间没有直接的网络连接，ZeroTier 会通过中继节点来转发数据。中继节点是网络中的一些设备，它们允许其他设备通过它们来转发数据。\n在设备中，ZeroTier 会创建一个虚拟网卡。在 Windows 中，这个网卡是自动创建的，在 OpenWRT 则需要我们手动配置，这个网卡的上游就是 ZeroTier 的某个服务器，该服务器具有 DHCP 功能，可以自动为接入局域网的设备分发 IP 地址。通过这个上游服务器，所有接入的设备形成了一个虚拟局域网，从而实现相互访问。\n如果你退出 ZeroTier 软件，这个虚拟网卡也就失效了，那么你就无法再访问其它设备。\n我们不需要关注 ZeroTier 的具体实现原理，只要了解一下数据的流向就行了。\n","date":"2025-02-20T16:15:15Z","permalink":"https://songguokunsgg.github.io/p/windows--openwrt-%E5%BC%82%E5%9C%B0-zerotier-%E7%BB%84%E7%BD%91/","title":"Windows + OpenWRT 异地 Zerotier 组网"},{"content":"我们的个人资料都是存储在一块块硬盘上的，这些硬盘会以 C: /D: /E: 这样的形式（被称为驱动器）在资源管理器中展示给我们。驱动器中是一个个的文件与文件夹，在这一章中，我们来重新认识它们。\n资源管理器 大家对资源管理器肯定不陌生，它就像我们电脑里的“大管家”，管理着各种文件和文件夹。打开资源管理器，可以看到一些文件和文件夹图标。\n右侧红框圈出的部分是导航栏，可以快速选择想去的文件夹，不在其中的文件夹也可以从右侧的文件浏览页面中拖入。此外，导航栏还提供了“Onedrive”、“Linux”等快捷方式。资源管理器实际上只负责存储，并不负责管理，C 盘中的目录结构是微软帮助我们设定好的，如果没有特殊需求，按照默认使用即可，也就是图片存放“图片”文件夹，文档存放“文档”文件夹等等。但许多中国用户并不习惯这样子做，而常常是将文件随意地防止在桌面，或是新建一个 D 盘分区，放置在新分区里面，但这样做是不推荐的，会造成严重的资源浪费。\n举个例子：一块 1T 的硬盘，分 300G 给 C 盘做系统，700G 给 D 盘做资料盘，随着你的使用，C 盘很容易被占满空间，这时候，如果 D 盘中已经存储了大量的资料，那么将 D 盘的空间分出一部分给 C 盘是很困难的。假如分出了 200G 给 C 盘，此时，虽然 C 盘暂时多了 200G 空间，但说不准哪天又被占满了……因此，不妨直接把所有的 D 盘都分给 C 盘，也就是不分区。\n如果仍然被占满，这说明磁盘已经把所有空间都利用起来了，此时要做的只能是换一块更大的硬盘。\n因此，我们最好按系统默认的方式存放文件：\n纠正大家一个小误区，“桌面”是用于存放经常使用的资料的目录，比如每天都要打开的文件。“文档”用于存放偶尔打开的资料文件。把所有文件全放在桌面是不可取的，也不利于文件管理。\n点击“查看” - “显示”，可以打开“文件扩展名”与“隐藏的项目”，从而看到系统隐藏的扩展名和一些隐藏文件。注意，不要随意修改文件的后缀，除非你清晰地知道自己在做什么。\n资源管理器还能显示文件的详细信息，比如文件大小、类型、创建时间和修改时间等等。这些信息可都是有用的线索，能帮我们更好地管理文件。比如，你想要找一个很久以前创建的文档，就可以通过创建时间来筛选，是不是很方便？\n磁盘 说到存储管理，就不得不提磁盘。磁盘可是存储数据的“大本营”，我们的各种文件、照片、视频都存放在里面。\n现在的磁盘主要有机械硬盘和固态硬盘两种。机械硬盘就像一个旋转的盘子，数据存储在盘子上，通过读写头来读取和写入数据。它的优点是容量大、价格相对便宜，但缺点是速度较慢，而且容易受到震动的影响。\n固态硬盘则是一种新型的存储设备，它使用闪存芯片来存储数据，没有机械部件。所以它的速度非常快，能让我们电脑的开机速度和程序运行速度都大幅提升。不过，它的价格相对较高，容量也比机械硬盘小一些。\n右键此电脑，点击“管理”，再点击“存储”下的“磁盘管理”，可以打开磁盘管理页面：\n该页面向我们展示了磁盘的数量和分区情况。如图，放置了一块硬盘，硬盘上有三个分区。\n这个页面展示了多块磁盘的分区情况。右键某块磁盘，可以打开详情页。\n从详情页可以看到磁盘的运行情况、分区形式、容量空间等信息。如果需要更加专业的磁盘管理，可以采用国产软件 DiskGenius。\nRAID RAID 是一种把多个磁盘组合在一起，以提高存储性能和数据冗余的技术。\n在磁盘管理中，右键某块磁盘，可以看到以下界面：\n红框中的选项就代表新建 RAID，RAID 有好几种类型，并且这些类型在 Linux 中的名字与 Windows 有所不同，下面我们来一一介绍，括号中代表 Linux 下的 RAID 名称。\n跨区卷（JOBD） 跨区卷就像是把几个磁盘 拼成一个“大磁盘”，数据可以存储在多个磁盘上，这样做的好处是可以增加存储容量。数据的存放机制是由第一颗硬盘开始依序往后存放，即操作系统看到的是一个大硬盘 (由许多小硬盘组成的)。 但如果硬盘损毁，则该颗硬盘上的所有数据将无法救回。若第一颗硬盘损坏，通常无法作救援 (因为大部分文件系统将磁盘分割表 (partition table) 存在磁盘前端，即第一颗)，失去磁盘分割表即失去一切数据，若遭遇磁盘阵列数据或硬盘出错的状况，危险程度较 RAID 0 更剧。\n它的好处是不会像 RAID 0，每次访问都要读写全部硬盘。但在部分的 JBOD 数据恢复实践中，可以恢复未损毁之硬盘上的数据。同时，因为每次读写操作只作用于单一硬盘，JBOD 的传输速率与 I/O 表现均与单颗硬盘无异。\n带区卷（RAID-0） 带区卷也是把多个磁盘组合在一起，但它会把数据分成多个部分，分别存储在不同的磁盘上。由于数据分散到多个磁盘上存取，这导致系统的数据请求就可以被多个磁盘并行执行，每个磁盘执行属于它自己的那部分数据请求。由于带宽加倍，读写 IO 速度也会加倍，所以这种数据上的并行操作可以充分利用总线的带宽，显著提高磁盘整体存取性能。 就像你有几条传送带，把数据分成几份，分别通过不同的传送带传输，速度肯定比一条传送带快多了。不过，带区卷也有数据冗余的问题，如果一个磁盘坏了，数据也会丢失。\n理论上，N 块硬盘组成的 RAID0，读写速度会是单盘的 N 倍，但实际上有差距。\n镜像卷（RAID-1） 镜像卷就是把数据同时写入多个磁盘，组成 RAID1 的所有磁盘上的数据是完全一样的。如果其中一个磁盘坏了，另一个磁盘还可以继续工作，保证数据不间断服务。\n这就像是给数据找了个“备份”，就像你有两本书，内容完全一样。如果一本书丢了，你还有另一本可以看。\n许多人把 RAID1 当作备份来使用，但注意，RAID1 并不是真正的备份，RAID1 的作用也不是做“数据备份”，而是保障服务的不间断运行，这一点一定要区分清楚。\nRAID-5 卷 RAID-5 卷是一种更高级的 RAID 类型，它把数据分成多个部分，分别存储在多个磁盘上，同时还存储了数据的奇偶校验信息。这样即使有一个磁盘坏了，也可以通过奇偶校验信息来恢复数据。 可以把它想象成一个团队合作的项目，每个人都有自己的任务，同时还记录了一些关键的信息。如果一个人出了问题，其他人可以根据这些信息来完成项目。 这四种类型的 RAID 的最常见的，此外还有 RAID6，RAID10 等等类型，他们都有着各自的作用和优缺点，这里就不赘述了。\nC 盘目录结构 C 盘可是我们电脑里的“心脏地带”，它的目录结构非常重要。我们来介绍一下 C 盘中的几个主要的文件夹：\nC:\\Windows\\ 文件夹：这是存放操作系统文件的地方，包括系统文件、驱动程序、系统设置等等。这个文件夹非常重要，不要随便删除里面的文件，否则可能会导致系统崩溃。\nC:\\Program Files，C:\\Program Files (x86) 文件夹：这个文件夹是用来存放已安装的程序的。我们平时安装的各种软件，大部分都会安装在这个文件夹里。\nC:\\Users\\\u0026lt;username\u0026gt;：这个文件夹是用来存放用户的数据和设置的，包括文档、图片、视频、音乐等等。我们可以在这个文件夹里创建自己的文件夹，方便管理自己的数据。\nC:\\Users\\\u0026lt;username\u0026gt;\\AppData\\，C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Roaming\\：原本用于存放应用程序的数据文件，但有部分软件为了跳过管理员权限，会将软件本体安装在这些目录下，例如百度网盘、迅雷等。\nC:\\Windows\\Fonts\\：系统的字体文件目录，将字体文件拖放到这个目录，就等于给整个系统安装了该字体。注意，字体文件有“为当前用户安装”和“为所有用户安装”两个选项，“为当前用户安装”的字体只有安装的用户可以使用，安装文件放置在C:\\Users\\\u0026lt;username\u0026gt;下面的某个文件夹中，而“为所有用户安装”则是把字体文件放在了C:\\Windows\\Fonts\\，所有用户都可以使用。\nC:\\Windows\\System32\\drivers\\etc\\：\n存放了一些网络相关的配置文件，常用的 hosts 文件就在这个文件夹中。\nBitLocker BitLocker 是 Windows 系统自带的一种磁盘加密工具，它可以保护我们的数据安全。通过 BitLocker 加密磁盘后，即使磁盘被盗或者丢失，数据也不会被轻易泄露。\nBitLocker 的加密过程非常简单，只需要设置一个密码或者使用智能卡就可以完成加密。而且，它还可以自动加密新添加的文件，保证数据的安全性。\n启用过程中，会提示你保存恢复密钥，请注意，这个恢复密钥非常重要，直接关系到数据安全，一旦系统出现问题，没有恢复密钥的话，神仙也是救不了 BitLocker 加密数据的，因此一定一定要保管好这份文件。如果实在担心数据安全，可以不启用 Bitlocker。\nWindows 11 开始，BitLocker 会在品牌机 OEM 系统和家庭版/专业版中默认启用，请务必注意数据安全，保管好 Microsoft 账户的密码和恢复密钥。\n总结 存储管理是一个非常重要的话题，它关系到我们的数据安全和电脑性能。通过了解这些知识，我们可以更好地管理自己的电脑，保护自己的数据。\n","date":"2025-02-19T14:46:11Z","permalink":"https://songguokunsgg.github.io/p/windows-11-%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/","title":"Windows 11 高阶应用指南——存储管理"},{"content":"本章主要讲解 Windows 系统中的驱动安装、备份以及如何在网络上寻找所需的驱动。在 Windows 系统中，驱动程序是连接硬件与操作系统的重要桥梁，其正常运行直接关系到硬件设备能否稳定、高效地工作。本章将详细介绍 Windows 系统中驱动的安装、备份以及获取驱动的途径，帮助用户更好地管理驱动程序，确保系统的顺畅运行。\n驱动备份 在互联网上，绝大多数的驱动都可以找到，但有一部分小众的硬件驱动是难以寻觅的，比如说小厂做的电脑的网卡蓝牙驱动、触屏驱动等。买这种类型的电脑，应该养成备份驱动的习惯，否则系统出现问题，重装之后可能会找不到一部分硬件驱动，导致设备管理器中长期出现未知设备，影响电脑使用。\nDism++ 是一款功能强大的系统管理工具，可以实现垃圾清理、驱动备份恢复、系统备份恢复等功能。首先，从官方网站下载并安装 Dism++ 工具。\nDism++ Github Release\nDism++ 已经停止更新多年，但目前还没有比它更好用的程序。随着 Windows 的更新，Dism++ 的部分功能出现了小 BUG，但总的来说，对用户的体验影响不大。点击程序目录中的 Dism++x64.exe，打开软件。\n然后在左侧的驱动管理中，选择需要的驱动进行备份即可。除了备份驱动之外，Dism++ 也可以很方便的还原驱动。\n那么，我应该备份那些驱动呢？其实并非所有的硬件驱动都要备份，根据我的使用经验，一般来说显卡驱动驱动是无需备份的，无论是 inter 还是 AMD、Nvidia 的显卡，都能很方便的在官网上找到驱动，有些显卡驱动 Windows 甚至会自动安装，并且显卡驱动往往占用空间较大，备份的话会导致备份时间延长、占用磁盘空间变大等。\n最省空间的办法：可以先重装一遍微软官方的系统，在系统更新中等待驱动自动安装，然后在设备管理器查看有哪些设备是没有驱动的，仅备份这些硬件的驱动即可。（备份好驱动之前，别把原厂系统给删了）\n我应该去哪找驱动？ 许多国人喜欢用驱动精灵、驱动人生、360 驱动等软件安装驱动，但这些软件往往比较毒瘤，不仅限速下载，还可能在系统中添加一些垃圾软件，因此我非常不推荐使用国产驱动软件。\nDriverPack 网站是一个非常可靠的驱动网站。它拥有庞大的驱动程序数据库，涵盖了几乎所有主流硬件设备的驱动程序。用户只需在网站的搜索框中输入硬件设备的 ID，网站就会自动匹配并显示相应的驱动程序下载链接。这些驱动程序都经过了严格的测试和筛选，确保其稳定性和兼容性。此外，DriverPack 网站还提供了驱动程序的版本信息、发布日期等详细资料，方便用户根据自己的需求选择合适的驱动版本进行下载安装。\n可以看到，DriverPack 主页非常干净，没有任何广告，只有一个驱动搜索框。搜索到所需驱动后，下载的文件也只是一个 zip 驱动压缩包，不会带任何的第三方程序，非常推荐使用。\n驱动安装 通过系统更新安装驱动 Windows 系统自带的更新功能为用户提供了便捷的驱动安装方式。用户只需点击“开始”菜单，选择“设置”选项，进入“更新和安全”界面。在该界面中，点击“检查更新”按钮，系统会自动连接到微软的更新服务器，搜索适用于当前系统的最新驱动程序和其他更新内容。如果系统检测到有新的驱动程序可用，会自动下载并安装这些驱动。安装完成后，系统可能会提示用户重启计算机，以使新的驱动程序生效。通过系统更新安装驱动的优势在于，它能够确保用户获取到微软官方认证的、与系统版本完全兼容的驱动程序，大大降低了因驱动不兼容而导致的系统故障风险。\n但 Windows 系统自带的更新功能可能出现以下问题：\n驱动装不全：部分硬件设备不在微软的驱动库中，更新完成后，设备管理器仍然显示“未知设备”。 瞎装驱动：显卡驱动为重灾区——微软驱动库更新并不及时，这导致 Windows 更新程序误降级你的驱动。例如，你安装了版本号为 15.0.3 的驱动，但微软的库中，这个硬件的驱动版本只有 13.0.0，在这种情况下，Windows 会认为你的驱动不是最新版本，导致驱动被误降级到 13.0.0 旧版。一半的硬件被强制降级并不会影响使用，但显卡驱动这种需要经常更新且十分影响用户体验的硬件，就会导致使用体验下降。 但还好，我们可以禁用驱动更新。\n使用组合键Win+R打开运行，输入gpedit.msc，点击确定打开组策略编辑器。进入计算机配置 - 管理模板 - 系统 - Internet 通信管理 - Internet 通信设置，找到并双击关闭 Windows 更新设备驱动程序搜索，勾选已启用，如下图：\n推荐使用方案：装好系统后，进行一次完整的系统更新，然后通过策略组关闭驱动更新。此后再安装未知设备驱动、更新显卡驱动。\n手动安装驱动 当系统更新无法提供所需的驱动程序，或者用户需要安装特定版本的驱动时，手动安装驱动就显得尤为重要。\n从硬件制造商的官方网站下载对应型号的驱动程序安装包。下载完成后，双击安装包文件，启动安装向导。按照安装向导的提示，用户可以选择驱动程序的安装路径、安装组件等选项。 从 DriverPack 下载驱动安装。 提供一个 DriverPack 使用示例：\n首先，打开设备管理器，右键未知设备（我已经装好驱动了所以不演示这一步），在详细信息 - 属性中选择硬件 id，复制第一项。\n在 DriverPack 中搜索这个硬件 id，\n这里需要注意，一定要选择下载 zip 文件，不要选择下载自动安装程序。下载好之后解压，右键设备管理器中的未知设备，选择更新驱动程序。\n然后选择刚才解压出的文件夹即可。这里选择的文件夹可以是递归的，什么意思呢？我们可以先把所有需要的驱动 zip 包下载好，然后全部解压在下载文件夹中，然后安装每个未知设备驱动时，浏览本地驱动这一步都选择下载文件夹即可，无需精准到每个驱动包。\n","date":"2025-02-12T14:20:33Z","permalink":"https://songguokunsgg.github.io/p/windows-11-%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E9%A9%B1%E5%8A%A8%E7%AE%A1%E7%90%86/","title":"Windows 11 高阶应用指南——驱动管理"},{"content":"在大众的心中，Windows 毫无疑问是非常易用的系统，但易用并不代表开箱即用。在写这篇文章之前，也正值春节期间，我便走访了几位亲戚朋友，发现他们都存在一些共同点，归纳起来就是——我觉得电脑不好用，但能用就行，不知道怎么优化，也懒得去优化。然后，我选择了一个比较熟悉的亲戚，并将我的个人电脑借给她们一家用了，她们对我的电脑系统给出了很高的评价，并惊叹于，明明都是 Windows 系统，为什么我的电脑用起来就是很舒服呢？\n简单说明一下，我给她们三个人每人设置了一个独立的账户，她们这些天共用我的这台电脑，并且做的都是不同类型的工作（Office，做海报，刷剧）。在此之前，她们并不知道 Windows 还能够添加多个用户。在此之前，她们从不共享彼此的电脑，因为每个人或多或少都会有一些不想让人看见的隐私信息。在我的电脑上，她们每个人的工作内容都被保护得很好，完全不用担心隐私问题。\n并且在我的电脑上，没有任何的弹窗广告，刷剧的体验感也拉满了。\n因此，建议大家不要把电脑水平停留在“能用就行”的阶段，而是要好用，并且用好。这是一个漫长的学习过程，但现在出发，总有一天可以成功。\n系统激活 以前上学的时候，遇到过不少朋友，顶着未激活的神舟电脑用了 4 年。其实 Windows 不激活也能用，但部分功能会受到限制（例如个性化功能）。\n通过密钥激活 检查当前 Windows 版本：右键点击“此电脑”——“属性”，查看是“家庭版”、“专业版”还是其他版本。确保密钥与版本兼容，密钥版本与系统版本需要对应，例如，家庭版密钥无法激活专业版系统。\n然后进入“产品密钥和激活”界面，确保设备已联网，点击“更改产品密钥”。在弹出的窗口中输入 25 位密钥（格式如：J8WVF-9X3GM-4WVYC-VDHQG-42CXT\n7Y64F-88DCY-Y6WTC-H33D2-64QHF，括号中的两个密钥可用于激活或升级专业版，但不代表永久有效）。点击“下一步”，系统会自动联网验证密钥。如果提示“Windows 已成功激活”，就代表激活成功，关闭窗口即可。如果激活失败，就需要根据提示代码排查（如 0xC004C060 可能表示密钥已被使用）。有时可能需要重装对应版本系统，或更换正确密钥。\n如果不是全新安装的系统，可能激活不会很顺利，但只要耐心查看报错提示，并借助搜索引擎或 GPT 等工具，可以很快找到对应的解决办法。\n通过命令行进行 KMS 激活 先讲解一下 KMS 激活的原理。KMS（密钥管理服务）激活是一种用于激活软件（如 Windows 系统）的机制。其原理是通过客户端与 KMS 服务器进行通信。客户端将自身硬件信息和密钥请求发送给 KMS 服务器，服务器根据预设的策略验证请求的合法性。如果验证通过，服务器会生成一个激活响应，返回给客户端，客户端据此完成激活。这种方式适用于企业等环境中批量管理软件激活，但需注意，未经授权的 KMS 激活可能涉及侵权或安全风险。\n1 2 3 # 将 KMS 服务器设置为地址 kms.03k.org slmgr /skms kms.03k.org slmgr /ato 你也可以使用其他的 KMS 服务器地址，将命令中的 kms.03k.org 进行替换即可，激活有效期为 180 天，180 天之后需要重新激活。\n从 KMS 激活原理可知，使用其他人搭建的 KMS 服务器是有风险的，虽然很低，但总归是有，那么，我们能不能自己搭建一个 KMS 服务器呢？\n这里用到全球最大同性交友网站 Github 的一个开源项目 vlmcsd（https://github.com/Wind4/vlmcsd），该项目允许你自己搭建私人的 KMS 服务器，但你需要一台拥有 docker 功能的 linux 电脑，真是一个悲伤的故事。但好消息是，Windows 系统原声支持 Hyper-V 虚拟机，并且还有基于 WSL 的容器功能，因此我们只需要在 Windows 上开启 WSL 功能，安装 docker 或者 podman，就可以很方便地搭建自己的 KMS 服务器了。如果你有一台软路由的话，在软路由上通过 docker 搭建 KMS 也很不错。\n通过第三方程序激活 第三方程序激活非常方便，几乎是小白式的一键激活，我只推荐一个软件 HEU_KMS_Activator。该软件完全免费，可用于激活 Windows 和 Office 等。但与 KMS 激活类似，风险同样存在。\n没有特殊需求的话，直接一键激活即可，如果不想激活 Office，可以把红框中两项 Office 相关选项去掉。\n桌面图标管理 再过去我们使用电脑的过程中，你一定会知道，在安装应用程序之后，往往会在桌面上生成一个图标文件，让我们看看这些图标文件究竟是什么？\n可以看到，这个快捷方式其实是某个文件的指向，例如，百度网盘的快捷方式指向了：\n1 C: \\Users\\\u0026lt;username\u0026gt;\\AppData\\Roaming\\baidu\\BaiduNetdisk\\BaiduNetdisk.exe 双击这个快捷方式，我们就可以运行该路径下的程序，打开百度网盘。\n可是，快捷方式本身不也是一个文件吗？那么这个快捷方式又是存在哪里的呢？打开资源管理器，选择左侧的桌面，可以看到，百度网盘的图标正处在这个文件夹下。\n但新的问题又出现了，明明我桌面上存在那么多的应用程序图标，为什么这个“桌面”文件夹下只有两个图标呢？\n在资源管理器中的导航栏输入：C:\\Users\\Public\\Desktop，可以发现，一些桌面上存在但“桌面”文件夹不存在的图标在这里找到了。\n普通用户与公共用户 在 Windows 中， C:\\Users(用户) 文件夹下一定存在一个“公用”用户，以及你自己的用户文件夹，假如用户名为 username，我们使用 username 用户登录 Windows 系统后，实际上桌面会同时显示来自当前用户（也就是 username 用户）和公用用户桌面上的文件。\n而这个公共用户文件夹，是所有登录这台电脑的用户都可以读取的，“公共”就是意味着“公用”。\n在安装程序的过程中，程序一般会安装在 C:\\Program Files 或者 C:\\Program Files (x86) 两个文件夹下。这两个文件夹是微软定义的程序公共安装目录，也就是说，每位用户都可以使用安装在它们下的程序。为了方便使用呢，可以手动将安装在这两个目录下的快捷方式移动到公共用户桌面 C:\\Users\\Public\\Desktop，这样的话，每位用户都可以方便地找到这些应用程序。事实上，大多数默认安装在 Progrma Files 的程序会默认将快捷方式创建在 C:\\Users\\Public\\Desktop，从而方便用户使用。但仍有一部分程序并不会这样做，需要用户手动进行管理。\n需要注意的是，应用安装程序需要使用管理员权限才能将软件安装在 Program Files 目录下，因此存在一类特殊的应用程序，它们为了避免安装时使用到管理员权限，会将应用程序以“仅当前用户可用”的方式进行安装，也就是安装在 C: \\Users\\\u0026lt;username\u0026gt;\\AppData\\Roaming 下面的某个子目录中，例如百度网盘和迅雷就是这样的一类应用程序。对于这类应用程序，快捷方式无需手动移动到公共桌面下，因为其他用户并不能访问安装用户的目录和文件，也就无法访问这两个应用程序。\n因此，给大家提出几点建议：\n安装应用程序时，要考虑这个程序是只给当前用户使用，还是给所有用户使用。如果只给当前用户使用，就安装到C: \\Users\\\u0026lt;username\u0026gt;\\AppData\\Roaming下，如果给所有用户使用，就安装到 C:\\Program Files 下。 确保快捷方式在它应在的位置，并且安装好软件后就应马上确认快捷方式的位置，将有必要移动到公共桌面C:\\Users\\Public\\Desktop的快捷方式尽快进行移动，以免后续遗忘。 偶尔检查一下用户桌面，是否存在管理不当的应用程序。 几个特殊的图标 、此电脑、网络、回收站、控制面板不会出现在任何 desktop 文件夹，需要在设置中调整才能显示。\n勾选你需要显示的图标即可，每位新建的用户都需要进行这一步骤才能显示这些图标。\nWindows 11 右键菜单 Windows 11 的右键菜单从一级菜单改为了二级，许多用户不习惯，但我们可以将右键菜单修改为 Windows10 的样式，方便使用。\n在应用程序中打开终端：\n1 reg.exe add \u0026#34;HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\u0026#34; /f /ve 重启资源管理器\n1 2 taskkill /F /IM explorer.exe explorer.exe 就可以修改右键菜单样式为 Windows 10。输入以下命令可以还原为 Windows 11 样式：\n1 reg.exe delete \u0026#34;HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\u0026#34; /va /f 重启资源管理器即可。\nWindows Defender 配置 Windows Defender 是一款优秀的安全应用，但有时候它的存在会有些烦人，因此可以通过一些方法禁用 Defender 或禁用它的某些功能。\n事先声明，在现在的 Windows 系统中，只有 Windows Server 系列可以彻底关闭 Defender，消费级系统都只能禁用某些功能。\n我们只关注红框中的几个功能。\n病毒和威胁防护 在 Windows 11 系统中，“病毒和威胁防护”功能提供了多种设置，用于保护设备免受病毒、恶意软件和其他安全威胁的侵害。但你下载的破解程序和激活程序也会受到拦截，一些个人文件也可能被误删除（小概率事件）。\n在“病毒和威胁防护”设置下面的管理设置中，可以配置保护策略。以下是各项主要设置的含义：\n实时保护：核心功能之一，能够持续监控设备中的潜在威胁，如病毒、恶意软件和间谍软件。当您访问或执行文件时，实时保护会自动扫描这些文件，检测是否存在可疑活动。如果发现威胁，它会立即发出警报并采取措施阻止威胁。可以通过切换按钮打开或关闭实时保护。但需要注意的是，关闭实时保护会使设备更容易受到威胁，且计划扫描仍会继续运行，此外，在重新启动系统之后，实时保护选项会重新开启，如果需要永久关闭，需要使用组策略功能。如果某些文件或文件夹被误判为威胁，可以通过添加排除项来避免它们被扫描。 开发人员驱动器保护：开发人员驱动器保护是 Windows 11 为开发者提供的一个特殊功能，它为开发人员提供了一个安全且隔离的环境，用于存储和开发代码。性能模式：该功能包括一个性能模式，可以异步扫描开发人员驱动器。这意味着安全扫描会在文件操作完成后进行，而不是在文件操作过程中同步进行。这种异步扫描模式可以在保护安全的同时，避免因扫描而引起的性能延迟。 云提供的保护：允许 Microsoft Defender 从云端获取最新的安全更新和改进。这有助于更准确地识别、阻止和修复威胁。 自动提交样本：如果启用此功能，Microsoft Defender 会自动将可疑文件发送给 Microsoft 进行分析。用户也可以手动提交文件样本，以确保某些文件被检查。 篡改防护：可以防止恶意应用程序更改重要的 Microsoft Defender 设置，例如实时保护和云提供的保护。通过确保这些设置保持不变，篡改防护有助于维护设备安全配置的完整性，防止恶意应用程序禁用关键安全功能。 受控文件夹访问：可以保护指定文件夹中的文件免受未知或不受信任应用程序的更改。默认情况下，许多常用文件夹已经受到保护，用户也可以添加更多文件夹到受保护列表中。 网络保护：可以防止用户访问钓鱼网站、恶意软件网站以及下载潜在恶意文件。它与 Microsoft Defender for Endpoint 和 Microsoft Defender for Cloud Apps 集成，能够阻止恶意 URL 和 IP 地址。 勒索软件防护：通过受控文件夹访问来防止未知应用程序更改受保护文件夹中的文件。此外，它还提供了从勒索软件攻击中恢复的选项。 排除项：用户可以将特定的文件、文件类型、文件夹或进程添加到排除列表中，避免它们被实时扫描。但需要注意的是，添加排除项可能会使设备和数据面临风险。 组策略管理 Windows 策略组（Group Policy）是微软 Windows 操作系统中的一项功能，它允许管理员对计算机和用户进行集中管理。通过策略组，管理员可以控制用户和计算机的配置、安全设置、软件安装、网络访问等。以下是 Windows 策略组的一些主要功能：\n集中管理：策略组允许管理员在单个位置配置和管理多个计算机和用户的设置。\n安全性管理：管理员可以设置密码策略、账户锁定策略、安全选项等，以增强系统的安全性。\n软件部署：通过策略组，管理员可以控制软件的安装、更新和卸载。\n桌面管理：管理员可以配置桌面环境，如开始菜单、任务栏、桌面背景等。\n网络配置：策略组可以用来管理网络设置，如 VPN、无线网络、代理服务器等。\n远程安装服务：管理员可以使用策略组远程安装操作系统。\n用户配置文件管理：策略组可以帮助管理用户配置文件，包括漫游配置文件和强制配置文件。\n脚本执行：管理员可以设置启动和关机脚本，以自动化某些任务。\n事件日志管理：策略组允许管理员配置事件日志的大小和保留策略。\n远程桌面服务管理：管理员可以控制远程桌面服务的设置，如连接权限、会话超时等。\n系统服务管理：管理员可以配置系统服务的启动类型和状态。\n软件限制策略：管理员可以设置软件限制策略，以控制哪些程序可以运行。\n文件夹重定向：管理员可以将用户的文件夹（如文档、桌面）重定向到网络位置，以便于备份和集中管理。\nBitLocker 驱动器加密：策略组可以用来管理 BitLocker 加密，保护数据安全。\n应用程序兼容性：管理员可以配置应用程序兼容性设置，以解决旧应用程序在新操作系统上运行的问题。\n策略组通过组策略对象（GPO）实现，这些对象可以链接到 Active Directory 中的组织单位（OU）、域或站点。当策略组设置更改时，这些更改会自动应用到链接到 GPO 的计算机和用户。策略组是 Windows 管理中一个强大的工具，它简化了大型企业环境中的 IT 管理任务。\n使用示例：在组策 略中永久关闭实时保护功能 使用 win+R 开启运行菜单，输入 gpedit.msc 打开组策略。 在路径 计算机配置 - 管理模板-Microsoft Defender 防病毒 下面找到 实时保护 选项\n点击关闭实时保护，启用它（一定注意是启用“关闭实时保护”）\n重启电脑或重新登录，实时保护就被彻底关闭了。\n组策略是一个方便且功能强大的管理工具，但千万不要随便修改里面的配置，一定要充分了解某功能之后再去修改该功能，此外，家庭版系统没有组策略功能。\n开关机 开关机也是有学问的，这里主要介绍关机、休眠和睡眠三种模式的区别。它们分别是三种不同的电源管理状态，存在不同的特点和用途：\n关机（Shutdown）：完全关闭计算机，停止所有硬件的运行，包括 CPU、内存、硬盘等。关机后，计算机不会消耗任何电力，所有运行的程序和打开的文档都会关闭，系统状态不会被保存。 休眠（Hibernate）：将计算机的当前状态（包括打开的程序和文档）保存到硬盘上的一个文件（hiberfil.sys）中，然后关闭计算机。从休眠状态恢复时，计算机会从硬盘加载之前保存的状态，恢复到休眠前的工作状态。这个过程比从关机状态启动要快，但比睡眠状态恢复要慢。 睡眠（Sleep）：将计算机的当前状态保存到内存中，然后关闭大部分硬件，但保持内存供电，以便快速恢复。从睡眠状态恢复时，计算机会从内存中加载之前保存的状态，恢复到睡眠前的工作状态。这个过程非常快，通常只需要几秒钟。 休眠和睡眠的主要区别在于，将计算机状态存储到硬盘（休眠）还是内存（睡眠）。这也导致了一些特性：休眠状态下被断电，运行状态理论上可以恢复，睡眠状态下被断电，由于内存中数据丢失，工作状态将无法恢复。此外还有以下三方面的区别。\n恢复速度：睡眠 \u0026gt; 休眠 \u0026gt; 关机。 功耗：关机 \u0026lt; 睡眠 \u0026lt; 休眠。 硬件状态：关机状态下，所有硬件都停止工作；休眠状态下，硬盘工作，其他硬件停止；睡眠状态下，只有内存和一些基本硬件（如网络接口）保持工作状态。 了解这些区别后，你可以根据实际需要选择合适的电源管理状态。一般来说，长期不用（数日）就关机，短期不用（数小时）就睡眠即可。\n","date":"2025-02-07T16:20:33Z","permalink":"https://songguokunsgg.github.io/p/windows-11-%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/","title":"Windows 11 高阶应用指南——系统基本配置"},{"content":"使用 podman 搭建 immortalWRT 编译环境 使用 dockerfile 构建镜像\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # podman build -t openwrt: latest -f Containerfile FROM ubuntu: 22.04 LABEL maintainer = \u0026#34;songguokunsgg\u0026lt;fansong_yan@icloud.com\u0026gt;\u0026#34; ARG DEBIAN_FRONTEND = noninteractive ENV TZ = Asia/Shanghai RUN sed -i \u0026#39;s@archive.ubuntu.com@mirrors.tuna.tsinghua.edu.cn@g\u0026#39; /etc/apt/sources.list \u0026amp;\u0026amp; \\ apt update \u0026amp;\u0026amp; \\ apt upgrade -y \u0026amp;\u0026amp; \\ # 部分软件包是编译 immortalwrt 所需的 apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \\ bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \\ g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \\ libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \\ libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \\ ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \\ python3-pyelftools python3-setuptools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \\ upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd file \u0026amp;\u0026amp; \\ # 新建一个普通用户，openwrt 不能用 root 用户编译 useradd -m user -s /bin/bash USER user RUN git config --global user.name \u0026#34;songguokunsgg\u0026#34; \u0026amp;\u0026amp; \\ git config --global user.email \u0026#34;fansong_yan@icloud.com\u0026#34; CMD echo \u0026#34;==========\u0026#34; CMD echo \u0026#34;podman-compose up -d\u0026#34; CMD echo \u0026#34;To enter the container:\u0026#34; CMD echo \u0026#34;podman exec -it OpenWRT bash\u0026#34; CMD echo \u0026#34;请使用普通用户 user 进行编译\u0026#34; CMD echo \u0026#34;-----end----\u0026#34; 使用 podman-compose 构建容器\n1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3.8\u0026#39; services: RK3568: image: openwrt container_name: OpenWRT # volumes: # - \u0026#34;/user/openwrt:/home/openwrt/openwrt\u0026#34; network: bridge user: user command: bash tty: true stdin_open: true 进入容器，默认使用普通用户 user\nclone immortalWRT 仓库 1 git clone -b openwrt-24.10 --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt 输出如下：\n1 2 3 4 5 6 7 8 9 10 11 Cloning into \u0026#39;immortalwrt\u0026#39;... fatal: unable to access \u0026#39;https://github.com/immortalwrt/immortalwrt/\u0026#39;: GnuTLS recv error (-110): The TLS connection was non-properly terminated. openwrt@fcfcdf766fb1:/home/openwrt$ git clone -b openwrt-24.10 --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt Cloning into \u0026#39;immortalwrt\u0026#39;... ............... remote: Compressing objects: 100% (4299/4299), done. remote: Total 9496 (delta 1565), reused 1071 (delta 1071), pack-reused 4126 (from 2) Receiving objects: 100% (9496/9496), 12.91 MiB | 4.40 MiB/s, done. Resolving deltas: 100% (2055/2055), done. warning: unable to access \u0026#39;/root/.config/git/attributes\u0026#39;: Permission denied Updating files: 100% (9699/9699), done. 成功 clone，如果出现网络错误请自行解决。\n进入仓库 cd immortalwrt，相比 openwrt，immortalwrt 已经内置了大量软件包，因此不需要添加三方软件源。\n保证网络通常，获取软件包列表\n1 2 ./scripts/feeds update -a ./scripts/feeds install -a 修改默认网络配置（可选） 1 vim package/base-files/files/bin/config_generate 搜索 192.168，可以定位到 IP 地址所在的位置，修改为 10.0.0.1 和 10.0.$((addr_offset++)).1，我习惯使用 10.0.0.1/24 网段\n配置 immortalwrt 1 make menuconfig 我的配置：\nLuci -\u0026gt; Thems 和 Apps 根据需求定制即可。\n下载与编译 建议先下载再编译，避免因为网络问题而编译卡住。\n1 2 make download V=s make -j$(nproc) 下载使用单线程，因为国内的网络环境很有可能需要随时调试。编译可以使用多线程，如果遇到报错的话使用单线程编译 make -j1 V=s 排错。\n推荐第一次编译使用单线程，确保可以编译成功后，再使用多线程编译。已经编译过的代码不会重复编译，因此第一次编译会比较慢，后面就会快很多。\n编译结果保存在 bin/targets/x86/64/ 目录下。\n","date":"2025-01-26T18:02:33Z","permalink":"https://songguokunsgg.github.io/p/%E8%87%AA%E8%A1%8C%E7%BC%96%E8%AF%91%E5%AE%9A%E5%88%B6-immortalwrt/","title":"自行编译定制 immortalWRT"},{"content":"学习一个操作系统，必然要先学会系统安装。在学习初期，因为误操作、错误操作导致系统崩溃的情况常有发生，相对而言，Windows 比 Linux 具有更好的兼容性。即便是发生了误操作，一般不会导致进不去系统（Linux 误操作极容易导致整个系统崩坏）。可能你会觉得，想安装 Windows 这么简单的操作，有什么好学的？的确，安装 Windows 系统很简单，但其中也存在一些可以了解的门道和快捷方式，学会他们，能让你的学习之路更加畅通便捷。\n在这一章中，我会讲解 Windows 系统的几种安装和启动方式，并解决一些常见的问题。\nBIOS 启动与 UEFI 启动 （Basic Input/Output System，基本输入输出系统）启动和 UEFI（Unified Extensible Firmware Interface，统一可扩展固件接口）启动是计算机启动过程中两种不同的引导模式，它们在启动方式、兼容性、性能和安全性等方面存在显著差异。BIOS 是一种古老的启动技术，用于初始化硬件并引导操作系统。它最早出现在 20 世纪 80 年代，是计算机启动的默认模式，直到 UEFI 技术的出现。\n开机时，当引导加载程序完成后，BIOS 会查找启动设备（如硬盘、U 盘或光驱）。它会在启动设备的第一个扇区（通常是第 0 扇区）查找引导记录（MBR，Master Boot Record，主引导记录）。MBR 的大小为 512 字节，包含分区表和引导代码。随后，BIOS 将 MBR 中的引导代码加载到内存中执行，引导代码会进一步加载操作系统的引导程序（如 Windows 的 bootmgr），最终启动操作系统。UEFI（Unified Extensible Firmware Interface，统一可扩展固件接口）是一种较新的启动技术，旨在替代传统的 BIOS。它由 UEFI 论坛开发，首次出现在 2005 年左右，并逐渐被现代计算机采用。UEFI 在开机时也会对硬件进行初始化和检测。但 UEFI 不依赖传统的 MBR，而是使用 GPT（GUID Partition Table，全局唯一标识分区表）分区格式。GPT 支持更大的硬盘容量，并且可以支持超过 4 个主分区。UEFI 会加载启动设备中的 EFI 引导程序（如 Windows 的 bootmgfw.efi），并通过 EFI 系统分区（ESP）启动操作系统。\n可见，BIOS 的启动是从第一个扇区开始，而 UEFI 则使用了一个单独的 EFI 分区（通常为 FAT/FAT32 格式）来进行系统引导，这使得 UEFI 对于系统的启动规划更加容易。\n从 2024 年开始，Windows 10/11 的普及率已经非常高，一般用户已经不会再使用 Windows 10 以下的系统，因此，在磁盘初始化方面，你应该直接选择 GPT+UEFI 启动，MBR+BIOS 启动方式已经过时。接下来，我们在 Disk Genius 中查看一块未初始化的硬盘：\n可以看到，我们的硬盘默认采用 MBR 分区表，接下来，将它转换为 GPT 分区表。\n点击保存更改，可见硬盘已经被转换为了 GPT 分区表。使用类似的方式也可以把分区表格式从 GPT 转换为 MBR。但要注意，分区表转换可能会损坏数据，在做转换之前一定要备份好数据。\n接下来，我们就可以在这块硬盘上安装 Windows 11 系统。目前常用的安装方法有两种，分别是使用微软官方的 ISO 镜像安装，另一种是通过 Windows 安装器进行安装。一般来说，如果你没有对系统的定制化需求，直接使用 ISO 文件安装即可。如果你希望进行一些自定义行为，比如自定义 EFI 分区大小，精简应用程序、批量安装系统等等，那么 windows 安装器更适合。\n在接下来的示例中，我使用的是 Windows 11 LTSC 2024 的系统镜像，下载地址：\n1 2 3 4 电驴： ed2k: //|file|zh-cn_windows_11_enterprise_ltsc_2024_x64_dvd_cff9cd2d.iso|5287520256|D6E4FE0BA5FD8A2F22FC9C0326481791|/ 磁力 magnet:?xt=urn:btih:b84e74c1dbcc88a02c5b24a6f84383f353a2e1dd\u0026amp;dn=zh-cn_windows_11_enterprise_ltsc_2024_x64_dvd_cff9cd2d.iso\u0026amp;xl=5287520256 从 .iso 文件安装系统 从 Windows 安装器安装系统 首先进入 PE 系统，找到\n可以看到，安装器顶部划分了 Windows 2000/XP/2003和Windows Vista/7/8/10/2008/20XX 两个模块。左侧代表了 BIOS 启动方法，而右侧则是 UEFI 启动方式。虽然标签没有写明 Windows 11，但 11 的安装方式与 Windows 10 相同。\n安装器并不会为我们创建 EFI 分区，因此，我们需要提前在 Disk Genius 中创建 EFI 分区。\n![Windows 安装器](建立 EFI 分区.png)\n点击确定。\n在两种安装方式中，我们都没有选择对磁盘进行分区，这是由以下原因决定的：\n固态硬盘的普及：SATA 和 NVME 固态硬盘的读写速度都远高于传统的机械硬盘，并且已用磁盘空间对磁盘读写速度影响很小，这使得我们不必像过去的机械硬盘一样通过分区的方式提升磁盘读写能力。 重装系统不需要清除数据：在 Windows 10 以前，重装系统往往需要格式化整个 C 盘，因此用户不得不再重装系统之前备份数据，分盘功能简化了数据备份流程。而现在的 Windows 系统重装已经可以保资料重装，因此分盘功能的作用已经不大。哪怕你的确需要格式化磁盘，固态硬盘的高读取速度也使得备份不再困难。 分盘的缺点：用户对于磁盘的分配往往没有那么精确，极容易出现一个盘已满而其他盘还空闲的情况，这会导致磁盘的空间利用率降低。 所以，建议更改掉过去的磁盘分盘习惯，采用“一盘一盘符”的使用习惯。（也可以通过 RAID 将多块磁盘合并为一块使用，后续会提到）\n挂载好安装盘（双击 ISO 文件即可）后，打开 Windows 安装器，选好引导和安装驱动器位置。注意，安装映像的名称是 install.wim，文件大小大概为 5GB，与 ISO 映像大小差不多，不要选错了。\n如果没有别的需求，直接点击安装即可。\n定制化需求 Windows 安装器还有一些其他功能。\n无人值守安装：在没有用户交互的情况下，自动完成操作系统或软件的安装过程。在 Windows 中，你可以使用 XML 文件来配置无人值守安装。这些 XML 文件通常称为无人值守答案文件（Unattend Answer Files），其中包含了安装过程中所需的各种配置选项。\n添加驱动程序：在安装系统之前，可以先用 Dism 备份驱动程序，然后在 Windows 安装器添加备份的驱动文件夹。但我建议进入系统之后再去设备管理器安装驱动，避免出现一些奇怪的问题。\n挂载驱动器：一般选择 C，如果有双系统需求，可以选择其他的盘符。但需要注意，有的软件将某些路径写死在 C 盘，如果系统盘使用其他盘符，可能会出现兼容性问题。\n这里可以针对系统做一些自定义，例如禁用一些功能、开启文件浏览相关选项、运行一些脚本等。这些选项都可以在进入系统后自行更改。\nVHD 功能：Windows 支持将系统安装在虚拟硬盘中并启动，我们先创建一块虚拟磁盘。\n![创建虚拟磁盘](创建虚拟磁盘 2.png)\n安装器会自动帮我们挂载这块虚拟磁盘为 Z 盘。将安装驱动器位置选择为 Z 盘，就可以将系统安装到这块虚拟磁盘上面。\n这种安装方式存在弊端：\n电脑实体机上需要存在一个物理 Windows 系统，通过这个物理系统才能引导加载虚拟磁盘上的系统。 VHD 格式已经过时，使用 VHDX 虚拟磁盘是更好的选择。 也就是说，对于裸机而言，安装器的 VHD 功能并没有实质性作用。\n从 .vhdx 启动系统 在 Windows 系统中，我们可以很方便地创建和管理 vhdx 虚拟磁盘，此外，你也可以使用 Disk Genius 工具更加专业便捷地管理 vhdx 磁盘。\n这种虚拟磁盘有什么用呢？\n挂载到 Hyper-V 虚拟机中：Hyper-V 虚拟机使用的磁盘格式就是 vhdx。 挂载为盘符：可以将 vhdx 磁盘挂载为 D 盘等盘符使用。有些应用程序必须要存在 D 盘才能使用，还有一部分程序喜欢在 D 盘中产生一些垃圾文件，增大了磁盘管理难度。将 vhdx 挂载盘符，可以在不分区的情况下正常使用这些软件。当你不需要该盘符之后，可以直接取消挂载这块虚拟磁盘，然后将 vhdx 文件删除即可，不会存在任何的垃圾残留。 启动双系统：在已存在一个物理 Windows 系统的基础上，可以直接启动 vhdx 上的系统（仅支持 Windows，并且安装要求与电脑本身相同，如果你的电脑仅支持 Windows10/11，那么这块虚拟盘也必须安装 Windows10/11 才能启动）。这种启动方式相比物理机几乎没有性能损失。 也就是说，在 Hyper-V 中安装一个 Win 系统，在物理机上可以直接启动这个系统。\n那么如何启动 vhdx 上的系统呢？\n假设你已经在物理机上安装好了 Windows，虚拟磁盘上也已经通过 Windows 安装器进行了初始安装。接下来我们使用 BOOTICE 工具添加虚拟磁盘引导即可。\n首先选择 BCD 编辑中的智能编辑模式。\n点击添加，然后选择启动磁盘、启动分区。设备文件选择不带盘符 vhdx 磁盘路径即可，因为盘符在启动分区处已经选好了。\n设置一个自定义的菜单标题，保存系统设置即可。\n重启系统后，选择你创建的启动项，就可以进入这个系统了，成功引导后的剩余工作与重装系统是一样的。这个系统中，物理机上的磁盘会被映射为其他盘符，例如 D 盘等。\n在强调一下，直接引导 vhdx 系统，与直接安装在物理机是完全一样的，如果你的电脑不支持旧系统，那么在 vhdx 上安装旧系统也是不能成功开机的，因此，不必尝试在现在的电脑上安装 XP、Win7 等系统。如果你有旧系统的需求，必须通过 Hyper-V 虚拟机来实现。\nWindows 11 跳过配置检测 大多数这两年出厂的电脑都满足 Windows 11 的最低安装要求，但也有一些老电脑有升级需求。其实 10 年前的 i7-4790K 跑 Windows 11 也没啥大问题，但没有 TPM2.0 这点确实成为了很多旧电脑的拦路虎。\n这种情况建议直接使用 Windows 安装器进行安装，可以不进行配置检查。如果必须通过 ISO 文件安装的话，可以通过以下方式绕过 Windows 11 的配置检测。\n注意，截至 25 年 1 月，以下修改注册表绕过配置检测的方法已经失效，建议使用 Windows 安装器安装。\n首先，按住键盘上的 shift+ F10，在命令提示中输入：regedit 回车。打开注册表。\n然后在 LabConfig 的目录中，点击右键\u0026ndash;新建 - 然后单击“DWORD（32 位）值”。将此 DWORD 命名为“BypassTPMCheck”。接着继续新建一个“DWORD（32 位）值”。将此 DWORD 命名为“BypassSecureBootCheck”。一定要注意大小写，保证大小写和屏幕上的命令是一样的。双击这两个 DWORD，并将其“数值数据”更改为“1”。\n![新建项](新建项 2.png)\n然后关闭注册表和命令提示符。在安装程序中点击左上角的返回，选择版本后，点击下一页。成功跳过了 TPM 和安全启动的验证。\n各个系统版本的区别 家庭版、专业版、教育版、企业版是最常用的几个 Windows 版本，他们的主要区别如下：\n功能/版本 家庭版 专业版 教育版 企业版 适用人群 家庭用户、轻量级办公 专业人士、小型企业 教育机构、学生 大型企业、组织 价格 约 1088 元 约 1500 元 批量许可 批量许可 功能特点 基础功能，适合日常使用 高级功能，适合专业需求 针对教育需求优化 最全面的功能，适合企业 远程桌面 不支持作为主机 支持 支持 支持 Hyper-V 虚拟化 不支持 支持 支持 支持 Windows 沙盒 不支持 支持 支持 支持 BitLocker 加密 不支持 支持 支持 支持 内存支持上限 128GB 2TB 2TB 6TB CPU 支持 单插槽，最多 64 核心 双插槽，最多 128 核心 双插槽 双插槽 组策略编辑器 不支持 支持 支持 支持 Windows 信息保护 (WIP) 不支持 支持 支持 支持 更新策略 自动更新 自动更新 自动更新 可自定义更新 那么，对于个人用户，怎么选择系统版本呢？\n家庭版系统一般随品牌机附赠，缺少了远程桌面、Hyper-V、BitLocker、组策略等非常关键的功能，因此在非必要条件下（比如你一定要用正版），我都不建议使用家庭版系统。有些功能在终端中可以调出来，但总归是比较麻烦，不如直接上其他版本系统。\n专业版系统功能完善，价格合适，非常适合用作个人或家庭操作系统。\n教育版是我最喜欢的版本，功能相比专业版非常全面，几乎解锁了所有 Windows 功能（有些功能专业版都是没有的），如果你是学生的话，存在白嫖可能（你的学校购买了教育版系统）。\n企业版支持 6T 内存，并且可以自定义更新策略，对于家庭服务器或者不想频繁更新系统的人来说是个不错的选择。不过我更建议家庭服务器使用 Server 系统。\nWindows 的版本转换很容易，设置中更改密钥即可。\n小结 在本章中，我们学习更加进阶的 Windows 安装方式，包括物理磁盘上的安装、虚拟磁盘上的安装以及安装过程中的常见问题。最后还学习了各版本 Windows 的大致区别。\n","date":"2025-01-15T20:20:33Z","permalink":"https://songguokunsgg.github.io/p/windows-11-%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","title":"Windows 11 高阶应用指南——系统安装"},{"content":" 输入法添加小鹤双拼 1 reg add HKCU\\Software\\Microsoft\\InputMethod\\Settings\\CHS /v UserDefinedDoublePinyinScheme0 /t REG_SZ /d \u0026#34;小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt\u0026#34; /f 右键菜单改为 win10 样式 1 2 3 reg add \u0026#34;HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\u0026#34; /f taskkill /F /IM explorer.exe explorer.exe 未完待续……\n","date":"2025-01-10T14:02:33Z","permalink":"https://songguokunsgg.github.io/p/%E5%B8%B8%E7%94%A8%E7%9A%84-windows-%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC/","title":"常用的 Windows 配置脚本"},{"content":"目录：\n系统安装 BIOS 启动与 UEFI 启动 从 .iso 文件安装系统 从 Windows 安装器安装系统 从 .vhdx 启动系统 Windows 11 跳过配置检测 系统基本配置 系统激活 桌面图标管理 Windows 11 右键菜单 Windows Defender 配置 组策略管理 开关机 驱动管理 驱动备份 我应该去哪找驱动？ 驱动安装 存储管理 重新认识资源管理器 磁盘 RAID 跨区卷 带区卷 镜像卷 RAID-5 卷 C 盘目录结构 BitLocker 文件管理 1. 网络管理 计算机们连接的桥梁——网络 IPv4 与 IPv6 DNS 域名解析服务 A/AAAA CNAME DHCP/DHCPv6 SLAAC 子网掩码与 IPv6 前缀 服务管理 程序自启动的另一种方式——服务 管理服务 防火墙 避免成肉鸡的神器——防火墙 基本配置 高级配置 系统高级配置 系统属性 组策略 本地安全策略 注册表 Hyper-V、WSL 和 容器 I 型和 II 型虚拟机 Hyper-V 与 Hyper-V 网络 Windows Subsystem for Linux Docker 与 podman Windows 沙盒 任务计划程序与 Windows 备份 开启自动化之旅 任务计划程序详解 机器有价数据无价 RAID 与备份的区别 如何正确备份？ 普通数据：异盘双备份 重要数据：异地三备份 示例 1：使用 Windows 系统做 NAS 服务器 示例 2：使用 Windows 系统做开发服务器 ","date":"2025-01-07T11:23:38Z","permalink":"https://songguokunsgg.github.io/p/windows-11-%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E5%AF%BC%E8%A8%80/","title":"Windows 11 高阶应用指南——导言"},{"content":"记得大四下学期，我成功从土木工程考研考到了计算机，当时我真的感动得快哭了……但我当时的第一想法是——终于可以光明正大地折腾电脑了。\n从初中拥有自己的第一部智能手机——天语小黄蜂 W619 起，就对着电脑有了浓厚的兴趣。那时候的安卓手机硬件配置很低，自带的阿里云 OS 也不好用，因此便开始研究刷机。从原生到乐蛙、从乐蛙到 MIUI……再后来，从小黄蜂开始，陆陆续续换了不少手机，印象深刻的有小米 3、iPhone 6s Plus、小米 8、小米 9、红米 K30、K30 Ultra……后来安卓系统功能越来越多，系统也越来越稳定，“刷机”这种玩法也渐渐离我远去了。\n上大学的时候，每当我折腾手机电脑，都会有人问我：“你一个学土木的折腾这些东西有什么用？”我对此真的无言以对。因此，当我知道自己可以光明正大地学计算机的时候，那种兴奋感，直到现在都很难复刻。\n现在来看，当初的想法确实有点幼稚，毕竟是学习、玩自己喜欢的东西。折腾电脑，和其他人刷抖音、追剧、看番、yp、玩乐器 等相比，并没有本质区别。难道不学音乐的人，就不配听歌弹吉他了吗？考虑到大学时期比较好面子，也还算可以理解。\n第一次接触博客 知道自己可以学计算机之后，给自己找的第一件事就是，搭建自己的博客。当时先买了一个腾讯云的学生版服务器，然后用 wordpress 搭建了自己的博客，但是，第一个问题出现了：\n百度搜不到我的博客 研究了一段时间的 SSO 等，感觉很麻烦，放弃了。\n第二次接触博客 这时候，我已经研二了，也完成了发论文和找对象这两件事。于是就想着再把这个博客做一做。\n这个时间段，我对于网站部署已经有了一些经验，也成功地将网站做到了百度上，但这时候更严重的问题出现了：\n没人看 每次进后台看到个位数（或许都是我自己）、或者是 0 的访问次数，就会有一种挫败感。\n几个月之后，云服务器到期，这个网站也就夭折了。\n第三次接触博客 第二次到第三次的期间，我在知乎上发表了许多技术型的文章，有不少文章获得了很好的反馈。此外，我已经完成了研究生的学业，进入了一个企业进行工作。学习到工作是一个将自我意识打碎重建的过程，习惯了学生时代的懒散，便无法适应上班族的生活。刚上班的那些日子，真的非常痛苦，于是，我再次搭建了博客，一开始，是希望记录一些不想被人看见的情绪……后来，逐渐适应现在的生活之后，便把知乎的文章大多搬到了博客上，后来写的文章也都是两边进行发表。\n而这一次，我思考清楚了，我为什么想要搭建博客？我的初心是什么？\n我问自己，我写文章是为了挣钱吗？并不是，知乎目前只带给了我 2 块钱的收入。\n是为了得到别人的赞扬吗？也不是，文章帮助到了别人，我会开心，文章没人看，我也不觉得有什么。\n所以，我只是单纯地喜欢分享而已。\n于是，我放弃了云服务器，放弃了 wordpress，放弃了浏览量统计，放弃了评论，我决定着重于内容本身，着重于分享本身。\n所以我最终采用的方案是：hexo+github pages。\n原因很简单，我不靠博客挣钱，所以我也不想多花钱，而着重于内容最好的方式就是静态网站。\n摒弃世俗，方可重生。\n我的文章你爱看，你就看；不爱看，也不爱喷。能帮助到你，我高兴，不能帮助到你，你可以提出意见，我改进。\n在转变心态之后，我发现，我再也不会纠结于浏览量，不会纠结于点赞了，我真的可以，专注内容本身。\n冬日小七 的 blog，这将会是我的最后一个……\n","date":"2024-12-23T23:02:33Z","permalink":"https://songguokunsgg.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E4%B8%8D%E5%86%8D%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"为什么你不再搭建个人博客？"},{"content":"由于原先的爱快 Q6000 只能放置在家中比较偏的书房，信号覆盖不全，因此给家里添置了一台新的 J4125 软路由，闲鱼 400 块买的，带一个 16G U 盘，性价比不错，随后把 Q6000 放在了家中间的位置。\n一开始的想法是，把这台软路由也刷成 iKuai 系统，然后把 Q6000 拿来做无线设备，这样的话界面比较熟悉，配置比较简单，还能无缝衔接之前 Q6000 的配置，但到手之后我傻眼了。\n也就是说，虽然爱快识别出了这四个网口，但事实上只能当成一个用。\n然后我想到去刷网卡的 MAC，结果一搜索：\n然后我想到了，退货，经过一番协商，卖家最终同意了。但在寄快递之前，我抱着死马当活马医的心态，给机器刷了一个 OpenWRT。\n然后我就惊奇地发现，网口 MAC 地址竟然是可以自行更改的。并且哪怕不更改，仍然可以自行分配 LAN、WAN 口。\n我心想，那就不退了吧，毕竟这台机器性价比确实还行。\n结果万万没想到，在折腾 OpenWRT 的路上，真的没有尽头！各种坑等着你……这两天真是挨了家里人不少骂。但在配置好之后，我发现其实配置还是不难的，主要是网上的信息太杂了，并且没有一个统一的配置标准。A 说该这样，B 说该那样，C 说 A 和 B 的方法可以一起用……他们的方法也许确实没错，但对于初学者来说真的很难分辨哪些内容是适合自己的。\n所以我今天就根据自己的需求，来用最简单的方式配置一下 OpenWRT 主路由，以及一些真的很坑的踩坑记录。\n识别自己的需求 由于自己家有台 NAS，因此对于内网的要求是比较高的，这也是我换软路由的主要原因。但我不建议花太多钱买软路由（对于纯路由器来说，N100、N305 等 CPU 真的有点浪费）。我自己只需要一个 4 网口 2.5G 的 J4125 就行了。\n当然，建议买之前问清楚网口 MAC 地址是否重复，别买到我这种机器了，否则装不了 iKuai。\n我的主要需求比较简单（主路由也不建议太复杂，复杂功能可以用旁路由实现）：\nIPv4 DHCP 支持，可以固定 IP，自定义 DNS 等，这都是 OpenWRT 的基本功能。 IPv6 的完整支持，需要通过公网实现 NAS 服务的访问。 终端功能，方便管理。 UPnP，这个对我是可选，因为有 IPv6 了。 从我的经验来看，只有第 2 点比较难配置，其他都是基本功能，因此我主要讲解 IPv6 相关的内容。\n固件定制 OpenWRT 固件定制网站\n这是一个免费的在线 OpenWRT 编译网站，合理利用该工具，可以极大减少后期的配置工作。\n首先定制架构和软件包，按需定制，我只需要终端功能，因此添加 luci-app-ttyd 即可。\n然后定制网络相关的内容：\n防火墙：使用默认的 Firewall4 互联网：勾选你需要的插件，我这里都不需要 后台地址，子网掩码：可以看我上一篇文章的相关介绍，看了你就知道怎么填了 IPv6：我的刚需，勾选 旁路由模式：不勾选 拨号账号、密码：须填写 WIFI 账号密码：软路由一般没有无线功能，不用填写 暴露至公网：由于 IPv4 不是公网的，因此开了也没用 EFI 镜像，默认 eth0 为 WAN：勾选 然后点击构建新固件，等待编译完成。完成后烧录进 U 盘就安装完成了。\n自定义自己固件的好处是，可以在编译阶段就完全绝大多数的网络设置工作。\nOpenWRT 配置 首先进入 OpenWRT 管理端：\n我们主要关注网络部分。\n网络接口设备配置 在接口中，我们可以看到有四个网口，分别是 eth0、eth1、eth2、eth3。其中 eth0 是 WAN 口，eth1，eth2，eth3 是 LAN 口。我们可以通过修改 MAC 地址来改变这四个网口的 MAC 地址，这样就可以实现多个网口的功能。\n在 OpenWRT 中，不改 MAC 也可以分配 WAN、LAN 接口。但我建议还是修改一下，免得出现莫名其妙的问题。\n在配置页面检查接口的 IPv6 是否开启了\n注意： 这个地方很有可能默认是——自动 (已禁用)，非常坑。并且在这种情况下，你的设备依然能够获取到 IPv6 地址，但无法使用，不能通过 IPv6 测试，也无法访问和被访问 IPv6 网站。并且出问题后很难排查到这一点，非常坑。\n接口配置 如果拨号正确，你应该会在接口页面得到与该图类似的界面。\n其他设置都是默认即可。\nLAN 口配置，重点 LAN 接口用于分配下级设备的 IP，DNS 等，非常重要。设置不正确的话，会导致下级设备无法访问互联网。\n常规设置，高级设置不用动，这在我们编译固件的时候就已经配置好了。\nDHCP 服务器的 常规设置，高级设置 也不用动。\n先介绍一下 IPv6 的地址分配方法：得益于 IPv6 庞大的地址空间，过于 IPv4 常用的分配方法 NAT 已经不再适用。IPv6 分配地址的方式主要有两种，SLAAC 和 DHCPv6。下面引用一下别人的介绍：\n引用：OpenWrt 开启 IPv6 公网访问全指南\nSLAAC 是无状态地址自动配置协议，顾名思义，它不再需要 DHCP 服务器来维护状态，而是各个客户端自行生成、协商、通告地址。SLAAC 是唯一全平台支持的协议，Android 明确不会支持有状态 DHCPv6，谷歌认为有状态协议对于终端用户没有明显优点，还会造成隐私问题，属于 IPv4 时代的陋习。\nSLAAC 的一个重要数据是路由器定期发送的 RA（路由通告），其包含前缀信息，以及是否应该尝试通告 DHCPv6 请求地址。\nDHCPv6 本身也分为有状态和无状态两种\n有状态：通过 DHCPv6 分配 IP。 无状态：IP 依然采用 SLAAC 生成（通过 RA），但其他参数，例如 DNS，网关地址等则通过 DHCPv6 获取。 Android 明确不会支持有状态 DHCPv6：\n跟据一些说法，SLAAC 和 DHCPv6 是可以共存的，但我不太理解共存的意义是什么……因此我选择拥抱新技术，只使用 SLAAC。\nlan 口的设置 - DHCP 服务器 - IPv6 设置：\n指定的主接口：不勾选 RA 服务：服务器模式 DHCPv6 服务：禁用 本地 IPV6 DNS 服务器：勾选 NDP 代理：禁用 lan 口的设置 - DHCP 服务器 - IPv6 RA 设置：\n默认路由器：自动 启用 SLAAC：勾选 RA 标记：无，因为我们根本没有 DHCPv6 服务器。 这样设置后，下级设备应该都有公网 IPv6 地址了。可以重启一下路由器，在概览可以看到，没有任何的 DHCPv6 租约。\n可以用其他设备跑跑 IPv6 测试，应该可以跑通，但目前还无法从公网访问内网设备。\n防火墙配置 网络 - 防火墙 - 通信规则：\n按图上配置即可，还需要在 高级设置 中将 地址族限制 改为 仅 IPv6。\n我这里直接全放了，因为 IPv6 还是比较安全的，你也可以选择需要的端口进行放行。\n一些测试工具 IPv6 网站检测，检测你能否访问 IPv6 网站\nIpv6 地址查询，查询你当前的 IPv6 地址\nIPv6 ping，可以测试内网设备能否 ping 通\n","date":"2024-12-21T11:20:38Z","permalink":"https://songguokunsgg.github.io/p/openwrt-%E4%B8%BB%E8%B7%AF%E7%94%B1%E7%AE%80%E6%98%93%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/","title":"OpenWRT 主路由简易完全指南"},{"content":"其实在很久以前就有接触过子网掩码，但一直不太理解它具体的使用场景。这段时间闲鱼了一台 j4125 的四口软路由，花了两天时间折腾后，竟然意外地理解了子网掩码和 IPv6 前缀……\n其实他们的概念并不算难，但网上的介绍文章大多都是繁杂的概念和计算，让人捉摸不透。在这片文章中，我将用最清晰易懂的语言和示例，带你理解子网掩码和 IPv6 前缀。\nIPv4 和 IPv6 的区别 IPv4 地址通常表示为 4 个 8 位 2 进制数，也就是 4x8=32 位，比如 192.168.1.1，每个数字范围是 0 到 255(分别对应 00000000 和 11111111)。IPv6 地址更长，通常表示为 8 组 16 位 2 进制数（或 8 组 4 位 16 进制数，一回事），比如 2001:0db8:85a3:0000:0000:8a2e:0370:7334，看起来更复杂。\n有些初学者难以理解为什么 IPv6 是 128 位的，他们会疑惑，每一位有 16 种状态，那么总共的位数不是 16 * 32= 512 位吗？\n高手先不要笑话，真的有不少初学者有这样的疑惑。事实上应该把每个：之间的数字拆出来看，例如，4 位 16 进制数 2001。我们将其转换为 2 进制数，也就是 0010 0000 0000 0001，一共是 16 位，这样的 4 位 16 进制数一共有 8 组，因此一共是 16 * 8 = 128 位。\nIPv4 和 IPv6 最大的区别就是地址空间不同，IPv4 一共只有 4 亿个，而 IPv6 是用之不竭的（理论上能用完，但实际很难，后面会再提到相关内容）。\n从给孩子起名字说起 IP 地址是网络上设备的一个寻址符，因此，我们先讲公网 IP 可以看成是你在身份证上的名字，私网 IP 则是家里面爸妈叫你的小名。\n假设你的爸爸叫毛利小五郎，让我们带入他。\n在社会上（假设这个社会上每个人姓名不同，且都为 5 字名字），别人叫毛利小五郎，你都会答应，但有一天，你发现，有好几个人一起应答了这个名字。你们几个人都愣住了。\n不是说好的不能重名吗？政府怎么登记的？你们去质问有关部门人员，但工作人员很委屈，他说，你们名字确实不一样啊。\n你开始了自我介绍：我姓毛利，名叫小五郎\n毛利小五郎 B：我姓毛，名叫利小五郎\n毛利小五郎 C：我姓毛利小，名叫五郎\n毛利小五郎 D：我姓毛利小五，名叫郎\n毛利小五郎 E：我就叫毛利小五郎，没有名\n原来是这样，难怪大家叫一样的名字。你们一合计，那我们就在名字后面加一个标识符，把姓的字数标记一下，这样的话，即使重名，大家也可以分出来了。政府一听，好主意，当即就给你们改了身份证。于是你们几个的名字变成了：\n原先名字 现在名字 毛利小五郎 (A) 毛利小五郎/2 毛利小五郎 (B) 毛利小五郎/1 毛利小五郎 (C) 毛利小五郎/3 毛利小五郎 (D) 毛利小五郎/4 毛利小五郎 (E) 毛利小五郎/5 现在你们都清楚自己姓甚名谁了，以后大家都能分清了。、\n这时，你们用奇怪的眼光看着 毛利小五郎/5，问到：“兄弟，你没有名，那你儿子不是起不了名字吗？毕竟这个世界不允许重复姓名。”\n毛利小五郎/5 说：“我是女人，孩子不和我姓”。\nIPv4 地址生娃 上面这个故事引出了今天的主题之一，子网掩码。\n不过在 IPv4 世界里，每个单位的名字有 32 位，且每一位只能是 0 和 1。\n子网掩码就标识出了这个 IP 地址中，哪一段是爸爸，哪一段是儿子。\n回到刚刚的故事，毛利小五郎/2 想要给生一个孩子，在当前社会规则要求下，你最多能生几个呢？\n首先，孩子也得姓毛利，这是不变的，所以儿子的名字只能在后面三个字里面选，常用的汉字有 6000 个，因此你最多生下 6000^3 个孩子。再多生的话，政府就没办法帮你上户口了，你只能另想办法（也就是 NAT）。\n而毛利小五郎/1 就爽了，他能比你多生 6000 倍的孩子，可以生 6000 ^ 4 个，最惨的是毛利小五郎/5，他已经失去了生孩子的权利。\n类比到 IPv4 地址，假设子网掩码为 x，那这个地址的姓就是 x 位，他最多能有 2^(32-x) 个儿子，也就是名称\u0026quot;子网\u0026quot;的来历。\n举个例子，对于 IPv4 地址：10.0.0.9/8，则开头的 10.是爸爸，后面的 24 位都是儿子的名字空间，也就是说他可以生 2^24 个儿子，也就是地址 10.0.0.0~10.255.255.255。\n由于点分十进制的特殊性，8、16、24、32 是比较重要的子网掩码，因为他们刚好分隔开了每个点号。。利用这一特性，我们可以快速计算子网。记住以下两个特性：\n子网掩码加 1，儿子减半 子网掩码 -1，儿子加倍 例子：给定 IP 地址 10.67.55.134/10，计算其所属网段。\n首先找到 8,16,24,32 中最接近 22 的数，显然是 8。先找到 10.0.0.x/8 的网段，为 10.0.0.0~10.255.255.255，将子网掩码 +1，10.0.0.x/9 可以划分为 2 组：\n10.0.0.0~10.127.255.255 10.128.0.0~10.255.255.255 再 +1，10.0.0.x/10 可以划分为 4 组\n10.0.0.0~10.63.255.255 10.64.0.0~10.127.255.255 10.128.0.0~10.191.255.255 10.192.0.0~10.255.255.255 此时可以发现，10.67.55.134/10 属于第二个网段。\n用计算器验算以下，正确，计算器去除了网络地址和广播地址：\n例 2：给定 IP 地址 10.67.55.134/22，计算其所属网段。\n首先找到 8,16,24,32 中最接近 22 的数，显然是 24。因此，首先计算 10.67.55.x/24 的网段\n10.67.55.0~10.67.55.255 然后，将子网掩码 -1，计算 10.67.55.x/23 的网段，由前文可知“子网掩码 -1，儿子加倍”，但这里的儿子显然不够用，因此需要向前一位去借，得到一个网段：\n10.67.54.0~10.67.55.255 这里需要注意，掩码 -1，是在扩容儿子的容量，网段的数量是不变的。那么问题来了，我怎么知道是向 54 借还是 56 借呢？\n这里我们要理解，子网范围的分组，都是等分进行的，因此，在 0-255 的范围内，分一次（掩码 +1）必然是 0-127，,18-255，分 2 次（掩码 +2）必然是 0-63, 64-127, 128-191, 192-255，……，分 7 次（掩码 +7），也就是 0-1,2-3,4-5……,254-255，最多分八次（掩码加 8），也就是每个数单独为一组（这时候就要考虑到后面的范围了）。\n所以，向前借还是向后借，只要对号入座就可以了。示例中对应的是分 7 次的情况，该条件下，0,2,4……，通项为\n$a(n)=2n$\n因此显然是 54-55。\n这一块可能比较难理解，但学会之后计算很快，不用再去搞位运算了。\n然后，我们再减少一次掩码，计算 10.67.55.x/23 的网段，这时对应的是分 6 次的情况，也就是 0-3, 4-7, 8-11，……，252-255。\n显然 0，4，8 的通项为\n$a(n)=4n$\n最接近的是 4*13=52，因此 10.67.55.x/23 的网段为\n10.67.52.0~10.67.55.255 这也就是题目中 10.67.55.134/22 所属的网段，因为掩码 -1 属于扩充，因此扩充出的网段内一定是包含原 IP 的。就不用像 +1 那样子去匹配网段了。从示例也可以看出，扩充算法相比分组要难一些，但原理是一样的。\n用计算器验算一下：\n用这样的计算方法，我们完全规避了位运算，而是用简单的基本运算来实现计算，勤加练习的话，很快就可以掌握。\n例 3：苹果手机热点默认分配的子网掩码为 255.255.255.240，问最多可以有多少个设备可以连接该手机？\n这里涉及到了子网掩码的点分十进制表示，直接转换为 11111111.11111111.11111111.11110000，数 1 就行了，这里有 28 个，因此子网掩码十进制表示为 28。\n也可以用数学公式计算\n$N_0=32-(log_2(256-Z_1)+log_2(256-Z_2)+log_2(256-Z_3)+log_2(256-Z_4))$\n例中，\n$N_0=32-(log_2(256-255)+log_2(256-255)+log_2(256-255)+log_2(256-240)) =32-0-0-0-4 =28 $\n可用设备为 $2^4-2=14$ 个，可见苹果真的抠搜。\nIPv6 前缀简介 IPv6 前缀相比子网掩码就简单多了，首先理解 IPv6 的构成。\n128 位的地址被分为了三个部分，站点前缀、子网 ID、接口。其中，站点前缀和子网 ID 加起来是 64 位。而接口则是用来标识设备的。\n也就是说，在一个子网中，可以接入 2^64 个设备，已经远远超过了 IPv4 的总和（白花花的 IP 地址给穷人）。\n并且子网 ID 不是必须的，事实上，在家用宽带中，往往给的前缀都是 64 位的，直接让你划不了子网（不过我家给的 56 位前缀，真神了）。\nIPv6 前缀的灵活性非常高，对于两个相同的 IPv6 地址，前缀不同的话，他们寻址到的设备是不一样的。\n例子：2001:0db8:85a3:0000:0000:8a2e:0370:7334/64 和 2001:0db8:85a3:0000:0000:8a2e:0370:7334/56 代表的设备是同一个吗？\n在 IPv6 中，前缀后面的数字表示网络部分的位数。不同的前缀长度意味着不同的网络范围和不同的地址分配。\n2001:0db8:85a3:0000:0000:8a2e:0370:7334/64 这个地址的前 64 位是网络部分，剩下的 64 位是主机部分。这意味着这个地址属于一个/64 的子网，这个子网内可以有 2^64 个可能的地址。\n2001:0db8:85a3:0000:0000:8a2e:0370:7334/56 这个地址的前 56 位是网络部分，剩下的 72 位是主机部分。这意味着这个地址属于一个/56 的子网，这个子网内可以有 2^72 个可能的地址。\n标黑的部分就是两个地址各自的前缀。\n由于两个地址的网络部分不同（一个是前 64 位，另一个是前 56 位），它们属于不同的网络。即使具体的地址（接口标识符）相同，它们也被视为属于不同的网络，因此代表不同的设备或接口。\n通俗来讲，他们虽然名字一样，但他们的爸爸是不一样的，也就类似于毛利小五郎/2，毛利小五郎/4 不是同一个人一样。\n基于 IPv6 这一特性，实现去 NAT 化是完全可以的，并且对子网和网络地址的计算量也会远小于 IPv4，因此，早日拥抱 IPv6 吧。\n","date":"2024-12-20T22:15:57Z","permalink":"https://songguokunsgg.github.io/p/%E7%94%A8%E5%BF%AB%E4%B9%90%E7%9A%84%E6%96%B9%E6%B3%95%E6%90%9E%E5%AE%9A%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%92%8C-ipv6-%E5%89%8D%E7%BC%80/","title":"用快乐的方法搞定子网掩码和 IPv6 前缀"},{"content":"编辑器主题和字体设置 编辑器功能设置 ","date":"2024-12-12T16:56:56Z","permalink":"https://songguokunsgg.github.io/p/iar-%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","title":"IAR 基本设置"},{"content":"不知不觉中，我已经两个月没有更新博客了。这段时间里，我感到一种无形的压力，尽管工作本身并不繁重。在这段时间里，我不仅完成了日常工作，还学习了 Vue 和 Vite，收获颇丰。同时，我也在工作中接触了 freeRTOS，这对于我这个初学者来说是个不小的挑战。有时，我会自嘲地想，公司为何需要我这样一个“无用”之人。\n在网络世界中，我经常看到人们对当前就业形势的评论，我深有同感。从我个人的求职经历来看，形势确实不容乐观，即使你非常努力，也可能只是换来一个面试机会。去年 9 月，我开始寻找实习机会，最初申请了小米的数据挖掘岗位，但电话面试后便没了下文。后来，我幸运地获得了字节跳动的机器学习岗位实习机会，那段经历让我感到非常快乐，甚至超过了我现在的正式工作……扯远了。\n当前的就业市场可以用“僧多粥少”来形容，这不是我们的错，而是社会发展的必然阶段（如日韩）。除非你有能力在全球范围内竞争（如美国），否则我们大多数人必须面对现实。因此，我建议，如果找不到工作，不妨暂时放弃就业。\n让我们来算一笔账。假设月薪 5000 元，租房 1500 元，吃穿住行每月大约 2000 元（如果你在公司 996，很可能只能吃外卖，除非公司提供餐食）。在满足基本生活需求的情况下，你每月能存下 1500-2000 元，一年大约 1.8-2.4 万元。这是在没有任何其他开销的情况下。你一年存下的钱，可能还比不上资本家一天的收入。\n但你为此付出了什么？首先是时间。如果是 955 工作制，你至少晚上还有自己的时间。如果是 996，那么你几乎没有休息时间，因为那个不用上班的周日，你可能会在刷手机和对加班的焦虑中度过。其次，你可能会忽视对家人的陪伴，夜晚回家的路上，你真的有机会和家人好好交流吗？第三，你可能会觉得自己很孤单，因为生活等同于工作，你会感到自己很不自由，因为你没有任何权利。\n运气好的话，生活还能勉强维持。运气不好，身体出现问题，几年的积蓄可能就会付诸东流。毕竟，你一年也就存个一两万块，在医院眼里你只是个“穷人”。\n如果你家庭条件尚可，没有迫切需要你工作养家，不妨去继续深造，读硕士或博士（家庭条件差的不建议读博，这可能会加剧经济压力）。如果实在没有其他选择，可以在家做饭做家务，减少消费欲望，既然开源不行，那就节流。趁年轻多陪陪父母，有机会的话，可以寻找钱少事少的工作，但一定要调整好心态，要有“我不是非你这碗饭不可”的觉悟，这样资本家才没办法欺负到你头上。\n这个时间段的市场确实很糟糕，糟糕得让人没什么可留恋的。只希望这个寒冬赶快过去，打工人能够早日得到基本的权利保障。待业的人，你们也没有错，就业并没有想象中那么美好。工作是为了挣钱，挣钱是为了生活，最终的一切都是为了生活。如果你为了工作失去了生活……我不评价，也许会有人觉得值得，但一定不是大多数。\n所以，我认为，如果找不到工作，那就别勉强就业了，不要惯着那些资本家。\n","date":"2024-12-11T20:31:00Z","permalink":"https://songguokunsgg.github.io/p/%E5%BD%93%E5%B0%B1%E4%B8%9A%E5%B8%82%E5%9C%BA%E5%AF%92%E5%86%AC%E6%9D%A5%E4%B8%B4%E5%B0%B1%E4%B8%8D%E4%BA%86%E4%B8%9A%E9%82%A3%E5%B0%B1%E5%88%AB%E5%B0%B1%E4%BA%86/","title":"当就业市场寒冬来临，就不了业？那就别就了"},{"content":"这周得到了一个好消息：我研究生时期发表的 CCFA 论文被接收了。\n很开心，甚至不知道自己该写点什么。\n工作已经两个月了，我时常问自己，这两个月的工作，我开心吗？我很确信，没有哪个瞬间比得上得知论文被接收的那一刻。\n可那也仅仅是一瞬，一转头，我又回到了工作中，就像歌里唱的那样，七点钟，结束梦，他按下闹钟。其实不开心的主要有两点，一是通勤距离太长，二是工作中没有太多的成就感。能不能接受？其实可以。从那天开始，心态发生了一些转变，我不再为自己的工作感到焦虑，因为我有了后路，可以去进一步提升自己。\n我可能并不适合每天到点上下班的生活，这样的生活让我不敢生病，不敢迟到。\n但这两年的工作，跪着也要坚持下来。为此，我换掉喜欢的 macbook，买新的鸡哥，他会陪伴我剩下的两年。\n要做的事还很多，共勉。\n","date":"2024-10-25T11:31:00Z","permalink":"https://songguokunsgg.github.io/p/%E7%A6%BB%E5%88%AB%E6%98%AF%E4%B8%BA%E4%BA%86%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%90%91%E5%89%8D%E8%B5%B0/","title":"离别，是为了更好地向前走"},{"content":"国庆假期，发生了一件令我感到生气却又自责的事情。\n10 月 2 号的晚上，在我正常行驶的路途中，一位女司机突然变道（直接把车头打过来，并非缓慢变道），差点发生车祸。\n本来是一件小事，但随后，我妈开始教育我，说那位女司机已经打左转灯很久了，我应该让她过来，而不是按原速行驶。这时候，睡在后排的女朋友也醒了过来，开始斥责我：“你怎么去跟人家挤一个道呀！”（这里说明一下，她并没有看见冲突的全过程，在醒来后只看到我的车头和女司机的车头挨得很近）。\n我当时既愤怒又委屈，好几天都没能释怀。在这篇文章里，我不想在批判是非对错，而是通过三个人的心理状态，来描写出现冲突的原因，并分析最优的解决方案。\n首先来看司机（我）的视角：度过了愉快的一天，晚上开车带老妈和女朋友回家，听着女朋友在后排轻微的鼾声，感觉自己是这个世界上最幸福的男人。一路原本平安无事，突然一辆车车头摆向我……所幸平安无事，路过车子一看，是位女司机，唉，算了。但老妈和对象还在旁边唠叨，明明就不是我的错误，为什么要我改正？之前教我开车的时候，说我变道时候一定得保证后方安全，怎么？这条规则只对我有用吗？女司机的错误，为什么要我来改正呢？我明明只是在自己道上正常行驶而已。\n一整天的心情都被这件事情影响。不知不觉又想起，在过去，每一次开车，只要老妈在车上，那就是唠叨个不停，这儿该这样开、那儿该那样开，不厌其烦，非常影响司机驾驶，也增大了交通事故发生的概率。无论是斥责这种行为，还是坐下来好好谈，都没办法改变她的习惯……久而久之，放弃了，不管怎么说，我有开得不对的地方，就让她说吧。结果现在，连别人的错都要用来批判我，搞什么名堂？\n后坐那个女人，就知道拉偏架，连情况都没看到，就跟着老妈一起批判我，无语。\n接下来看老妈的视角：我老早就看见旁边的车在打转向灯，想变道了，这小子还不知道减速让，看，差点出事了吧，肯定是走神了。\n然后是女朋友视角：突然一个急刹把我吓醒，一看前方，我们的车差点和人家撞上，怎么开的车啊。他妈妈正在批评他，肯定是他的问题。\n由于不是本人，她们二位的视角我只能靠猜测，但大差不差。\n在客观上，这次虚惊事件无论如何都不是我的责任，事后我们也询问了交警，这种情况是对方全责。我每天晚上都会刷一些事故处理、和事故经过的视频，学习别人成功的经验和失败的教训，这是我老妈和女朋友都做不到的。为什么要学这些呢？因为事故是最好的教材，判罚是最好的案例。在事故处理中，只有你知道了事故的判罚规则，你才能够避免出现自己主责或全责的事故（事故是无法完全避免的，有可能别人故意来搞你）。例如，高速路上恶意别停别人，至少都是个拘留，情节严重会判 3 年一下有期徒刑，情节特别严重会判 3 年以上有期徒刑。这告诉我们，遇到恶意别停事件时，应当记录车牌号、时间地点，然后报警处理，千万不能开斗气车。当然，作为一个正常的司机，你也万万不能去恶意别停别人，尤其是高速公路上。再比如，遇到有人加塞，发生擦挂，如果对方变道没有完成，你就不可能是主责。如果你有加速行为，会承担次责，如果你正常行驶，则对方全责。这反向告诉我们，当别人已经变道完成，你就不能再加速撞上去了。并且，当你加塞别人的时候，一定要确保安全之后，缓慢变道。这两种事故也是最常见的事故。\n在这些云经验的积累下，女司机别过头来的一瞬间我就知道这是她全责，但我仍然减速让行了，这不正是最好的行车素质体现吗？于情于理，我没有任何可以被批评的地方。而女司机没有尽到观察后方是否安全的义务，是虚惊事件中唯一的违法行为。\n与老妈和女朋友的冲突之处在于，她们认为，我应当提早停车或减缓速度，让行女司机，因为该女司机已经提前打灯了。首先，当时女司机的车身几乎与道路平行，后车根本无法猜透女司机的想法，无从得知她究竟想要合适变道。其次，女司机的变道方式是突然将车头打到其左侧道，这是一种风险极高的变道方式，一旦我没有刹车，女司机至少重伤。因此，无论从哪个角度，都是女司机自己作出的虚惊事件。\n而老妈的内归因性格，很可能源于其教师工作。她勤勤恳恳工作了数十年，说实话我很佩服，因为我工作了一个月就想回家躺平了。但她也曾反思过，为什么自己这么多年仍然是一位普通教师。其实这就是源自于她的内归因性格。当一项荣誉、一项奖励，没有落到自己头上时，她会认为是自己还不够努力，却没有考虑过，是不是分配方式出现了问题。事业单位、国企都充斥着大量的关系户，他们干着轻松的工作，却能够步步高升。这公平吗？每个人都知道这不公平，但又有几个人敢去争取属于自己的利益？很少。几十年来，总是幻想着，总有一天自己的努力会被看到，但却不知道哪一天，自己都想不起曾经的梦想与追求了。作为她的儿子，我觉得她是一位伟大的母亲，但在事业上，她始终是一位辛勤的劳动者。\n因此，她始终没办法相信法律，也不敢去使用法律武器保护自己，在她看来，只要拿自己能拿到的部分就可以了，与他人相争，没必要。\n这样的思想，没有对错，能做到这一点都不算容易。但我不想这样子，因为我不甘心一辈子做一个打工人，做一个廉价劳动力，但我却没有目标，没有能力，不知道怎样破局，对现在的我来说，很遗憾。\n回到主题，在这个小家中，我需要的是一种认可，朋友、同事、领导都可以不相信我，都可以排挤我打压我，我都可以不在乎。但我很在乎家人的看法与认可，如果我确实做错了，我都会虚心接受，但在我没错的情况下，我不喜欢听到反思和批评。\n","date":"2024-10-08T20:31:00Z","permalink":"https://songguokunsgg.github.io/p/%E6%88%91%E4%B8%8D%E6%9C%9F%E5%BE%85%E4%BD%86%E5%94%AF%E7%8B%AC%E6%9C%9F%E5%BE%85%E5%AE%B6%E4%BA%BA%E7%9A%84%E8%AE%A4%E5%8F%AF/","title":"我不期待、但唯独期待家人的认可"},{"content":"哆啦 A 梦伴我同行首映于 2014 年，那时候我才初三。回想起来，那是我此前人生最幸福的时候。那时候，除了在我六岁时就去世的外婆，重要的亲人都还在身边，并且，他们都还很年轻。\n在大学毕业（2017）那年的五月，我做过一个很美的梦，还为此写了一段记录：\n今天做了的梦\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 我被卷入了一场游戏，里面的场景都是我曾经所经历过的。 第一个场景是小时候的我家，家里的陈设和印象中一模一样，是那么令人怀念。 第二个场景是小姨的家里面。 就好像回到了小时候，小姨小姨爹，老妈和外公都在家里。游戏一开始需要确定时间，所以我问外公，表弟读几年级了。外公说马上就一年级了。怪不得所有人都是年轻时候的样子，年轻的妈妈，年轻的外公。我抛下了一切，和他们一起吃饭，一起玩，一起看电视，我好想就这样一直下去。我对外公说，你以后八十多岁了还是会很硬朗，外公很高兴。在我快结束游戏的的时候，跟每个人都说了好多话。最后我抱着老妈说，妈妈，我走了。 梦里面就这么哭了，醒了发现是真的，哭得都止不住。 这幅一一告别的场景，才是我哭得原因吧。 外公老了，家人都老了，我和表弟长大了，这个梦，是对过去的自己的告别，是对养育自己的家人的告别，年轻的妈妈已经老去，本该由我担起的责任，却还没有这个能力，所以我才向她告别，感谢多年养育之恩吧。 他们都笑着让我下次再来玩，我答应了，可是现实没有时光机，也许只有在生命的最后一刻，在意识不能掌控自我的那一刻，我才能再次见到他们，所以在答辩的这个日子，我才会做这样一个梦，也就是 妈妈，小时候的我走了 长大的我会继续在你身边…… 这是在刚睡醒时记录的，文笔不佳，零零散散，我当时很急，因为我知道，不赶快记录的话，这段梦的记忆将会很快消失。\n电影里，大雄可以依靠时光机弥补许多过去的遗憾，首先，他通过时光机看望了自己去世的奶奶。\n我与他很相似。外婆在我身边去世的时候，还不懂什么叫生离死别。当时的我，很想问，却又不敢问妈妈：“我是不是再也见不到外婆了？”，也许是潜意识里我知道，妈妈才是那个最伤心的人。直到外婆的葬礼结束，我才跪在外婆的坟前流下一点点眼泪。的确，一个 6 岁的孩子，还不能共情这份爱。\n我没有时光机，不能回到小时候去看望健在的外婆，但我相信，外婆会和电影中一样，能够在一瞬间认出长大后的我，毕竟，她是那个最爱我的人，爱到在生命的最后一晚，都不忍心打扰到身边熟睡着的外孙。用一世长眠，换着我一夜好梦。\n我没有时光机，不能将外婆带到现在，让她看一眼我的新娘，向我和我的新娘点一个头。不过，在这个重要的日子，我想她一定会请一个假，回来看我一眼。\n十年前，懦弱的大雄获得了成长，四年前，逃婚的大雄战胜了心魔。在那时，我并不能完全地理解这两段剧情所代表的含义。今天重温，结合这些年发生在我身上的事情，便又有了新的感悟。\n十年前的故事，是战胜自我。在骨子里，我和大雄一样，懦弱，胆小。据证人（老妈）所述，我六年级的时候还会跑到她的办公室坐在她腿上写作业。不出意外的话，我会成为一个，遇到挫折便退缩，遭遇困难就放弃的人。“松”，坚韧不拔，也许我会对不起我的名字。在初中，由于一些原因极其讨厌所在的学校，所以我拼命想考到外面更好的高中，但因几分之差功亏一篑，不得不用金钱弥补。高中，我在高一努力考进尖子班，却成为班里的垫底，最后考了一个普通一本，还选到了土木专业。大学，不想认命，我努力跨考到了一所 211 的计算机专业。直到这里，我才算是到达了许多高中优秀同学的起点。所幸，最后的工作还算满意。\n大雄有三个好朋友，他们一直陪在大雄身边。我的童年也有三个好朋友，我与他们一起玩游戏，玩三国杀，我以为这样的童年会天长地久。然而，我的搬家、我的不辞而别结束了这一切。记得那一年我初一，学校开始上晚自习，只有周末才有时间与朋友玩了。再加上，自己成为了一名中学生，心态上是有些变化的。于是，我与他们渐行渐远，从无话不谈到了相见无言，甚至几年后连联系方式都失去了。前不久，我联系上了其中一位，他发来语音，声音已经远不是我记忆中的样子了，变得成熟了。我问他，要不，等我毕业了见一见？只是还要等一年我才回来。他说，没关系，10 年都等过去了，再等一年有什么关系呢？那一天，手机差点被我的泪水泡坏。\n故事的最后，成年大雄说：“我该走了，去我的静香那。”\n是的，过去很美好，但终将流失。想要幸福，就要用自己有限的生命，去创造新的美好。于我而言，只希望那些过去的人们，不要忘记我，常来梦里看看我，我会很开心的。\n","date":"2024-09-26T20:45:08Z","permalink":"https://songguokunsgg.github.io/p/%E5%8D%81%E5%B9%B4%E5%89%8D%E8%A7%89%E5%BE%97%E7%9F%AB%E6%83%85%E5%86%8D%E7%9C%8B%E6%88%91%E5%8D%B4%E6%B3%AA%E6%B5%81%E6%BB%A1%E9%9D%A2%E5%93%86%E5%95%A6-a-%E6%A2%A6%E4%BC%B4%E6%88%91%E5%90%8C%E8%A1%8C/","title":"十年前觉得矫情，再看我却泪流满面——哆啦 A 梦：伴我同行"},{"content":"上周发生了两件挺重要的事，首先，我与在公司认识的几位同事一起喝了个小酒，第二，我在老乡群里面与曾经的同学们进行了交流。\n刚入职场，自己并不适应朝九晚六的生活，但扪心自问，像我这样一个应届生，又有几个能找到像我这样清闲又有不错待遇的工作呢？抛开自身情绪，把自己当作一个旁观者，我会觉得我现在的人生无可挑剔。\n但我毕竟不是旁观者，我是当事人。在我高二的时候，一位女同学曾说（也许她自己也不记得了），她以后一定会经常换工作，因为她不是一个能在一个地方呆很久的人。我不知道她现在在做什么工作，生活怎么样，但我觉得我就是她曾经描述的那种人。初三的时候，我拼命想考到一个更好的中学，我成功了，也失败了。高三的时候，我不想留在重庆读大学，我成功了，也失败了。大四的时候，我再一次拼命，不想困在土木的牢笼之中，哪怕我曾经对它充满希望和向往，我成功了，也失败了。工作，我又回到了故乡，还带着一位湘妹子，我成功了，也失败了……\n我是一个中国公民，今年我 25 岁，应该为社会做贡献了，这个觉悟，我一直都有。但当我真的有了这个能力，我却觉得不安。首先，我不知道自己能不能做好这份工作，第二，我担心我的身体，在这种定期上下班的工作模式下，也许我不敢生病，不敢请假，不得不看领导脸色，不得不去做那些曾经看不起的事情。这是一个人的成长过程，也是必经之路，但走这条路的过程，是很痛的。\n爸妈都是教师，都已有 30 多年的工龄。他们比我更不容易——从农村走出来，一步步的艰辛，现在的我无法想象。在这个小破屋里面，我似乎感受到了一些当初的艰辛——从农村走出来，大学毕业，进入到一个陌生的环境，身边没有父母，只有同事，没办法见到心爱之人——我现在至少每天可以与爱人电话通信，条件已经比当初好得多了。入职前，老妈给我买了一辆车，车不是什么豪车，但它为我缩小了这座城市的距离，让我在每天通勤 100 公里的条件下，仍然可以每天回家。\n喝小酒的时候，我问同事们，我现在无法习惯这样的生活，是不是我很差劲。他们说，都这样。在老乡群交流的时候，他们说，如果他们可以月薪 10k，他们可以天天加班到 10 点。\n有那么一瞬间，我不知道是我的脑袋出了 bug 还是这个世界出了 bug。我觉得每个人都有必要思考，你真正需要的是什么？你工作究竟是为了什么？\n","date":"2024-09-18T21:45:08Z","permalink":"https://songguokunsgg.github.io/p/%E5%85%A5%E8%81%8C%E6%97%A5%E8%AE%B0%E4%BA%8C-%E4%BB%8E-student-%E5%88%B0-worker/","title":"入职日记（二）—— 从 Student 到 Worker"},{"content":"我曾经无数次幻想过这一天，但当它真正到来时，我才发现，即便已经 25 岁，但我仍是个孩子，还没有做好面对生活的准备，还没有拥有直面生活的勇气。\n去年 10 月，我在字节跳动进行了为期四个月的实习生活，那是我真正意义上的第一份工作。这份工作难度适中，可学习性较强，狠狠地戳中了我的舒适区。但面对毕业要求，我不得不结束了这一段实习，也等于放弃了拥有这份正式工作的机会。\n千盼万盼，我终于结束了长达 19 年的学生生涯，纷飞的试卷、动人的旋律、深夜的等待、无从相见的背影，都在这一天，永远地与我说了再见。人生的新篇章，从这一天开始。\n我本是这么想的。老爸给我找了一间房子，暂住一个月，条件很差，老式的风扇，桌柜，十多年没见过的大脑壳显示器，下方放置着一个积满灰尘的主机。一瞬间，我仿佛又回到了十年前……\n13 岁的我，想快快长大，却不知，童年才是上天赐予我的美好时光，那时，我拥有年轻的妈妈，拥有真心的朋友，拥有各种各样的爱。每个人都会认为，这些东西它可以永远拥有。然而，它们却总是在不经意间，在你未曾感觉到的瞬间，离你而去。就像现在，我呆在这一间简陋的房屋，感到很不适应。但把时间会转到我出生之前，爸爸妈妈最大的愿望就是拥有一个像这样的简陋小屋，对于他们来说，这是一个安定的家。时光兜兜转转，日子越过越好，当这间曾被作为终点房屋成为我的起点，我却感到失望、恐惧、不知所措。在那些年的日日夜夜，父母也许也曾躺在这样简陋的床上，思考着如何让生活变得更好一点。\n18 岁的我，背井离乡，远走潇湘求学，一待就是七年之久。七年足以改变很多事情。在找到自己真爱的同时，也失去了爷爷奶奶，失去了老张，失去了很多的亲人。\n25 岁，我如愿以偿地回到了重庆。在长沙，我曾与小左畅聊未来，但今天回头看，什么都没有兑现，但终会兑现的。我坐在这间小旧屋中写下这篇文章，不知在技术博客中写这些日记是否合适，没关系，至少我能在互联网上证明我来过，这就够了。\n愿所有人幸福。\n","date":"2024-08-27T22:38:08Z","permalink":"https://songguokunsgg.github.io/p/%E5%85%A5%E8%81%8C%E6%97%A5%E8%AE%B0%E4%B8%80%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B%E6%97%A7%E7%9A%84%E5%9B%9E%E5%BF%86/","title":"入职日记（一）——新的开始，旧的回忆"},{"content":"占用原因 主要有两点原因：\nJellyfin 的转码、缩略图生成等功能需要占用大量的资源，而且这种资源占用是实时的，任何时候都可能进行，表现为 Jellyfin 一直有大量的 CPU 占用和磁盘读取。 目录异常。例如，错误地将监控视频目录添加到了 Jellyfin 的媒体库中，这类视频数量大，体积小，而 Jellyfin 会处理每个视频，导致异常的资源占用。 下面尝试解决这几个问题。\n启用硬件加速（N100 为例） 使用 tinyMediaManager 代替 jellyfin 的刮削 ![](去除 jellyfin 刮削功能.png)\n在 tMM 中把刮削格式设置为 jellyfin，第一次打开软件的时候有提示。\ntMM 的使用就不在这里讲了，功能比 Jellyfin 自带的强大太多。\n去除无用的媒体库 我只保留了电影和电视剧两个文件夹。\n去除无用的定时任务 像提取章节库、时间轴缩略图这些功能可有可无，而且很占资源，建议关闭。\n总结 说白了，就是让 Jellyfin 做一个媒体服务器该做的事，负责播放和展示就行了。刮削之类的功能应该交给更专业的程序完成。\n","date":"2024-08-25T16:38:56Z","permalink":"https://songguokunsgg.github.io/p/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BE%A4%E6%99%96-nas-%E4%B8%AD%E5%BC%82%E5%B8%B8%E7%9A%84-jellygin-cpu-%E5%8D%A0%E7%94%A8/","title":"如何解决群晖 NAS 中异常的 Jellygin CPU 占用"},{"content":"在之前配置旁路由内网穿透的时候，我们在 openwrt 中禁用了 IPv6，这主要是想在实现功能的同时尽可能简化配置过程。然而，工信部在 2023 年发布了 工业和信息化部等八部门关于推进 IPv6 技术演进和应用创新发展的实施意见。要在 2025 年前实现 IPv6 的全面普及，因此，直接关掉 IPv6 并不是一个好的使用方式。\n在这里，我将补充讲解如何启用旁路由中的 IPv6。\n不启用 IPv6 会怎么样？ 答案是不会怎么样。目前 IPv4 还是事实标准，并且许多拥有足量 IPv4 的人并不愿意让 IPv6 普及（动了谁的蛋糕？）。因此哪怕不开启 IPv6，对你的上网体验也不会有太大的影响。但是在配置群辉的过程中，我们为了公网访问群辉已经配置好了路由器和主机的 IPv6，如果不把整个家庭的 IPv6 都配置好，那不等于是白折腾了吗？\n路由器中已经启用了 IPv6 呀，为什么还要在旁路由再启用一次？ 原因是所有网关指向旁路由的设备流量都会经过旁路由代理，旁路由不开 ipv6 的话，等于过滤掉所有 IPv6 相关的流量，因此虽然电脑能够获取 IPv6 地址，但只要网关指向旁路由，就等于没有使用 IPv6。\n这时候电脑去ipv6 测试网的话，也是无法通过测试的，这是因为实际上测试的是旁路由的网络，而不是电脑的，旁路由不支持 IPv6 的话，就无法通过测试。\n在配置好旁路由之后，就可以通过测试了：\n旁路由的配置 首先进入 OpenWRT 的界面，我们主要操作网络部分：\n看到这个 LAN 接口，我们需要在这个 LAN 接口中彻底禁用 IPv6。\n在下图的设置中禁用 IPv6：\n然后新增一个用于 IPv6 的接口：\n![](新增一个 lan6 接口.png)\n并按照下图设置：\n然后到 DHCP/DNS 页面，选择过滤器设置，确保下图两个选项没有勾选。\n记得保存所有的设置，最好重启一下旁路由。\n测试网络 在网络诊断中使用 IPv6 ping 测试网络连通性。\n![](v6 网络测试.png)\n如果 ping 正常的话就可以了，把主机的网络重新连接一下，进入 ipv6 测试网 进行测试，能通过就说明 IPv6 已经开启了。\nopenclash 配置 现在的科学软件大多都支持了 IPv6，只通过简单的设置就可以完成。\n![](openclashv6 设置.png)\n功能测试 进行 IPv6 等功能测试，如果有其他的问题，需要再进行排查。\n","date":"2024-07-15T13:49:17Z","permalink":"https://songguokunsgg.github.io/p/%E9%BB%91%E7%BE%A4%E6%99%96-nas-%E5%9C%A8-openwrt-%E6%97%81%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%90%AF%E7%94%A8-ipv6/","title":"黑群晖 NAS —— 在 OpenWRT 旁路由中启用 IPv6"},{"content":"说明 前面挖了一个坑，利用旁路由域名劫持实现内外网无缝访问 NAS。在浏览下面的内容之前，请确保你现在的路由器本身没有域名劫持（挟持）功能。就是下图这个：\nopenwrt 的域名劫持功能\n如果你的路由器已经支持这个功能，那么只需要添加几个劫持域名即可，不需要配置旁路由。\n虚拟 OpenWRT 可以通过虚拟机或者 docker 虚拟，我没有试过 docker 的方式，理论可行，但我能预想到会有很多坑，比如桥接网络等，为了省事就用虚拟机就好。如果你有单独的旁路由硬件，可以使用 PVE 来虚拟，或者直装虚拟机；如果没有多余的设备，那就用群辉的虚拟机套件就好了。\n多说一句，如果仅仅是为了域名劫持功能就搞一个单独的硬件，我认为有些过头了，毕竟功耗再低的主机也有个 10W 吧，天天开着也是一笔不小的费用。\n下载 OpenWRT 系统包 方式有很多，给大家推荐 https://openwrt.ai/?target=x86/64\u0026amp;id=generic 这个网站，可以免费定制，也可以免费下载作者编译好的，我们直接下载编译好的版本即可。\n下载带 EFI 的版本即可，这个版本在虚拟机中不使用 UEFI 也可以启动。当然，你要下第一个也可以，应该没啥影响。\n安装群辉虚拟机套件或 PVE PVE 的安装就不详细说了，网上随便就能搜到。\n群辉创建 OpenWRT 虚拟机 群辉套件安装虚拟机，这里借用一下 https://blog.yanghong.dev/synology-nas-openwrt/ 的文章，写得很详细。\n在选择硬件配置那一步，我们刚开始不需要很高的配置，可以选择单核 512M 内存，如果后续有去广告等需求，再提高配置。\nOpenWRT 配置选择\nPVE 安装 OpenWRT 虚拟机\n右键 pve 节点创建虚拟机。\nID 用默认的即可，一般为 99+N，N 为你创建的虚拟机数量，这里假设为 100。名称随便写。\n选择不使用任何介质。\n系统这一栏全部默认。\n删除这个磁盘，后面几个标签页就改改 CPU 核心数和内存即可，其他全部默认。\n创建好的虚拟机应该类似这样，然后需要为他添加一块磁盘，也就是我打码的地方。\n上传系统文件，然后进入终端。\ncd 到 /var/lib/vz/template/iso 中，这个目录存放了你上传的系统镜像\n1 2 3 root@pve:~# cd /var/lib/vz/template/iso root@pve:/var/lib/vz/template/iso# ls openwrt-07.06.2024-x86-64-generic-squashfs-combined-efi.img 然后把系统镜像转换为磁盘镜像。\n1 qm importdisk 100 openwrt-07.06.2024-x86-64-generic-squashfs-combined-efi.img local-lvm 里面的 100 为虚拟机编号，openwrt-07.06.2024-x86-64-generic-squashfs-combined-efi.img 为系统镜像名称。\n出现类似的输出代表导入完成，然后虚拟机 100 中会多一个未使用的磁盘，编辑它。\n总线/设备那里选择 SCSI0，添加即可。\n这样的话虚拟机硬件就配置完成了，最后在在启动顺序把 scsi 硬盘调整到第一项，打开开机自启动即可。\n然后开机测试，如果开不了机的话检查一下 BIOS 是不是选成 EFI 启动了。\n配置 OpenWRT 实现域名劫持 开机进入控制台，先用 passwd 命令改密码。\n修改 OpenWRT 的 ip、dns、网关 1 vim /etc/config/network vim 操作请自学。先添加或修改这些内容：\nipaddr 的地址确保和你的路由器在同一网段，如果用户没有特别修改的话路由器地址一般为 192.168.X.1，那么 ip 填 192.168.X.{2,3,4,5 等等} 都可以。比如小米为 192.168.31.1，爱快是 192.168.9.1。netmask 是子网掩码，跟我一样就行。gateway 是网关，甜 192.168.X.1。 填好之后保存重启，然后在电脑浏览器中输入 http://192.168.X.2 (你自己设置的地址)，就可以访问 OpenWRT 的主页了。 接口配置 把除了 LAN 之外的接口全部删除，旁路由不需要它们，然后编辑 LAN 接口。\n常规设置里面我们已经通过命令行设置了，不用再动它。\n高级设置里面，将 DNS 服务器地址填写为主路由（图片错误）,192.168.9.1。\nDHCP 由主路由负责，并禁用所有 ipv6 相关的内容（内网中使用 ipv4 更方便）。\n防火墙设置 取消勾选 SYN-flood 防御。\n删除所有与 LAN 口无关的规则，主要是 WAN 口和 docker 相关规则。\n联网检测 ping 一下能联网就行了。\n设置域名劫持 注意，要添加一栏无用的接口，因为该版本的 OpenWRT 无法存储最后一个劫持数据。\n主路由设置 以爱快为例，网关和首选 DNS 更改为 OpenWRT 的 IP 地址即可，可能设备需要重连一下路由器，以重新分配网关和 DNS。\n有些路由器不支持修改网关和 DNS，那么需要在终端设备手动设定，要麻烦一些。\n主机设置 这部分仅供参考，我这里不起作用 家用的 windows 系统一般是优先 ipv6，如果解析不到 ipv6 再使用 ipv4，这导致我们做的域名劫持使得域名成为了双栈，虽然可以解析到内网的 ipv4 地址，但系统还是会默认使用 ipv6 地址。因此还需要在电脑上更改一下 v4 和 v6 的优先级。\n参考这篇博客的方法：Windows 10/11 设置 IPv4 优先访问\n以管理员身份运行终端，然后输入下面的命令查看优先级：\n1 netsh interface ipv6 show prefixpolicies 没有修改系统的输出如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 查询活动状态... 优先顺序 标签 前缀 ---------- ----- -------------------------------- 50 0 ::1/128 40 1 ::/0 35 4 ::ffff:0:0/96 30 2 2002::/16 5 5 2001::/32 3 13 fc00::/7 1 11 fec0::/10 1 12 3ffe::/16 1 3 ::/96 然后修改优先级\n1 netsh interface ipv6 set prefixpolicy ::ffff:0:0/96 100 4 这样设置后，将优先使用 IPv4 而不是 IPv6 进行访问。\nping 一下内网域名，可以看到优先返回了 v4 地址：\n1 2 3 4 5 6 7 8 9 10 $ ping debian12.example 正在 Ping debian12.example [192.168.9.99] 具有 32 字节的数据: 来自 192.168.9.99 的回复: 字节=32 时间\u0026lt;1ms TTL=64 来自 192.168.9.99 的回复: 字节=32 时间=1ms TTL=64 192.168.9.99 的 Ping 统计信息: 数据包: 已发送 = 2，已接收 = 2，丢失 = 0 (0% 丢失)， 往返行程的估计时间(以毫秒为单位): 最短 = 0ms，最长 = 1ms，平均 = 0ms 这个方法重启就会失效，不建议使用。实测下来直接使用 ipv6 的速度也不算慢。如果觉得麻烦的话，不做域名劫持也无所谓。\n最近学习了一下 IPv6 的寻址方式，其实 IPv6 的寻址方式和 DNS 递归解析服务器比较像，都是一层层寻找的。因此你在自家路由器这一层就已经完成了寻址，所以用这个公网 IP 的速率与内网并没有什么区别。\n域名劫持的其他作用 域名劫持可以很方便地管理内网的设备，尤其是主机数量多的时候，例如。\n服务器 192.168.9.99 openwrt 192.168.9.77 群晖 192.168.9.106 ikuai 192.168.9.1 把这些设备的 ip 都记下来还是很有难度的。通过域名劫持搭建小型家用 DNS 服务器的话，可以很方便管理这些设备。如：\nlinux.example -\u0026gt; 192.168.9.99 openwrt.example -\u0026gt; 192.168.9.77 nas.example -\u0026gt; 192.168.9.106 ikuai.example -\u0026gt; 192.168.9.1 这样的域名看着也比冷冰冰的数字更舒服。\n最终效果 假如我在阿里云中将域名 store.domain 解析到了群辉的 ipv6 地址 240e::1，那么当我在外面时，就会通过 ipv6 来访问家中的群辉。而我在家中，与群辉同处于一个内网时，OpenWRT 将我的域名解析请求劫持，并返回 ipv4 地址 192.168.9.100。\n这个功能确实能够实现，但如上篇文章所说，并没有实际效果。\n能不能把域名劫持为 IPv6？从而实现与 v4 类似的功能 这个思路其实是可以的，但效果并不比直接用公网地址好多少，并且容易出现一些切换错误的问题，所以在带宽不受限的情况下，不推荐用这种方式。\n要使用这种方式，你需要修改路由器的 /etc/hosts 文件，添加以下的内容：\n1 fe80::91e3 nas.example.com 将你的内网 v6 (这个地址在 windows 中叫本地链路回环地址，是固定的地址，系统不重装的话一般不会发生变化，可以放心劫持，其他系统在网络设置中找到 fe80 开头的就行) 劫持。\n真正有用的用户 建议无公网 ip 的 v4 内网穿透用户采用这种方式，实测可以在公网与内网之间无缝切换，顶多就是重启一下 app，Synology Photos, Drive Server 等软件，Jellyfin，navidrome 等服务都可以正常使用。\n例如：我首先把群晖的访问端口改为 52491（v4 用户默认端口必改）穿透为 192.168.9.100:52491 -\u0026gt; frp-example.cc:52491。然后在内网劫持frp-example.cc为192.168.9.100，\n由于 v4 之间不存在优先级关系，劫持了就是劫持了，内网下面只能放问到 192.168.9.100，所以就很完美地实现了内外网无缝衔接。并且由于内网穿透往往上行带宽受限，这样做的效果是十分显著的，可以跑满内网带宽。只要注意群晖访问端口与穿透端口一致即可。\n总结 文章修修改改了很多次，自己也是在摸索中前进，想要把 NAS 做到完美，但后来发现，其实就用公网 v6 是最方便省事的。\n文章被搞的比较杂乱，有空再进行整理。\n","date":"2024-07-12T12:39:07Z","permalink":"https://songguokunsgg.github.io/p/%E9%BB%91%E7%BE%A4%E6%99%96-nas-two-in-one-%E4%BB%8E%E5%85%A5%E5%9D%91%E5%88%B0%E5%85%A5%E5%9C%9F%E6%BF%80%E8%BF%9B%E5%90%91%E6%95%99%E7%A8%8B-%E6%97%81%E8%B7%AF%E7%94%B1%E7%AF%87/","title":"黑群晖 NAS Two in One 从入坑到入土——激进向教程 (旁路由篇)"},{"content":"前言 作为一个计算机爱好者（***，毕业了都不敢说自己是学计算机的，只敢说自己是个爱好者），由于以下原因，让我有了入一台 NAS 的想法：\n看网上的在线电视剧和电影总是卡，体验感不佳。 刚需 onedrive，但由于 E5 被大面积封杀的原因，不再是长久之计，但又很馋它的功能。 不想再开音乐会员，反正就听那么几首歌而已。 在决定入手之前，我用手上的 mini 主机虚拟了一台黑群晖使用，发现体验不错，自带的 Drive, Photos, Audio 和 video 都很好用，所以我直接上网买了一台 N100 的 NAS。\n（当时很想买绿联的 4800，但是怕翻车，就买了台小厂的成品 8 盘位 NAS，不到 1100。当时想的是这种组装机方便折腾，结果买回来之后出人意料的很好用……对比起来绿联真的是……）\n我家是电信的宽带，并且一直都是使用路由器拨号，因此 ipv6 很简单就可以配置好，这也为 NAS 提供了一个良好的网络条件。\n为什么说是激进向呢？因为本文将不会考虑任何公网 ipv4 相关的使用，包括 frp 等，只战未来（懒）。\n需求分析 从前言的三点可以看出，核心的需求就四点。\n存储 音乐 视频 相册 这些可以通过 docker 容器或者是群辉的套件进行解决。\n系统安装 https://sspai.com/post/88898\n这个教程很多，就不重复造轮子了。\n公网 ipv6 访问 域名解析 https://home.console.aliyun.com/home/dashboard/ProductAndService\n首先购买一个阿里云的域名，找个便宜的就行，我买的是 icu 后缀的，9 块一年。\n在域名管理中进行解析，假如你买的域名是 http://example.com\n记录类型为 AAAA，意思是把域名指向一个 ipv6 地址。主机记录填写子域名，例如 storage、nas、stg 等，本文以 nas 为例。记录值可以临时写一个::1，表示环回地址，类似于 127.0.0.1，后面会用 DDNS-GO 自动更新公网 ip。TTL 设置为 10 分钟即可。\nDDNS-GO 在套件中心中安装这个 DDNS-GO 套件，打开。登陆到 ddns 服务的后台后，主要填写这几个内容。在阿里云服务中填入 AccessKey 的 ID 和 Secret。这个相当于阿里云 ddns 服务的账号和密码。AccessKey 的 ID 和 Secret 可以在阿里云控制台中申请。现在阿里云不可以查看 Secret 了，所以你只有一次保存的机会，请务必保存好，不然就要重新创建了。\nDDNS-GO 设置如下\n不启用 ipv4，获取 ip 方式为通过网卡获取，domains 为 子域名。域名，例如 http://nas.example.com，主要就修改这个地方，点击保存。如果设置无误。网页左边就会有解析成功的提示了。解析成功之后，我们就可以尝试用域名 http://nas.example.com/ 登陆 nas。这回应该非常方便就可以登录，包括套件也可以用这个域名登录。\nSSL 证书 这一块其实很简单，但被我弄复杂了。建议域名是谁家的，就用谁家的 SSL。\n我用的腾讯云 SSL，需要在阿里云域名解析下面添加一条 CNAME 解析，挺麻烦的，这里就不过多解释了。\n如果域名和 SSL 是一家的话很简单，就不赘述了。\n在这里添加证书即可，用 https 访问就不会再有“不安全“的提示了。\nUPS 如果家里的电不稳定，可以购置一台 UPS，我用的山特 TG-BOX 600，毕竟市面上就这一款排插型的 UPS，比较实用，可以插一些别的东西。\n在控制面板图示位置启用 UPS 即可。\nSynology Drive 解决存储需求 安装这个套件\n一般在第一次进入系统时就会询问你是否安装这个套件，直接安装即可。\n然后在电脑上也要下载对应的软件：\nhttps://www.synology.cn/zh-cn/support/download\n然后使用你的域名 http://nas.example.com/，再加上账号和密码登录即可使用，如果开启按需同步功能的话，就和 onedrive 类似。\n[https://kb.synology.cn/zh-cn/DSM/tutorial/What_is_On-demand_Sync#::text=按需同步 是用于在计算机和 Synology NAS 之间配置 Synology Drive，同步任务的选项。启用此选项后，仅当您打开、修改本地副本或将其固定到计算机时，文件才会下载到本地计算机。下表提供了有关指示已启用 按需同步 的文件的同步状态的图标的详细信息。](https://kb.synology.cn/zh-cn/DSM/tutorial/What_is_On-demand_Sync#::text=按需同步 是用于在计算机和Synology NAS之间配置 Synology Drive,同步任务的选项。 启用此选项后，仅当您打开、修改本地副本或将其固定到计算机时，文件才会下载到本地计算机。 下表提供了有关指示已启用 按需同步 的文件的同步状态的图标的详细信息。)\n按需同步这个功能对于我来说是刚需，如果你只需要一个网盘磁盘功能的话，就不需要安装这个，自带的 smb 访问就挺好了。这个功能目前好像就群辉有，别的平替我暂时没找到。\nSynology Photos 实现相册备份 安装这个套件，这个套件使用比较简单，就不多说了，可以参考以下链接。\nhttps://www.zabit.cn/support/9289/\n但是需要解释一下这些功能。\n人物相册应该是需要显卡才能正常使用，不过我没用过，没有这个需求。 AME 的安装还挺麻烦，需要完美黑才能在套件中心直接安装，这里提供一个安装方法https://imnks.com/385.html。这一步一定要做，不然后续很多功能都会受限。 Jellyfin 媒体服务器 其实我最初使用群辉官方的 Video Station，但怎么说呢？这个程序有以下几个问题：\n刮削器老刮出英文源信息。 电视端播放器根本用不了。 手机端播放器不支持倍速，转码等功能。 综上所述，基本没啥用，所以最近给换成了 Jellyfin。\n在套件中心安装这个套件。打开，会提示你创建管理员账户，自便即可。\n进入之后，需要进行几项设置，主要是要把语言和国家选择正确。\n语言选 chinese，国家好像是 People\u0026rsquo;s Republic of China。\n这种设定，刮削的信息会以中文优先。\n开启 ipv6 访问 Jellyfin 默认不支持 ipv6 访问，需要手动开启。\n勾选启用 ipv4 和启用 ipv6 保存，需要重启一下套件才会生效，可以等我们所有内容设置完之后再重启套件。\n硬件加速设置 有了这个，CPU 在转码的时候就不会 100% 了。\n按图示设置即可。\n测试硬件转码是否有效 在手机的 jellyfin 上播放一段视频，然后选择 360p 播放，看 NAS 的 CPU 使用率是否低于 50%，如果达到了八九十，就说明硬件加速没有生效。\n创建一个用于观影的普通用户 我以前觉得这个操作没必要，直到我在电视上把整个媒体库清空。\n点击这个加号添加用户，把箭头所指的三个地方取消勾选（其实默认就是取消的）。\n然后就可以在电视和手机上愉快的观影了。\n开启强制 https 参考该文即可，主要就是把群辉的证书转换为 PFX 格式。\nhttps://www.bilibili.com/read/cv9244919/\n强制 https 可开可不开，建议开启（不然搞 SSL 证书干嘛）。\nNavidrome 音乐服务器 安装这个套件，打开，同样会提示你设置管理员账户。\n在个性化设置中可以调整为中文，注意，每个用户的配置文件是分开的，需要分别设定。\n创建只读权限用户 理由同上，在图示位置创建即可。\n手机上播放音乐 直接打开网站 http://nas.example.com:8096/ 即可，苹果手机和 mac 都可以把网页创建成一个 app 使用，安卓手机可以创建一个快捷方式。\n也可以下载第三方的音乐 APP，例如 substreamer，但是体验我感觉一般，歌词支持不完善，还容易闪退，我建议直接网页。\n配合 MusicTag 软件搭建个人音乐库 网上下载的音乐多少带点私货，使用 MusicTag 可以实现：\n按规则（如：歌手 - 歌曲）重命名歌曲。 自动爬取歌曲的封面和歌词等信息。 判定重复、无效等音乐文件，供你删除。 功能很强大，建议人手一个。\n小结 到目前为止，我们实现了存储、相册、视频、音乐四个功能。但是头顶上还有两座乌云停留。\n数据的安全性如何保证。 如何实现无缝切换内网公网，也就是说，使用同一个域名，在家里的时候走内网，在外面的时候走公网。 这两点恰恰是最难处理的，尤其是第二点，需要路由器支持 DNS 劫持。如果不支持也没关系，我们也有其他方法应对。\nHyper Backup 备份到天翼云盘 我个人认为，只要是存储在本地硬盘的内容，就没有绝对的安全一说，在备份这件事情上，还真得相信云盘。电信给了我家 4T 的空间，用来备份正合适。\n天翼云盘不能直接挂载，需要通过 Alist 挂载 webdav 实现。\nAlist 挂载天翼云盘 下载这个套件，打开，改掉默认的账户密码。\n点击管理，进入管理页面。\n添加一个客户端，需要设置的地方如下\n用户名就是你的手机号。\n然后点及保存，看到状态为 work 的话就成功了。重新打开 alist，可以看到挂载的网盘，\n点进去，有文件就行\n用户文件备份到天翼云盘 点击 + 创建备份任务\n以上内容根据你的实际情况填写即可。\n目的地这个地方需要注意，服务器地址抄我的即可，用户账号和密码是你在alist 中所设置的账户和密码，而不是天翼云的账户和密码。\n创建好任务之后，可以手动备份一次，后面他自己备份就行。Hyper Backup 的备份是增量的，每次只会备份修改过的内容，这一点非常好。\n在版本列表中可以追溯以前的文件，这个功能也非常实用。\n如果群辉崩了，但我需要继续使用上面的文件怎么办？ 这个情况虽然很少出现，但一出现就会很致命，因此，我们需要一个可靠的 plan B。\n安装这个同步插件。\n选择你拥有的网盘，登录账号设置即可，比较简单，就不赘述了。\n在任务列表中可以查看连接情况，途中的意思是同步群辉的 /homes/sukipai 文件夹和 onedrive 中的 /群辉同步文件/sukipai 文件夹。这样设定主要是考虑到 onedrive 中可能自动在根目录生成一些文件，这些没用的文件会反向同步到 NAS，因此同步文件夹最好不要放在根目录。当然，这个你可以自行设定。\n这是我女朋友单纯备份照片的实例，她只使用群辉的相册功能，因此同步相册就够了。\n路由器 DNS 劫持实现内外网访问 这一块比较复杂，这里仅简单讲解一下思路，后面我可能会单独拿一篇文章来写这个功能。\n在阿里云的 DNS 解析中，我们将域名 http://nas.example.com/ 解析为了 [ipv6] 地址，因此，理论上无论在何方，我都可以通过域名 http://nas.example.com/ 来访问 NAS。在家中，除了使用域名，我们还可以直接使用内网的 ipv4 地址来访问 NAS，从而实现更快的访问速度，拒绝中间商。\n而对比内外网，多了一个什么设备？路由器。如何在路由器中劫持域名 http://nas.example.com，让他不通过 DNS 服务器来进行域名解析，而是直接被解析为群辉主机的 ipv4 地址，不就可以实现这个功能了吗？\n这样的话，我们在外面，通过 DNS 服务器解析域名为 [ipv6]，在家中，通过路由器解析为 ipv4，岂不美哉。\n不过这事说起来容易做起来难，路由器不支持的话，就需要虚拟一个旁路网关（旁路由）来实现 DNS 劫持——这样做不需要购买额外的设备，效果如下。\n在内网直接将 http://nas.example.com/ 劫持为 192.168.9.100（群辉 ipv4 地址）。\n但这在实际操作会存在一些问题，内网解析 IPv4，公网解析 IPv6，实际上是把这个域名在内网变成了双栈（也就是既可以解析到 v6 地址，也可以解析到 v4 地址）。而在操作系统中，几乎都会优先使用 IPv6 解析地址，这是因为 v6 是下一代标准，未来肯定会全面向 v6 过渡。\n这就导致我们的确在 v4 层面劫持了这一域名，但实际上并没有起到效果。\n再者，我实测在同一局域网下，公网 v6 的传输速度与内网 v4 差不多，只是网页加载速度 v4 会快一些。所以，我觉得只使用公网 v6 也够了，不用多加配置，也不用添加旁路由，用 v4 的时候可以用 ip 地址访问。\n那么域名挟持真的一点用也没有吗？ 其实也不是的，域名挟持对于做内网穿透的用户有大用，能够真正实现内外网无缝切换。\n例如：我首先把群晖的访问端口改为 52491（v4 用户默认端口必改）穿透为 192.168.9.100:52491 -\u0026gt; frp-example.cc:52491。然后在内网劫持frp-example.cc为192.168.9.100，\n由于 v4 之间不存在优先级关系，劫持了就是劫持了，内网下面只能放问到 192.168.9.100，所以就很完美地实现了内外网无缝衔接。\n只要注意群晖访问端口与穿透端口一致即可。\n本来说不讲 v4 的，结果还是说了这么一大堆。。。。。。\n下一篇文章还是会稍微讲讲旁路由和域名劫持相关的内容。\n","date":"2024-07-07T18:38:07Z","permalink":"https://songguokunsgg.github.io/p/%E9%BB%91%E7%BE%A4%E6%99%96-nas-two-in-one-%E4%BB%8E%E5%85%A5%E5%9D%91%E5%88%B0%E5%85%A5%E5%9C%9F%E6%BF%80%E8%BF%9B%E5%90%91%E6%95%99%E7%A8%8B/","title":"黑群晖 NAS Two in One 从入坑到入土——激进向教程"},{"content":"简介 在校期间试了很多类型的网盘，包括 Onedrive, seafile（学校搭建），百度网盘等，都不是很满意。\nOnedrive：网速慢\nseafile：综合体验最好，学校自建。但是学校运维不太行，隔三差五崩掉，急用的时候简直崩溃。\n百度网盘：你还是老实做个资源站吧\n最终我决定搞一个黑群晖，正好快毕业了，把手里的机械君利用起来，做一个小型 All in One。\n为什么用 windows 做 host？ 其实我一开始是用的 NixOS，搭配 KVM 做虚拟黑群晖，其实这样做没啥问题，非常稳定，但是我偶尔要用一下电脑的话，就还得再开一个 windows 虚拟机，以使用 office、raylink 等软件。\n考虑到有虚拟 NAS 之后，本地存储需求将会急剧减少，所以我觉得把闲置的 128G 硬盘拿来装 win10 LTSC（稳定），然后装几个常用软件和 vmware，存储需求就用 vmware 虚拟黑群晖，NAT 方案，我表达能力不太行，用图说话。\n等毕业之后，如果有路由器的话，也可以从 NAT 很方便地改为桥接，从而满足不同的需求。\n注：由于需要做内网穿透，所以最好令内网访问与公网访问端口一致，方便做 DNS 劫持，从而实现内外网只能切换，所以可能需要做端口转发或者**直接修改端口（推荐），**让 5001 端口映射或修改为内网穿透的端口。这种情况下，将群晖链接到一台可以做 DNS 劫持的设备最合适。\n第一张图中，电脑本身可以做 DNS 劫持（选择 NAT 的原因）。\n第二张图中，路由器可以做 DNS 劫持，或者直接修改群晖端口好（桥接的原因）。\n不过还是得根据实际需求来。\n例如，穿透后的公网为 http://example.com:58819\n进行端口转发或修改端口 5001 -\u0026gt; 58819\n这时候，你可以用 192.168.XX.XX:58819 进行内网访问，也可以用 http://example.com:58819/ 进行公网访问。\n此时，将内网的 http://example.com/ 进行劫持，http://example.com/ -\u0026gt; 192.168.XX.XX。\n就可以实现，连路由器的时候用内网，否则联公网（想出这个方案的真是人才）。\n这个是后话，可能后面会对这篇文章进行补充。\n安装 DS918+ 黑群晖 参考 https://www.bilibili.com/read/cv30010953/ （USB 改内置）\nhttps://github.com/RROrg/rr/releases （黑群晖引导文件）下载 rr-.img.zip 文件解压\n硬盘格式转换 https://www.starwindsoftware.com/download-starwind-products\n使用这个软件将 img 的 raw 硬盘转换为 vmdk\n虚拟机创建 使用 vmware 创建一台 linux64 虚拟机，使用转换好的硬盘，除此之外，还需要添加一块 sata 系统盘，留下这些硬件即可（CD/DVD 也可以不要），配置不用太高，内存最好 4G+。\n启动模式可以调成 UEFI。\n注：群晖跟一般的电脑系统不一样，每插一块硬盘，该硬盘上面都会安装一个系统，从而实现硬盘拔插或坏掉不影响系统使用。这里添加的硬盘只是装系统用的，后面会使用 sata 或 usb 的实体硬盘进行数据存储。如果系统稳定的话，这块 sata 盘可以删掉。\n安装黑群晖系统 https://post.smzdm.com/p/am3epen4/\n根据这篇文章安装即可，主要为四个步骤\n更换语言 选择型号（如果只使用 SATA，可以选择 DS923+；如果需要外接 USB 硬盘，选 DS918+） 版本选择：最新版 编译引导并启动 然后浏览器 ip:5000 进入系统安装页面，点击安装，不要启动数据收集和更新等等服务。\n注：这一步直接选择自动下载即可，一般都能安装成功，如果不行再手动下载安装。\n![]((20240520) 基于_windows_hostUSB_外接虚拟黑群晖方案分享_EberyThingSay/v2-857af01419147db1d74e957aa1e63dc1_b.jpg)\n装好之后进入系统，进行一些初始化啥的，不赘述。\n将 USB 设定为内置硬盘 https://www.bilibili.com/read/cv30010953/\n直接跳到，使用 RR 的设置方法。\n跟着教程走就行，主要说一下计算。\n打开计算器\n功能比较简陋，需要在“查看”调成程序员模式，并调成程序员模式\n然后用“or”按钮计算 usbportcfg | internalportcfg\n然后设定 usbportcfg=0，internalportcfg=计算出的值即可，以我为例\n1 2 3 4 root@HeiSynology:/etc.defaults$ cat synoinfo.conf | grep usbport usbportcfg=\u0026#34;0x3f00000\u0026#34; root@HeiSynology:/etc.defaults$ cat synoinfo.conf | grep internalport internalportcfg=\u0026#34;0xfffff\u0026#34; 计算 0x3f00000 | 0xffff = 3FFFFFF\n所以设定\n1 2 usbportcfg=0 internalportcfg=0x3FFFFFF 然后重新编译引导，启动，就可以看到 usb 硬盘被识别为内置。\n硬盘 2 是虚拟硬盘，硬盘 17 是我的测使用 U 盘。\n固定 ip vmware 创建的虚拟机 ipv4 地址似乎不会变，不用动。\n公网访问 https://doc.natfrp.com/app/synology.html\n在群晖系统中把访问端口修改为你申请到的内网穿透端口，例如 58819。\n确认你此时能够在内网通过 内网 ip:58819 访问管理页面\n然后做好内网穿透。\n实测，穿透 5001 =\u0026gt; 58819 端口基本上够用了，内网里面手机电脑连接 photos，drive 都可以直接用 5001 =\u0026gt; 58819 端口进行登陆。\n但是外网有坑\nhttps://zhuanlan.zhihu.com/p/679868467\n如果电脑端需要外网连接 Drive，需要再映射一下 6690 端口，手机端和内网不用，直接 58819 访问即可。\n功能修复 https://post.smzdm.com/p/a7pw05r9/\n主要是视频解码方面的内容，按以上文章一键修复。\n洗白：修复除 QC 外功能 找到这个自定义 SN/MAC 的选项，输入购买的 SN /MAC 即可。\nDrive 空文件夹问题 表现：某文件夹在网页端有内容，但使用 Drive 进行按需同步的时候，文件夹显示为空。\nhttps://zhuanlan.zhihu.com/p/681513928\n将 homes/user 的属性勾选“应用到这个文件夹、子文件夹及文件夹”即可。\n注意事项 如果虚拟机关机了，启动虚拟机时要把硬盘及时连通进去。 如果 host 不常使用的话，还是建议用 PVE 或者 linux 做 host，windows 还是有些不稳定。 如果 host windows 要搞操作，先关掉虚拟机再操作，比如垃圾清理内存释放之类的。 如果你不幸在操作之后，群晖系统出现硬盘损坏的提示，不用慌，重启一下虚拟机，自动修复硬盘即可。 ","date":"2024-05-20T16:38:44Z","permalink":"https://songguokunsgg.github.io/p/%E5%9F%BA%E4%BA%8E-windows-hostusb-%E5%A4%96%E6%8E%A5%E8%99%9A%E6%8B%9F%E9%BB%91%E7%BE%A4%E6%99%96%E6%96%B9%E6%A1%88%E5%88%86%E4%BA%AB/","title":"基于 windows host，USB 外接虚拟黑群晖方案分享"},{"content":"安装过程 DNS: 223.5.5.5，需要联网\n换源（转载自 Tismagic：PVE8.1 下软件源更新与其它配置） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 # 1. 更新debian 软件源 #(任选一个源) #1.1.1 清华源 # 参考: https://mirrors.tuna.tsinghua.edu.cn/help/debian/ sed -i.bak \u0026#34;s#ftp.debian.org/debian#mirrors.tuna.tsinghua.edu.cn/debian#g\u0026#34; /etc/apt/sources.list sed -i \u0026#34;s#security.debian.org#mirrors.tuna.tsinghua.edu.cn/debian-security#g\u0026#34; /etc/apt/sources.list #apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing #1.1.2 中科大源 # 参考: https://mirrors.ustc.edu.cn/help/proxmox.html sed -i.bak \u0026#39;s|^deb http://ftp.debian.org|deb https://mirrors.ustc.edu.cn|g\u0026#39; /etc/apt/sources.list sed -i \u0026#39;s|^deb http://security.debian.org|deb https://mirrors.ustc.edu.cn/debian-security|g\u0026#39; /etc/apt/sources.list #apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing #1.1.3 aliyun源 sed -i.bak \u0026#34;s#ftp.debian.org/debian#mirrors.aliyun.com/debian#g\u0026#34; /etc/apt/sources.list #修改文件的同时, 会创建一个.bak后缀的备份文件 sed -i \u0026#34;s#security.debian.org#mirrors.aliyun.com/debian-security#g\u0026#34; /etc/apt/sources.list #阿里Debian源 #apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing #1.1.4 163源 sed -i.bak \u0026#34;s#ftp.debian.org/debian#mirrors.163.com/debian#g\u0026#34; /etc/apt/sources.list #163Debian源 sed -i \u0026#34;s#security.debian.org#mirrors.163.com/debian-security#g\u0026#34; /etc/apt/sources.list #163Debian源 #apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing # 2. PVE 软件源 # 删除默认企业源 rm -rf /etc/apt/sources.list.d/pve-enterprise.list #(任选一个源) # 2.1.1 清华源 echo \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bookworm pve-no-subscription\u0026#34; \u0026gt; /etc/apt/sources.list.d/pve-no-subscription.list # 2.1.2 中科大源 echo \u0026#34;deb https://mirrors.ustc.edu.cn/proxmox/debian/pve bookworm pve-no-subscription\u0026#34; \u0026gt; /etc/apt/sources.list.d/pve-no-subscription.list #3 CEPH分布式源 #3.1.1 中科大源 echo \u0026#34;deb https://mirrors.ustc.edu.cn/proxmox/debian/ceph-quincy bookworm no-subscription\u0026#34; \u0026gt; /etc/apt/sources.list.d/ceph.list #中科大源 sed -i.bak \u0026#34;s#http://download.proxmox.com/debian#https://mirrors.ustc.edu.cn/proxmox/debian#g\u0026#34; /usr/share/perl5/PVE/CLI/pveceph.pm #中科大源 # -------------------------------------------------------- # 更新索引, 升级安装软件包, 重启系统 # -------------------------------------------------------- # 如果无法拉取https软件源时安装 apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing apt update \u0026amp;\u0026amp; apt dist-upgrade #4.LXC容器仓库源(CT) # 4.1.1 中科大源 sed -i.bak \u0026#34;s#http://download.proxmox.com/images#https://mirrors.ustc.edu.cn/proxmox/images#g\u0026#34; /usr/share/perl5/PVE/APLInfo.pm systemctl restart pvedaemon # 稍等下手动刷新webui 页面 # 删除订阅弹窗 sed -Ezi.bak \u0026#34;s/(Ext.Msg.show\\(\\{\\s+title: gettext\\(\u0026#39;No valid sub)/void\\(\\{ \\/\\/\\1/g\u0026#34; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js \u0026amp;\u0026amp; systemctl restart pveproxy.service # 执行完成后，需注销PVE登录后, 重新启动浏览器 启用内网穿透 https://www.natfrp.com/tunnel/ 申请一个免费节点（本地端口为 8006）\n1 wget https://nya.globalslb.net/natfrp/client/launcher-unix/3.1.0/natfrp-service_linux_amd64.tar.zst 假设保存在 /root/Documents/ 下面，cd 到该目录，解压缩，给权限\n1 2 3 cd /opt/sakurafrp tar -I zstd xvf natfrp-service_linux_amd64.tar.zst chmod +x ./* 先运行一次 ./frpc 生成配置文件，配件文件保存在 ./frpc.ini 中\nPVE 系统添加 frpc 自启动 1 vim /etc/systemd/system/sakurafrp.service 然后编写一个启动脚本，如果你的文件目录跟我放的一样，可以复制粘贴\n1 2 3 4 5 6 7 8 9 10 [Unit] Description=sakuraFrp for systemd After=network.target [Service] ExecStart=/opt/sakurafrp/frpc -c /opt/sakurafrp/frpc.ini Type=simple [Install] WantedBy=default.target 重启，登陆 root, 查看进程状态是否正常\n1 systemctl status sakurafrp 如果一切正常，直接通过 sakura 的 [IP]:[Port] 访问即可。\n","date":"2024-05-13T13:32:48Z","permalink":"https://songguokunsgg.github.io/p/pve-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","title":"PVE 内网穿透"},{"content":"更新原因：用了很久的 homebrew，感觉不是很完美，就尝试切换到了 nix，挺香的。\n不过本文仅适合入门，nix 也仅配置了 flake 和 configuration，不包括 home-manager（macos 上问题太多）。\n游戏本 xxxx\nmacbook ++++\n自己拿一台游戏本，整天折腾 linux，消磨了我很多时光。遂重新审视自己的需求，发现其实游戏玩的不多，故卖之，换 macbook。\n但是终端不像 Arch 那么好配置了，所以还是记录一下吧。\n安装 Darwin-nix 一行代码解决\n1 sh \u0026lt;(curl -L https://nixos.org/nix/install) 终端输入 nix，有输出则说明成功，使用 nix 必须使用科学上网工具，如果没有请滑走。\nnix 基本方案说明 本人仅使用 nix 配置终端工具，且不包括 python（我使用自带 python+pdm，更方便，nix 先天不善于处理 python）\nnix 简单配置 在 ~/.zprofile 中添加\n1 export NIX_PATH=darwin-config=$HOME/.nixpkgs/darwin-configuration.nix:/nix/var/nix/profiles/per-user/root/channels:$HOME/.nix-defexpr/channels:nixpkgs-overlays=$HOME/.nixpkgs/overlays/:nixpkgs-overlays=$HOME/.nixpkgs/overlays/ 然后 clone 我的模板仓库https://github.com/songguokunsgg/nixos-darwin-config\n将 clone 下来的文件夹移动为 ~/.nixpkgs\n将 flake.nix 中的主机名修改为你自己的主机名\n然后 cd 到~/.nixpkgs, 使用以下命令进行第一次安装\n1 nix run nix-darwin --extra-experimental-features nix-command --extra-experimental-features flakes -- switch --flake . 后续使用这两行命令进行升级\n1 2 nix flake update ~/.nixpkgs darwin-rebuild switch --flake ~/.nixpkgs 如果没有找到 darwin-rebuild，检查环境变量。\n仓库的 README 有一些其他说明，可酌情查看。\nzsh 配置 配置思路 主要用到 4 个插件：\nzsh-autosuggestions zsh-syntax-highlighting zsh-completions（可选） zsh-theme-powerlevel10k（可选） 前三个是功能性插件，最后一个是主题插件，如果对美观要求不高的话，可以不装最后一个\n拉取功能插件 1 2 3 4 5 6 7 8 9 10 11 # 自动补全 git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/plugins/zsh-autosuggestions # 语法高亮 git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/plugins/zsh-syntax-highlighting # 这个插件我也没弄明白是干嘛的，可选。。。。 git clone --depth=1 https://github.com/zsh-users/zsh-completions ~/.zsh/plugins/zsh-completions # p10k 主题 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.zsh/plugins/powerlevel10k 将 zsh 的插件统一放置在 ~/.zsh/plugins/ 下\n安装字体 推荐使用 nerd-fonts-hack 字体作为终端字体\n编写 zsh 配置文件 环境变量存放位置为 ～/.zprofile，配置文件在 ~/.zshrc，主要编写 ～/. zshrc 文件\n将以下代码加入 .zshrc 以使用插件\n1 2 3 4 source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh source ~/.zsh/plugins/zsh-completions/zsh-completions.plugin.zsh source ~/.zsh/plugins/powerlevel10k/powerlevel10k.zsh-theme 然后进行功能配置，直接复制粘贴下面代码即可\ncolor{{{ autoload -U colors \u0026amp;\u0026amp; colors #命令别名 {{{ alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; alias rm=\u0026#39;rm -i\u0026#39; alias ls=\u0026#39;ls -a --color=auto\u0026#39; alias grep=\u0026#39;grep --color=auto\u0026#39; alias vim=\u0026#39;nvim\u0026#39; alias vi=\u0026#39;nvim\u0026#39; # 更新软件 function update() { nix flake update ~/.nixpkgs darwin-rebuild switch --flake ~/.nixpkgs } # 清理垃圾 function clean() { nix-collect-garbage -d } #终端代理 hostip=\u0026#34;127.0.0.1\u0026#34; # hostip=$(cat /etc/resolv.conf |grep -oP \u0026#39;(?\u0026lt;=nameserver\\ ).*\u0026#39;) function proxy_on() { proxy_statu=\u0026#34;on\u0026#34; export https_proxy=\u0026#34;http://${hostip}:7890\u0026#34; export http_proxy=\u0026#34;http://${hostip}:7890\u0026#34; export all_proxy=\u0026#34;socks5://${hostip}:7890\u0026#34; echo -e \u0026#34;终端代理已开启。\u0026#34; } function proxy_off(){ unset http_proxy https_proxy all_proxy echo -e \u0026#34;终端代理已关闭。\u0026#34; proxy_statu=\u0026#34;off\u0026#34; } for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do eval _$color=\u0026#39;%{$terminfo[bold]$fg[${(L)color}]%}\u0026#39; eval $color=\u0026#39;%{$fg[${(L)color}]%}\u0026#39; (( count = $count + 1 )) done FINISH=\u0026#34;%{$terminfo[sgr0]%}\u0026#34; #}}} #命令提示符 RPROMPT=$(echo \u0026#34;$RED%D %T$FINISH\u0026#34;) PROMPT=$(echo \u0026#34;$CYAN%n@$YELLOW%M:$GREEN%/$_YELLOW\u0026gt;$FINISH \u0026#34;) #PROMPT=$(echo \u0026#34;$BLUE%M$GREEN%/ #$CYAN%n@$BLUE%M:$GREEN%/$_YELLOW\u0026gt;\u0026gt;\u0026gt;$FINISH \u0026#34;) #标题栏、任务栏样式{{{ case $TERM in (*xterm*|*rxvt*|(dt|k|E)term) precmd () { print -Pn \u0026#34;\\e]0;%n@%M//%/\\a\u0026#34; } preexec () { print -Pn \u0026#34;\\e]0;%n@%M//%/\\ $1\\a\u0026#34; } ;; esac #}}} #编辑器 export EDITOR=vim #关于历史纪录的配置 {{{ #历史纪录条目数量 export HISTSIZE=10000 #注销后保存的历史纪录条目数量 export SAVEHIST=10000 #历史纪录文件 export HISTFILE=~/.zhistory #以附加的方式写入历史纪录 setopt INC_APPEND_HISTORY #如果连续输入的命令相同，历史纪录中只保留一个 setopt HIST_IGNORE_DUPS #为历史纪录中的命令添加时间戳 setopt EXTENDED_HISTORY #启用 cd 命令的历史纪录，cd -[TAB]进入历史路径 setopt AUTO_PUSHD #相同的历史路径只保留一个 setopt PUSHD_IGNORE_DUPS #每个目录使用独立的历史纪录{{{ cd() { builtin cd \u0026#34;$@\u0026#34; # do actual cd fc -W # write current history file local HISTDIR=\u0026#34;$HOME/.zsh_history$PWD\u0026#34; # use nested folders for history if [ ! -d \u0026#34;$HISTDIR\u0026#34; ] ; then # create folder if needed mkdir -p \u0026#34;$HISTDIR\u0026#34; fi export HISTFILE=\u0026#34;$HISTDIR/zhistory\u0026#34; # set new history file touch $HISTFILE local ohistsize=$HISTSIZE HISTSIZE=0 # Discard previous dir\u0026#39;s history HISTSIZE=$ohistsize # Prepare for new dir\u0026#39;s history fc -R #read from current histfile } mkdir -p $HOME/.zsh_history$PWD export HISTFILE=\u0026#34;$HOME/.zsh_history$PWD/zhistory\u0026#34; function allhistory { cat $(find $HOME/.zsh_history -name zhistory) } function convhistory { sort $1 | uniq | sed \u0026#39;s/^:[0−9]∗:[0-9]*;.∗/\\1::::::\\2/\u0026#39; | awk -F\u0026#34;::::::\u0026#34; \u0026#39;{ $1=strftime(\u0026#34;%Y-%m-%d %T\u0026#34;,$1) \u0026#34;|\u0026#34;; print }\u0026#39; } #使用 histall 命令查看全部历史纪录 function histall { convhistory =(allhistory) | sed \u0026#39;/^.\\{20\\} *cd/i\\\\\u0026#39; } #使用 hist 查看当前目录历史纪录 function hist { convhistory $HISTFILE } #全部历史纪录 top50 function top50 { allhistory | awk -F\u0026#39;:[ 0-9]*:[0-9]*;\u0026#39; \u0026#39;{ $1=\u0026#34;\u0026#34; ; print }\u0026#39; | sed \u0026#39;s/ /\\n/g\u0026#39; | sed \u0026#39;/^$/d\u0026#39; | sort | uniq -c | sort -nr | head -n 50 } #允许在交互模式中使用注释 例如： setopt INTERACTIVE_COMMENTS #启用自动 cd，输入目录名回车进入目录 setopt AUTO_CD #扩展路径 setopt complete_in_word #禁用 core dumps limit coredumpsize 0 #Emacs风格 键绑定 bindkey -e #以下字符视为单词的一部分 WORDCHARS=\u0026#39;*?_-[]~=\u0026amp;;!#$%^(){}\u0026lt;\u0026gt;\u0026#39; #}}} #自动补全功能 {{{ setopt AUTO_LIST setopt AUTO_MENU #开启此选项，补全时会直接选中菜单项 setopt MENU_COMPLETE autoload -U compinit compinit #自动补全缓存 zstyle \u0026#39;:completion::complete:*\u0026#39; use-cache on zstyle \u0026#39;:completion::complete:*\u0026#39; cache-path .zcache zstyle \u0026#39;:completion:*:cd:*\u0026#39; ignore-parents parent pwd #自动补全选项 zstyle \u0026#39;:completion:*\u0026#39; verbose yes zstyle \u0026#39;:completion:*\u0026#39; menu select zstyle \u0026#39;:completion:*:*:default\u0026#39; force-list always zstyle \u0026#39;:completion:*\u0026#39; select-prompt \u0026#39;%SSelect: lines: %L matches: %M [%p]\u0026#39; zstyle \u0026#39;:completion:*:match:*\u0026#39; original only zstyle \u0026#39;:completion::prefix-1:*\u0026#39; completer _complete zstyle \u0026#39;:completion:predict:*\u0026#39; completer _complete zstyle \u0026#39;:completion:incremental:*\u0026#39; completer _complete _correct zstyle \u0026#39;:completion:*\u0026#39; completer _complete _prefix _correct _prefix _match _approximate #路径补全 zstyle \u0026#39;:completion:*\u0026#39; expand \u0026#39;yes\u0026#39; zstyle \u0026#39;:completion:*\u0026#39; squeeze-shlashes \u0026#39;yes\u0026#39; zstyle \u0026#39;:completion::complete:*\u0026#39; \u0026#39;\\\\\u0026#39; #彩色补全菜单 export CLICOLOR=1 export LSCOLORS=ExGxFxdaCxDaDahbadeche zmodload zsh/complist zstyle \u0026#39;:completion:*\u0026#39; list-colors ${(s.:.)LS_COLORS} zstyle \u0026#39;:completion:*:*:kill:*:processes\u0026#39; list-colors \u0026#39;=(#b) #([0-9]#)*=0=01;31\u0026#39; #修正大小写 zstyle \u0026#39;:completion:*\u0026#39; matcher-list \u0026#39;\u0026#39; \u0026#39;m:{a-zA-Z}={A-Za-z}\u0026#39; #错误校正 zstyle \u0026#39;:completion:*\u0026#39; completer _complete _match _approximate zstyle \u0026#39;:completion:*:match:*\u0026#39; original only zstyle \u0026#39;:completion:*:approximate:*\u0026#39; max-errors 1 numeric #kill 命令补全 compdef pkill=kill compdef pkill=killall zstyle \u0026#39;:completion:*:*:kill:*\u0026#39; menu yes select zstyle \u0026#39;:completion:*:*:*:*:processes\u0026#39; force-list always zstyle \u0026#39;:completion:*:processes\u0026#39; command \u0026#39;ps -au$USER\u0026#39; #补全类型提示分组 zstyle \u0026#39;:completion:*:matches\u0026#39; group \u0026#39;yes\u0026#39; zstyle \u0026#39;:completion:*\u0026#39; group-name \u0026#39;\u0026#39; zstyle \u0026#39;:completion:*:options\u0026#39; description \u0026#39;yes\u0026#39; zstyle \u0026#39;:completion:*:options\u0026#39; auto-description \u0026#39;%d\u0026#39; zstyle \u0026#39;:completion:*:descriptions\u0026#39; format $\u0026#39;\\e[01;33m -- %d --\\e[0m\u0026#39; zstyle \u0026#39;:completion:*:messages\u0026#39; format $\u0026#39;\\e[01;35m -- %d --\\e[0m\u0026#39; zstyle \u0026#39;:completion:*:warnings\u0026#39; format $\u0026#39;\\e[01;31m -- No Matches Found --\\e[0m\u0026#39; zstyle \u0026#39;:completion:*:corrections\u0026#39; format $\u0026#39;\\e[01;32m -- %d (errors: %e) --\\e[0m\u0026#39; # cd ~ 补全顺序 zstyle \u0026#39;:completion:*:-tilde-:*\u0026#39; group-order \u0026#39;named-directories\u0026#39; \u0026#39;path-directories\u0026#39; \u0026#39;users\u0026#39; \u0026#39;expand\u0026#39; #}}} ##行编辑高亮模式 # Ctrl+@ 设置标记，标记和光标点之间为 region zle_highlight=(region:bg=magenta #选中区域 special:bold #特殊字符 isearch:underline)#搜索时使用的关键字 ##空行(光标在行首)补全 \u0026#34;cd \u0026#34; {{{ user-complete(){ case $BUFFER in \u0026#34;\u0026#34; ) # 空行填入 \u0026#34;cd \u0026#34; BUFFER=\u0026#34;cd \u0026#34; zle end-of-line zle expand-or-complete ;; \u0026#34;cd --\u0026#34; ) # \u0026#34;cd --\u0026#34; 替换为 \u0026#34;cd +\u0026#34; BUFFER=\u0026#34;cd +\u0026#34; zle end-of-line zle expand-or-complete ;; \u0026#34;cd +-\u0026#34; ) # \u0026#34;cd +-\u0026#34; 替换为 \u0026#34;cd -\u0026#34; BUFFER=\u0026#34;cd -\u0026#34; zle end-of-line zle expand-or-complete ;; * ) zle expand-or-complete ;; esac } zle -N user-complete bindkey \u0026#34;\\t\u0026#34; user-complete #}}} ##在命令前插入 sudo {{{ #定义功能 sudo-command-line() { [[ -z $BUFFER ]] \u0026amp;\u0026amp; zle up-history [[ $BUFFER != sudo\\ * ]] \u0026amp;\u0026amp; BUFFER=\u0026#34;sudo $BUFFER\u0026#34; zle end-of-line #光标移动到行末 } zle -N sudo-command-line #定义快捷键为： [Esc] [Esc] bindkey \u0026#34;\\e\\e\u0026#34; sudo-command-line #}}} #[Esc][h] man 当前命令时，显示简短说明 alias run-help \u0026gt;\u0026amp;/dev/null \u0026amp;\u0026amp; unalias run-help autoload run-help #历史命令 top10 alias top10=\u0026#39;print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10\u0026#39; #}}} #路径别名 {{{ #进入相应的路径时只要 cd ~xxx hash -d A=\u0026#34;/media/ayu/dearest\u0026#34; hash -d H=\u0026#34;/media/data/backup/ayu\u0026#34; hash -d E=\u0026#34;/etc/\u0026#34; hash -d D=\u0026#34;/home/ayumi/Documents\u0026#34; #}}} #补全 ping zstyle \u0026#39;:completion:*:ping:*\u0026#39; hosts 192.168.1.{1,50,51,100,101} www.google.com #补全 ssh scp sftp 等 zstyle -e \u0026#39;:completion::*:*:*:hosts\u0026#39; hosts \u0026#39;reply=(${=${${(f)\u0026#34;$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)\u0026#34;}%%[# ]*}//,/ })\u0026#39; #F1 计算器 arith-eval-echo() { LBUFFER=\u0026#34;${LBUFFER}echo \\$(( \u0026#34; RBUFFER=\u0026#34; ))$RBUFFER\u0026#34; } zle -N arith-eval-echo bindkey \u0026#34;^[[11~\u0026#34; arith-eval-echo function timeconv { date -d @$1 +\u0026#34;%Y-%m-%d %T\u0026#34; } zmodload zsh/mathfunc autoload -U zsh-mime-setup zsh-mime-setup setopt EXTENDED_GLOB setopt correctall autoload compinstall #漂亮又实用的命令高亮界面 setopt extended_glob TOKENS_FOLLOWED_BY_COMMANDS=(\u0026#39;|\u0026#39; \u0026#39;||\u0026#39; \u0026#39;;\u0026#39; \u0026#39;\u0026amp;\u0026#39; \u0026#39;\u0026amp;\u0026amp;\u0026#39; \u0026#39;sudo\u0026#39; \u0026#39;do\u0026#39; \u0026#39;time\u0026#39; \u0026#39;strace\u0026#39;) recolor-cmd() { region_highlight=() colorize=true start_pos=0 for arg in ${(z)BUFFER}; do ((start_pos+=${#BUFFER[$start_pos+1,-1]}-${#${BUFFER[$start_pos+1,-1]## #}})) ((end_pos=$start_pos+${#arg})) if $colorize; then colorize=false res=$(LC_ALL=C builtin type $arg 2\u0026gt;/dev/null) case $res in *\u0026#39;reserved word\u0026#39;*) style=\u0026#34;fg=magenta,bold\u0026#34;;; *\u0026#39;alias for\u0026#39;*) style=\u0026#34;fg=cyan,bold\u0026#34;;; *\u0026#39;shell builtin\u0026#39;*) style=\u0026#34;fg=yellow,bold\u0026#34;;; *\u0026#39;shell function\u0026#39;*) style=\u0026#39;fg=green,bold\u0026#39;;; *\u0026#34;$arg is\u0026#34;*) [[ $arg = \u0026#39;sudo\u0026#39; ]] \u0026amp;\u0026amp; style=\u0026#34;fg=red,bold\u0026#34; || style=\u0026#34;fg=blue,bold\u0026#34;;; *) style=\u0026#39;none,bold\u0026#39;;; esac region_highlight+=(\u0026#34;$start_pos $end_pos $style\u0026#34;) fi [[ ${${TOKENS_FOLLOWED_BY_COMMANDS[(r)${arg//|/\\|}]}:+yes} = \u0026#39;yes\u0026#39; ]] \u0026amp;\u0026amp; colorize=true start_pos=$end_pos done } check-cmd-self-insert() { zle .self-insert \u0026amp;\u0026amp; recolor-cmd } check-cmd-backward-delete-char() { zle .backward-delete-char \u0026amp;\u0026amp; recolor-cmd } zle -N self-insert check-cmd-self-insert zle -N backward-delete-char check-cmd-backward-delete-char 主题配置 p10k 在首次进入时需要进行配置，按照提示进行即可，配置之后，会在 zshrc 行首和行尾分别添加\n1 2 3 if [[ -r \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; ]]; then source \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; fi 以及\n1 2 # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh. [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh 需要把上面三句代码移动到 4 个 source 的后面，否则每次启动终端都会报错\n搞定收工 ","date":"2024-04-29T21:02:04Z","permalink":"https://songguokunsgg.github.io/p/%E4%BD%BF%E7%94%A8-nix-darwin-%E4%B8%BA-sonoma-%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E7%AE%80%E6%B4%81%E9%AB%98%E6%95%88%E7%9A%84-zsh/","title":"使用 nix-darwin 为 sonoma 配置一个简洁高效的 zsh"},{"content":"2024 年 4 月 20 日诈尸更新，内容如下：\n去掉了使用第三方 PDF 阅读器的方法，因为浏览器已经足够好用，且跨平台性能强。 修改了配置文件，去除传统的 xe-\u0026gt;bib-\u0026gt;xe*2 类型的编译链，转为全部使用性能更好，使用更加简单的 latexmk。 去掉了可能有坑的配置项，尽量减少对插件默认配置的修改，代码量大幅缩水。 我只说三点理由，劝你使用 latexmk 取代传统方法：\n排错功能。latexmk 对于错误容忍度低，一点小错都不会放过，可以对你起监督作用，避免写出屎山还不自知。 增量编译。xe 和 pdf 都是全量编译的，十分之慢，latexmk 只会编译你改动的部分，大大减少编译时间，不会出现你明明什么都没改，不小心点到编译还是会进行全量编译的情况（笔记本电池说谢谢你）。 智能编译链。从此再也不用管什么先 xe 后 bib 了，latexmk 直接一键搞定。 2023 年 6 月 8 日更新，内容如下：\n修改了增加了使用浏览器进行外部查看的方式 添加了自定义编译脚本的相关说明，并附有一个通用编译模板 增加了 macOS 的安装说明 2023 年 1 月 22 日大年初一更新一次，更新内容如下：\n修改了文章标题。。。与时俱进 2022 年 12 月 19 日更新一次，增加了用 winget 安装 okular 的配置方法\n2022 年 11 月 20 日更新一次，优化了 okular 路径的填写方法\ngit bash 可以找到 okular 程序路径，直接定位到路径即可，并不需要定位到图标\n2022 年 11 月 13 日更新一次，增加了一些 linux 端 (Archlinux 为例) 配置的说明\n为什么我不用 texwork 或者 texstudio？因为 vscode 太香了，不多 bb\n安装 texlive windows 端的安装 https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/\n直接下载 texlive.iso，运行里面的 install-tl-windows.bat\n取消勾选这个没用的 texwork（如果你觉得好用，请别打我）\n等待一阵漫长的安装（什么时候才能用包管理器一键安装啊……）\nlinux 端的安装（windows 用户跳过） linux 端 通过命令或者文件管理器挂载文件\n1 sudo mount -o loop texlive.iso /mnt 如果需要使用图形界面安装的话，需要安装下面两个软件包\n1 sudo pacman -S perl perl-tk perl 一般发行版都自带了，perl-tk 可能需要自行安装，然后使用命令\n1 sudo ./install -gui 就会打开与 windows 相同的图形安装界面，直接点安装即可，也可以自行更改安装路径（建议 /usr/local 或者 /opt/）\n有些发行版可以通过包管理器一键安装，不过需要网络，以 Archlinux 为例：\n添加竹林源\nhttps://pacman.ltd/\n然后\n1 sudo pacman -S texlive-full 最近这个源好像出了一些问题，有些包没有了，如果无法下载可以本地安装。\n最后需要添加 windows 字体，不然 tex 编译的字体可能不正确，也很简单，直接找一台 windows 电脑，把 C:/windows/fonts 复制到 /usr/share/fonts/ 下面，然后\n1 sudo fc-cache -fsv 就可以了，解决字体办法有很多，我认为这是最简单的一种了，双系统用户 0 难度。\n这里默认 linux 用户都是懂电脑的，所以就不配图了。\n验证安装 打开终端，输入 xelatex，如果有以下输出，说明安装成功：\nmacOS 端的安装 最简单无脑的就是 macOS，安装包与前面 Linux 和 Windows 用的不同，下载地址：\nhttps://tug.org/mactex/mactex-download.html\n这个包是 universe 的，inter 和 m 芯片的都可以用。直接像装普通软件一样安装即可，安装后会多出几个这玩意\n除了 BibDesk 之外，用得都不多，BibDesk 也可以用别的文献管理软件替代。\n进一步验证安装，在终端输入：\n1 latex -v 有形如下图的输出即可\n1 2 3 4 5 6 7 8 9 10 11 12 pdfTeX 3.141592653-2.6-1.40.25 (TeX Live 2023) kpathsea version 6.3.5 Copyright 2023 Han The Thanh (pdfTeX) et al. There is NO warranty. Redistribution of this software is covered by the terms of both the pdfTeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the pdfTeX source. Primary author of pdfTeX: Han The Thanh (pdfTeX) et al. Compiled with libpng 1.6.39; using libpng 1.6.39 Compiled with zlib 1.2.13; using zlib 1.2.13 Compiled with xpdf version 4.04 安装 visual studio code（windows） 这个不用说了，应用商店一键安装，也可以下载安装包安装\n设置中文之类的就不说了（我的 vscode 用作代码编辑，insider 版本当文档编辑，配置都是一样的）\n安装 visual studio code（linux） 下载 deb 安装，通过包管理器安装都可以，ubuntu 用 ppa，arch 用 yay，略过。\n我现在切换到了 NixOS，就顺便提一句，只能使用 vscode-fhs 才行（懂得都懂我在说什么，不懂的你也没必要懂）。\n安装 visual studio code（macOS） 下载 universe 的版本安装即可，略过。\n配置 latex 安装插件 就这一个玩意就可以满足基本需求\n使用浏览器作为 PDF 阅读器 这种方式可以很便携的实现反向定位和自动刷新。以下几种浏览器我都测过可以完美实现：\nChrome，Edge，Arc Firefox Safari 配置 latex-workshop[1] 直接复制粘贴即可，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 { \u0026#34;latex-workshop.intellisense.package.enabled\u0026#34;: true, \u0026#34;latex-workshop.latex.autoBuild.run\u0026#34; : \u0026#34;onSave\u0026#34;, // 文件清理 \u0026#34;latex-workshop.latex.clean.fileTypes\u0026#34;: [ \u0026#34;*.log\u0026#34; ], \u0026#34;latex-workshop.latex.recipe.default\u0026#34;: \u0026#34;lastUsed\u0026#34;, // 用于配置编译链 \u0026#34;latex-workshop.latex.recipes\u0026#34;: [ { \u0026#34;name\u0026#34; : \u0026#34;latexmk\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;latexmk\u0026#34; ] }, { \u0026#34;name\u0026#34; : \u0026#34;xelatex-latexmk\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;xelatex-latexmk\u0026#34; ] }, { \u0026#34;name\u0026#34; : \u0026#34;pdflatex-latexmk\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;pdflatex-latexmk\u0026#34; ] }, { \u0026#34;name\u0026#34; : \u0026#34;xelatex-latexmk-with-shell-escape\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;xelatex-latexmk-with-shell-escape\u0026#34; ] }, { \u0026#34;name\u0026#34; : \u0026#34;pdflatex-latexmk-with-shell-escape\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;pdflatex-latexmk-with-shell-escape\u0026#34; ] }, { \u0026#34;name\u0026#34; : \u0026#34;BibTeX\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;bibtex\u0026#34; ] } ], \u0026#34;latex-workshop.latex.tools\u0026#34;: [ { \u0026#34;args\u0026#34;: [ \u0026#34;-f\u0026#34;, \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;-xelatex\u0026#34;, \u0026#34;-outdir=%OUTDIR%\u0026#34;, \u0026#34;%DOC%\u0026#34; ], \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;xelatex-latexmk\u0026#34; }, { \u0026#34;args\u0026#34;: [ \u0026#34;-f\u0026#34;, \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;-pdf\u0026#34;, \u0026#34;-outdir=%OUTDIR%\u0026#34;, \u0026#34;%DOC%\u0026#34; ], \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;pdflatex-latexmk\u0026#34; }, { \u0026#34;args\u0026#34;: [ \u0026#34;-f\u0026#34;, \u0026#34;--shell-escape\u0026#34;, \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;-xelatex\u0026#34;, \u0026#34;-outdir=%OUTDIR%\u0026#34;, \u0026#34;%DOC%\u0026#34; ], \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;xelatex-latexmk-with-shell-escape\u0026#34; }, { \u0026#34;args\u0026#34;: [ \u0026#34;-f\u0026#34;, \u0026#34;--shell-escape\u0026#34;, \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;-pdf\u0026#34;, \u0026#34;-outdir=%OUTDIR%\u0026#34;, \u0026#34;%DOC%\u0026#34; ], \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;pdflatex-latexmk-with-shell-escape\u0026#34; }, { \u0026#34;args\u0026#34;: [ \u0026#34;-f\u0026#34;, \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;-pdf\u0026#34;, \u0026#34;%DOC%\u0026#34; ], \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;latexmk\u0026#34; }, { \u0026#34;args\u0026#34;: [ \u0026#34;%DOCFILE%\u0026#34; ], \u0026#34;command\u0026#34;: \u0026#34;bibtex\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;bibtex\u0026#34; } ], \u0026#34;latex-workshop.showContextMenu\u0026#34; : true, \u0026#34;latex-workshop.view.pdf.external.viewer.args\u0026#34;: [ \u0026#34;%PDF%\u0026#34; ], \u0026#34;latex-workshop.view.pdf.internal.synctex.keybinding\u0026#34;: \u0026#34;double-click\u0026#34;, \u0026#34;latex-workshop.view.pdf.ref.viewer\u0026#34; : \u0026#34;auto\u0026#34;, \u0026#34;latex-workshop.view.pdf.viewer\u0026#34; : \u0026#34;browser\u0026#34;, } 之前在每一个配置项上都写了注释，这里全部删了，因为但你把他们粘贴到 vscode 配置文件中时，鼠标移动到对应选项上都会出现相关说明，没有必要长篇大论。\n自编译脚本（可选） 针对一些比较特殊的需求，可增加一个自定义编译脚本选项。\n1 \u0026#34;latex-workshop.latex.external.build.command\u0026#34;: \u0026#34;./compile.sh\u0026#34; 意思是，但你编译（无论自动还是手动）时，不使用 latexshop 的编译链，而是执行 compile.sh 脚本，这种方式能够控制得更加底层，我提供一个模板 http://compile.sh/，编译链为tex -\u0026gt; bibtex -\u0026gt; tex^2，可按需修改：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/bin/bash # 脚本用于编译latex # 主文件名 filename=\u0026#34;\u0026lt;NAME\u0026gt;\u0026#34; # 编译器 # command=\u0026#34;pdflatex\u0026#34; command=\u0026#34;xelatex\u0026#34; # 编译参数 args=\u0026#34;-synctex=1 -interaction=nonstopmode -file-line-error -pdf\u0026#34; # 编译链 # xetex -\u0026gt; bibtex -\u0026gt; xetex^2 for i in {1 .. 3} do $command $args $filename.tex if [ $i -eq 1 ]; then bibtex $filename fi done 该脚本可以完成大多数论文的编译工作。\n注意事项 latexmk 对于错误容忍度比较低，连 bib 不正确都会显示为编译失败（但是文档可以正确输出），这可以在一定程度上帮助你排错，但是如果你错误太多可能会比较烦，这时候可以考虑用自编译脚本。\n参考 相比之前的版本有所改动 ","date":"2024-04-22T11:28:33Z","permalink":"https://songguokunsgg.github.io/p/%E7%9C%9F%E9%A6%99%E8%AD%A6%E5%91%8A2024-%E5%B9%B4%E4%B8%AD%E7%9A%84-vscode-latex-%E5%86%99%E4%BD%9C/","title":"真香警告，2024 年中的 vscode+latex 写作"},{"content":"vim 的作者去世一段时间了，所以我将这篇文章从新组织了一次。2024 年，vim 还是存在一些小问题，在 windows 和 macos 上的体验不太好，所以我现在换用 neovim 了，这套配置还是依然适用，vim 和 neovim。\n为什么不用 lua 写配置 以前写过一套 lua 的配置，但是，就这点配置，这点插件，性能差距不大，用 vimscript 写的话，适用性更好，用 vim 和 neovim 的人都能用。\n适用人群 简单的代码或者文本编辑，无需将 neovim 配置成 IDE。\n插件 配了几个轻量插件，实用性更强，需要安装https://github.com/junegunn/vim-plug，兼顾了外观和功能。\n注意：如果你使用的是 windows 下 git 自带的 vim，则会被认为处在 linux 环境下，安装 vimplug 的目录需要选择 linux 的目录。\n把下面的代码放在 ~/.config/nvim/init.vim 里面\nvim 的话是 ~/.vimrc\nlet g:iswindows = 0 let g:islinux = 0 if(has(\u0026#34;win32\u0026#34;) || has(\u0026#34;win64\u0026#34;) || has(\u0026#34;win95\u0026#34;) || has(\u0026#34;win16\u0026#34;)) set shell=powershell set shellcmdflag=-command \u0026#34; 设置默认终端，不然会使用cmd let g:iswindows = 1 else set encoding=utf-8 \u0026#34; 编码设置 let g:islinux = 1 endif \u0026#34; 首先进行平台判断 if has(\u0026#34;gui_running\u0026#34;) set guifont=Source\\ Code\\ Pro:h16 endif \u0026#34; gui判断 \u0026#34; Configuration file for vim set modelines=0\u0026#34; CVE-2007-2438 \u0026#34; let \u0026amp;t_SI.=\u0026#34;\\e[5 q\u0026#34; \u0026#34;SI = INSERT mode \u0026#34; let \u0026amp;t_SR.=\u0026#34;\\e[4 q\u0026#34; \u0026#34;SR = REPLACE mode \u0026#34; let \u0026amp;t_EI.=\u0026#34;\\e[1 q\u0026#34; \u0026#34;EI = NORMAL mode (ELSE) \u0026#34; 正确设置光标，使用 vim 的话取消注释这三行 syntax on \u0026#34; 语法高亮 autocmd InsertLeave * se nocul autocmd InsertEnter * se cul \u0026#34; 用浅色高亮当前行 set smartindent \u0026#34; 智能对齐 set autoindent \u0026#34; 自动对齐 set confirm \u0026#34; 在处理未保存或只读文件的时候，弹出确认 set tabstop=2 \u0026#34; Tab键的宽度 set softtabstop=4 set shiftwidth=4 \u0026#34; 统一缩进为 4 set noexpandtab \u0026#34; 不要用空格代替制表符 set number \u0026#34; 显示行号 set history=50 \u0026#34; 历史纪录数 set hlsearch set incsearch \u0026#34; 搜索逐字符高亮 set gdefault \u0026#34; 行内替换 set langmenu=zn_CN.UTF-8 set helplang=cn \u0026#34; 语言设置 set cmdheight=2 \u0026#34; 命令行（在状态行）的高度，默认为1,这里是2 set ruler \u0026#34; 在编辑过程中，在右下角显示光标位置的状态行 set laststatus=2 \u0026#34; 总是显示状态行 set showcmd \u0026#34; 在状态行显示目前所执行的命令，未完成的指令片段亦会显示出来 set scrolloff=3 \u0026#34; 光标移动到buffer的顶部和底部时保持3行距离 set showmatch \u0026#34; 高亮显示对应的括号 set matchtime=5 \u0026#34; 对应括号高亮的时间（单位是十分之一秒） set autowrite \u0026#34; 在切换buffer时自动保存当前文件 set wildmenu \u0026#34; 增强模式中的命令行自动完成操作 set linespace=2 \u0026#34; 字符间插入的像素行数目 set whichwrap=b,s,\u0026lt;,\u0026gt;,[,] \u0026#34; 开启Normal或Visual模式下Backspace键，空格键，左方向键，右方向键，Insert或replace模式下左方向键，右方向键跳行的功能。 filetype plugin indent on \u0026#34; 分为三部分命令：file on, file plugin on, file indent on.分别表示自动识别文件类型，用文件类型脚本，使用缩进定义文件。 if executable(\u0026#39;clipboard-provider\u0026#39;) let g:clipboard = { \\ \u0026#39;name\u0026#39;: \u0026#39;myClipboard\u0026#39;, \\ \u0026#39;copy\u0026#39;: { \\ \u0026#39;+\u0026#39;: \u0026#39;clipboard-provider copy\u0026#39;, \\ \u0026#39;*\u0026#39;: \u0026#39;clipboard-provider copy\u0026#39;, \\ }, \\ \u0026#39;paste\u0026#39;: { \\ \u0026#39;+\u0026#39;: \u0026#39;clipboard-provider paste\u0026#39;, \\ \u0026#39;*\u0026#39;: \u0026#39;clipboard-provider paste\u0026#39;, \\ }, \\ } endif \u0026#34; 使用系统剪切板 \u0026#34;+y \u0026#34;+p \u0026#34; vim-plug 安装 \u0026#34; sh -c \u0026#39;curl -fLo \u0026#34;${XDG_DATA_HOME:-$HOME/.local/share}\u0026#34;/nvim/site/autoload/plug.vim --create-dirs \\ \u0026#34; https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\u0026#39; call plug#begin(\u0026#39;~/.vim/plugged/\u0026#39;) Plug \u0026#39;skywind3000/vim-auto-popmenu\u0026#39; Plug \u0026#39;skywind3000/vim-dict\u0026#39; Plug \u0026#39;preservim/nerdtree\u0026#39; Plug \u0026#39;jiangmiao/auto-pairs\u0026#39; Plug \u0026#39;vim-airline/vim-airline\u0026#39; Plug \u0026#39;vim-airline/vim-airline-themes\u0026#39; Plug \u0026#39;morhetz/gruvbox\u0026#39; Plug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;} Plug \u0026#39;skywind3000/asynctasks.vim\u0026#39; Plug \u0026#39;skywind3000/asyncrun.vim\u0026#39; call plug#end() \u0026#34; 代码补全配置 \u0026#34; 设定需要生效的文件类型，如果是 \u0026#34;*\u0026#34; 的话，代表所有类型 let g:apc_enable_ft = {\u0026#39;*\u0026#39;:1} \u0026#34; 设定从字典文件以及当前打开的文件里收集补全单词，详情看 \u0026#39;:help cpt\u0026#39; set cpt=.,k,w,b \u0026#34; 不要自动选中第一个选项。 set completeopt=menu,menuone,noselect \u0026#34; 禁止在下方显示一些啰嗦的提示 set shortmess+=c \u0026#34; nerdtree 按F1 打开关闭 map \u0026lt;F1\u0026gt; :NERDTreeToggle\u0026lt;CR\u0026gt; \u0026#34; 状态栏设置 set laststatus=2 \u0026#34;永远显示状态栏 let g:airline_powerline_fonts = 1 \u0026#34; 支持 powerline 字体 let g:airline#extensions#tabline#enabled = 1 \u0026#34; 显示窗口tab和buffer let g:airline_theme=\u0026#39;molokai\u0026#39; \u0026#34; murmur配色不错 if !exists(\u0026#39;g:airline_symbols\u0026#39;) let g:airline_symbols = {} endif let g:airline_left_sep = \u0026#39;▶\u0026#39; let g:airline_left_alt_sep = \u0026#39;❯\u0026#39; let g:airline_right_sep = \u0026#39;◀\u0026#39; let g:airline_right_alt_sep = \u0026#39;❮\u0026#39; let g:airline_symbols.linenr = \u0026#39;¶\u0026#39; let g:airline_symbols.branch = \u0026#39;⎇\u0026#39; \u0026#34; colorscheme pablo \u0026#34; colorscheme torte \u0026#34; colorscheme koehler colorscheme gruvbox set background=dark \u0026#34; 设置颜色主题 \u0026#34; 映射两个代码运行的快捷键 let g:asyncrun_open = 10 noremap \u0026lt;silent\u0026gt;\u0026lt;C-g\u0026gt; :AsyncTask file-run\u0026lt;cr\u0026gt; noremap \u0026lt;silent\u0026gt;\u0026lt;C-b\u0026gt; :AsyncTask file-build\u0026lt;cr\u0026gt; 去掉了快捷键基本上使用默认配置，F1 打开 nerdtree，Ctrl+g 运行当前文件，Ctrl+b 构建当前项目（但针对这一点我不做过多讲解，否则偏离了文章的主题）。使用 gruvbox 主题\n更新一版，加入了 gui 和平台特性，因为我要在 win 下用 gvim\n再一键安装 Coc 插件，这是我常用的，你可以装自己需要的插件\n1 CocInstall coc-html coc-tsserver coc-sumneko-lua coc-sh coc-pyright coc-json coc-clangd 然后简单的配置一下 asyncrun, vim ~/.vim/tasks.ini，我常用的语言配置如下：\n1 2 3 4 5 6 7 8 9 10 [file-run] command=\u0026#34;$(VIM_FILEPATH)\u0026#34; command:python=python \u0026#34;$(VIM_FILENAME)\u0026#34; command:javascript=node \u0026#34;$(VIM_FILENAME)\u0026#34; command:sh=bash \u0026#34;$(VIM_FILENAME)\u0026#34; command:lua=lua \u0026#34;$(VIM_FILENAME)\u0026#34; command:rust=rust \u0026#34;$(VIM_FILENAME)\u0026#34; output=terminal cwd=$(VIM_FILEDIR) save=2 这个插件功能十分强大，详情可见https://github.com/skywind3000/asynctasks.vim\n这样的话，进行一些简易的代码编写和文本编辑都没问题了\n后话 我并不建议将 neovim 作为大型项目的编辑器，因为它在项目管理，构建上的配置难度比单文件高得多，插件装得太多也会影响 neovim 本身的性能，所以还是专注于简单文本编辑比较好。如果需要管理大型工程，使用 vs、xcode 等 IDE 是更为明智的选择。\n","date":"2024-04-20T11:38:02Z","permalink":"https://songguokunsgg.github.io/p/%E7%94%A8%E6%9C%80%E5%B0%91%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%9A%84-neovim/","title":"用最少的时间打造一个强大的 neovim"},{"content":"为什么市面上会出现迷你主机 我已经忘记了迷你主机是什么时候开始在市场上占有一席之地的，隐约记得是 NUC 带动的。我记得有一款 intel i5-8259U 的 NUC，在黑苹果市场特别火，在更换免驱网卡之后几乎可以完美黑苹果。在接下来的几年中，也不断有新款的迷你主机问世，但是并没有引起广泛关注。2022 年到 2023 年之间，多出了很多厂商做这款业务，这款产品才逐渐进入大众视野。\n我在去年（2023）入手了一台机械君的 R9-5900HX ES 版的准系统主机，1299 元。这也是目前我入手过的唯一一台，说实在的，我最开始并没有指望这款机器有多耐用，抑或是有多么强的性能，我只是单纯的好奇这样的产品。顺带一提，我一直是 macos 党，手里的笔记本是 macbook pro，入手这样一款小主机也能够弥补我没有 windows 的问题，这也是我选择 ES 版的原因，比较便宜，能够用上我闲置的笔记本 DDR4 内存。\n下面，我将从我自身使用的角度，以及一些预想的场景，来写一写，迷你主机究竟适合那些用户，以及笔记本电脑的痛点是什么。\n场景一：大学生上课 这个场景是我虚构的场景，但我好歹也曾经上过课，因此可以大胆的假设一下。\n在七点的早晨，要赶早八的你将桌面上的迷你主机装进背包，将电源线和键盘鼠标装进背包的第二格，腋下夹着一块便携屏，嘴里含着一块面包。你急匆匆的走到教室，那个你往常都在的座位，但很不幸，不知道是谁已经坐在了那里。你心想完蛋了，整个教室就那一个座位有插头。幸运的是，你带了排插，当你拿出所有的设备，却发现 HDMI 线没带。（设备太杂乱容易忘带某件物品）。你看着身边带着笔记本电脑的同学，觉得自己也应该，买一台。\n场景二：移动办公 你在办公室放了一台迷你主机，下班后，你将他带回家，接上 oculink 拓展坞，爽玩游戏。反正办公室和家里都有显示器和键鼠，一台轻巧的小主机能够满足你所有的需求，还不用把数据倒来倒去，岂不美哉？\n该场景同样适用于大学生放假回家等情况。\n场景三：小型服务器 你已经有了一台其他的设备，但你需要一台 24 小时不间断工作的设备，以完成一些自动化工作。你将迷你主机配置好之后，直接 ssh 进去，将自动化工作挂在后台。此后的一个月，你都没有去碰它，但它却默默地为你付出着。（前提是机器质量要好，别跑几天就熄火了）。\n在背后付出的他，不需要键盘鼠标，不需要显示器，放在一个角落，插着电即可。\n场景四：多平台 你有一台 macbook，但是出于某些原因，你需要一台 windows 电脑和一台 linux 电脑。他们不常用，但不能没有。你选择了一台迷你主机，装好 windows，再用虚拟机装一个 linux，在你有需要的时候，他就会派上用场。而这只需要 1000 出头的价格。你心想，如果买笔记本或者配一台相同性能的台式机，怎么也得几千块吧，还占地方。\n场景五：跑路 你不想干了，看着桌子下面几十斤重的 4090 主机，你想让老板来帮你抬一抬，但这是不可能的。要是把 4090 放家里，公司留一台迷你主机多好，你跑路都没人追得上你。\n总结 虚构了五个场景，有些情况有些极端。但我相信，你看完之后一定能够有所思考。需要明白的是，迷你主机，始终是主机，他对标的应该是台式机而不是笔记本（迷你笔记本对标笔记本）。迷你主机相比主机而言，便宜、便携性强，但是、性能差、散热差，这是他们差异化的表现。我总结了以下几点容易陷入的误区。\n迷你主机不适合随叫随到型移动办公：要想使用迷你主机，你需要带齐一整套外设。经常移动的话，反而是一种负担，这种情况应该购买笔记本。 迷你主机不适合高性能追求者：迷你主机用的 cpu 和显卡都是移动端的，散热也比主机更差，因此性能比不过是可以理解的。现在可以通过外接显卡的方式实现高性能，但这着实是麻烦了一点。如果你的使用场景契合场景二，可以考虑购入。 迷你主机不适合小白：对电脑的了解程度直接决定你是否应该买迷你主机。目前迷你主机的水很深，有可能会买到不心仪的产品。比如说，机械君的这台迷你主机，客服说 HDMI 接口是 2.0，但其实是虚假宣传，4k 根本跑不到 60 帧，如果你不懂电脑，可能注意不到这些偷工减料的地方。提供几个参考名词：Ryzen、IPC、NVME、DP、RGB、内存、硬盘。如果你不知道这些名词的意思，建议不买（有懂哥帮忙除外）。 迷你主机适合已经有一台笔记本的人：由于笔记本已经能够满足移动办公需求，迷你主机刚好可以跟笔记本互补。如果你不喜欢主机的傻大黑粗，那就更适合了。 机械君迷你主机使用指南 (刚买的一定要来看看) 之前我有写过一篇关于迷你主机的杂谈，但是没有什么有深度的内容。今天这篇文章将会详细描述我使用机械君以来的真实感受，并附上真实的折腾过程。\n我应不应该购买机械君？ 以上是我购买的迷你主机，可以看到价格确实很香，但是价格香代表问题多，后面我会详细描述。先说结论，针对地球上的所有人，我都不建议你购买这一款迷你主机，哪怕他价格很香，哪怕他性能很强，但是带来的糟心体验是真的很难受。\n我购买的原因是，手里有一块闲置的 2T 固态和一根 8g 内存条，想着利用起来，就买了这台主机，还另外买了一根 32g 内存，凑成了 40g。\n第一次发的货风扇不转，就换货了，所以图上能看到有一个售后详情。换的货二手痕迹非常严重，但是使用正常，我也不想再折腾了，就拿下了，然而麻烦才刚刚开始。\n遇到的问题及解决方案 HDMI 接口问题 拿到手装上了驱动，用 HDMI 线接上了我的 4k 显示器，然后……\n怎么只能使用 4k 30HZ？\n立马找到客服确认，客服说是 HDMI2.0，说我驱动有问题，还找了个人工装模作样的帮我解决了一下问题（但最后并没有解决）。\n但是我发现typec 接口可以实现 4k 60，就不想跟他争辩了。\n网上也有人有这种情况（查资料的时候刷到过好几次，写文章的时候反而找不到了），我可以打包票，这两个 HDMI 接口一定是 1.4，绝非 2.0，如果你有接 4k 的需求，直接走人吧。\n3.5mm 怎么没声音 该问题无解，很多人也有这个情况，可以看这篇帖子https://post.smzdm.com/p/a8xgz856/。\n蓝牙怎么搜不到其他设备？ 该主机用的原装网卡是，8852BE，有多垃圾我就不想描述了。但是，光换网卡是不够的，因为天线也有问题。所以你还需要一个\n![]((20240407) 机械君迷你主机使用指南刚买的一定要来看看_EberyThingSay/v2-1eb58a10ccadb2ed3abc553d6c2bc6ba_b.jpg)\n把内置的天线干掉，你会发现，信号怎么这么好，网速怎么这么快，蓝牙怎么一点问题都没了。\n问题好解决，但是排查起来相当痛苦。\n温度怎么这么高？ 迷你主机体积小是一个很大的优点，但是带来的散热问题也是无法忽略的。\nhttps://tieba.baidu.com/p/8873148967\n我买的咸鱼一个做 3D 打印的后盖，就不给链接了。\n卖家预留了 8010 风扇接口，但我感觉没必要，下面开了口之后散热已经好很多了，再加上风扇只能用 usb 的，会占用一个接口，我个人感觉得不偿失。\n接口太少 还好有一个 typec 接口，多接一个扩展坞吧。\n总结 把以上步骤做完，其实也要花一两百块钱了，为什么不一步到位买个大牌的，而是买这么个玩意折腾自己。\n软件方面的折腾 BIOS 更改显存 这个倒不是机械君的问题，因为很多锐龙的 U 都把显存默认限制在 512M，但还好，留了修改的接口。\nhttps://www.bilibili.com/video/BV1w84y167ep/\n16g 内存设 2-4g，32g 内存就可以直接设 8g，16g 显存的话……应该没必要吧。\n如果是黑苹果的话，建议改到 4g 以上，可以有效减少花屏概率。\n你刚刚说了啥？黑苹果？？？？\n显卡驱动 虽然客服让你安装 5900HX 的驱动，但这个主机的显卡驱动是不能装 5900HX 的，而是要装 5800H 的……\n至于为什么，我不好评判……\nhttps://www.amd.com/zh-hans/support/apu/amd-ryzen-processors/amd-ryzen-7-mobile-processors-radeon-graphics/amd-ryzen-7-5800h\n黑苹果 这台机器可以直接使用 零氪 5800H 迷你主机的 EFI，功能基本正常，网卡需要更换为 AX210。我提供一个 EFI：\nhttps://github.com/songguokunsgg/jixiejun-5900hx-es-hackintosh-efi\n5800H/5900HX 的迷你主机可用\n但是使用过程中，可能会不定期自动重启（从早一直用到晚可能会触发，频次低），这个问题我没有排查出来，可能跟硬盘有关。\n不过每次几秒钟就会重新启动，窗口数据也都还在，倒也不是很影响使用。\n注意，安装过程中需要禁用 nootedred，安装完成，进入系统后再启用 nootedred，详细操作就不描述了，使用 OCAT 就可以搞定。\n推荐使用 13.6.6 系统，屏蔽 macOS 14 的更新，实测很稳定。\n总结 时间有限，先写这么多吧，如果后面有什么好玩的，我会再分享出来。\n如果你还没有购买机械君，建议换别的品牌，如果你已经买了，相信这篇文章会为你提供一些帮助。\n文中出现的问题仅限于我这台机器，如果你的机器没有，请不要喷我，我都是实话实说。\n","date":"2024-04-07T12:36:07Z","permalink":"https://songguokunsgg.github.io/p/%E6%9C%BA%E6%A2%B0%E5%90%9B%E8%BF%B7%E4%BD%A0%E4%B8%BB%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E5%88%9A%E4%B9%B0%E7%9A%84%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9D%A5%E7%9C%8B%E7%9C%8B/","title":"机械君迷你主机使用指南 (刚买的一定要来看看)"},{"content":"相关说明 这份文档是我为校招面试而准备的，最后并没有用上。许多的内容都来自于互联网和 ChatGPT，我只针对相关知识进行了简单梳理，并不保证全面和严谨。在撰写过程中几乎都是用人话写的，应该还算通俗，如果您觉得有所帮助，可以点个关注，谢谢。\n注意：文档最初使用 markdown 写的，导入的时候行内公式没有正确转换，我手动修改了一些，但是仍有不少遗漏，敬请谅解。\n特征工程 归一化以及标准化 归一化（Normalization）和标准化（Standardization）是数据预处理的两种常用技术，它们都旨在处理数据特征的尺度问题，以便于进行后续的数据分析或模型训练。\n归一化 归一化通常是将数据按比例缩放，使之落入一个小的、特定的区间，常见的是将数据缩放到 [0, 1] 或者 [-1, 1] 的区间。\n作用：\n提高模型的收敛速度； 提高模型的精度。 原因 (统一数据尺度，加速梯度下降，避免梯度消失和梯度爆炸，正则化效果) 常用的归一化公式：\nMin-Max 归一化： $ x_{\\text{norm}} = \\frac{x - x_{\\text{min}}}{x_{\\text{max}} - x_{\\text{min}}} $\nMax 归一化： $ x_{\\text{norm}} = \\frac{x}{x_{\\text{max}}} $\n标准化 标准化通常是去均值、方差缩放，使数据符合标准正态分布，即均值为 0，标准差为 1。\n作用：\n使不同规模或单位的特征可比； 符合一些模型对数据分布的假设（例如 PCA、线性回归模型等）。 常用的标准化公式：\nZ-score 标准化： $ x_{\\text{std}} = \\frac{x - \\mu}{\\sigma} $\n其中$\\mu$ 是均值， $\\sigma$ 是标准差。\n应用场景 归一化通常应用在梯度下降、神经网络等模型中，这些模型对特征的尺度比较敏感; 标准化适用于 PCA、逻辑回归、支持向量机等依赖于距离或梯度的模型。 值得注意的是，归一化和标准化的选择需要依据具体的模型和问题场景来定。在某些场合下，原始的、非标准化的数据可能会带来更好的结果。所以，在模型训练时，合适尝试不同的数据预处理方法，以便找到最佳的策略。\n过滤方法（Filter Methods） 特征工程（Feature Engineering）包括特征选择和特征提取。\u0026ldquo;Filter\u0026rdquo; 通常指的是过滤方法（Filter Methods）。\n过滤方法是一种特征选择技术，其主要目标是从原始特征集中选择出一部分最有用的、与目标变量最相关的特征子集。等于说是做了一次数据预处理，跟粗糙集特征选择是一样的。\n与包装方法（Wrapper Methods）和嵌入方法（Embedded Methods）不同，过滤方法在特征选择的过程中不涉及到机器学习算法的学习过程。\n其特点和步骤大致如下：\n1. 与模型独立 不考虑模型的预测能力，而是依据每个特征与目标变量的相关性来进行选择。\n相关性的衡量方式有很多种。\n2. 评分机制 为每个特征赋予一个分数，这个分数反映了该特征与响应变量之间的关系强度或者相关程度。\n相关系数：衡量特征与目标变量之间的线性关系； 卡方检验：用于衡量特征与类别之间的关系； 互信息：衡量两个变量之间的依赖程度，可用于类别型和数值型变量； 3. 选择子集 根据每个特征的分数进行排序，并选取分数最高的 k 个特征作为最终的特征子集。\n4. 粗糙集数据挖掘 同样有评分机制，但是并不需要指定特征数，选出维持正域不变的最小特征子集即可。\n作用和目的 降低计算成本：减少模型训练和预测所需要的计算资源； 减轻过拟合：通过消除不相关或弱相关的特征，减少模型的过拟合风险； 提高模型性能：在某些情况下，消除噪声特征可能帮助模型提高预测的准确性； 增强模型的可解释性：更简洁的模型通常更容易解释和理解。 过滤方法由于计算效率高、实现简单并且不依赖于特定模型，所以在特征选择的初始阶段经常被用来快速筛选特征。然后，你可能还需要利用其他特征选择方法来进一步优化特征集合。\nwrapper 包装方法 \u0026ldquo;Wrapper\u0026rdquo; 在特征工程中指的是包装方法（Wrapper Methods）。包装方法在特征选择过程中会考虑到模型的性能，进而找到一个理想的特征子集来优化模型的表现。\n包装方法的核心思想 依赖模型： 特征选择的过程是在模型训练的基础上完成的，也就是说模型的性能用来评价特征的好坏。 搜索子集： 通过搜索特征的子集空间来找到最优的特征子集，即让模型在此子集上获得最佳的性能表现。 常见的包装方法包括 递归特征消除（Recursive Feature Elimination, RFE）： 该方法首先在全部特征上训练模型，然后移除最不重要的特征（例如模型权重最小的特征），再用剩下的特征重新训练模型。这个过程递归进行，直至达到预定的特征数量。 前向选择（Forward Selection）： 开始时，模型没有任何特征。然后逐渐加入提升模型性能最大的特征。这一过程不断重复，直到加入新特征不再显著提升模型性能为止。 后向消除（Backward Elimination）： 与前向选择相反，后向消除开始时使用所有特征，然后逐步移除对模型贡献最小的特征，直到移除任何一个特征都会损害模型性能为止。 包装方法的特点 优点： 考虑了模型性能，通常能找到更符合模型的特征子集。 在某些情况下，比过滤方法能更准确地找到最优的特征子集。 缺点： 计算成本高。 过于依赖所选择的模型。如果选择的模型不佳，那么进行特征选择的结果也可能不理想。 包装方法通常适用于特征数量相对较少的情况，或者当你准备花费更多的时间和计算资源来寻找最优特征子集的时候。\nebedded 方法 在特征工程中，\u0026ldquo;Embedded\u0026rdquo;（嵌入法）是一种特征选择方法，它试图在模型训练过程中找到最重要的特征。不同于过滤方法（Filter Methods）和包装方法（Wrapper Methods），嵌入法在学习器训练过程中自动进行特征选择。\n嵌入方法（Embedded Methods） 1. 特征选择过程 嵌入方法在模型训练的同时进行特征选择。这类方法通常会在模型训练过程中自动选择一个特征子集，通常依赖于模型自身的属性或参数。\n2. 实现机制 基于惩罚项：例如在岭回归（Ridge Regression）和套索回归（Lasso Regression）中，通过引入 L2 或 L1 正则项来缩减不重要特征的系数，进行特征选择。 基于树模型：例如决策树和随机森林，它们在构建树的过程中自然地进行了特征选择，将重要的特征用于树的顶部分裂，而不重要的特征可能不会用于分裂或者出现在靠近叶子的位置。 3. 优点 考虑到了模型和特征选择的互动，通常能获得比过滤方法更优的特征子集。 特征选择过程与模型训练过程结合在一起，计算效率较高。 4. 缺点 依赖于模型选择的准确性，所选择的特征子集质量高低和所用模型有直接关系。 可解释性可能较差，特别是在使用一些复杂的非线性模型时。 正则化 L1 正则化和 L2 正则化是机器学习和统计学中常用的两种正则化技术。正则化是用来防止过拟合，并提高模型的泛化能力的一种方法。\n定义: L1 正则化: L1 正则化是指在损失函数中添加参数权重的绝对值之和，公式为 $\\lambda \\sum |w_i| $ ，其中 $\\lambda \\sum |w_i|$ 是模型参数， $\\lambda$ 是正则化系数。 L2 正则化: L2 正则化是指在损失函数中添加参数权重的平方和，公式为 $ \\lambda \\sum w_i^2$ ，其中 $\\lambda \\sum w_i^2$ 是模型参数， $\\lambda \\sum w_i^2$ 是正则化系数。 目的: L1 正则化和L2 正则化的主要目的都是通过在损失函数中添加额外的项来控制模型的复杂度，以防止过拟合和提高模型的泛化能力。 稀疏性: L1 正则化能够产生稀疏解，即得到的参数向量中会有许多零值，这有助于特征选择。 L2 正则化通常不会产生稀疏解，而是倾向于将参数向量中的所有元素都缩小，但不会将它们准确地设为零。 解的唯一性: L1 正则化可能得到多个解，因为 L1 正则化的解空间可能在某些方向上是不连续的。 L2 正则化总是得到唯一解，因为 L2 正则化的解空间是平滑的和连续的。 解析解: L1 正则化通常没有解析解，需要使用迭代方法来求解。 L2 正则化在某些情况下可以得到解析解，例如线性回归模型。 计算复杂度: L1 正则化的计算可能更为复杂，因为它的解可能需要求解非线性的优化问题。 L2 正则化的计算相对简单，因为它的解可以通过求解线性方程组得到。 鲁棒性: L1 正则化对于异常值具有更好的鲁棒性，因为它倾向于产生稀疏解，忽略不重要的特征。 L2 正则化可能对异常值较为敏感，因为它倾向于使用所有的特征。 在实际应用中，选择 L1 正则化还是 L2 正则化通常取决于问题的具体需求和数据的特性。例如，如果特征选择是重要的考虑因素，可能会选择 L1 正则化；如果模型的稳定性和解的唯一性更为重要，可能会选择 L2 正则化。\n常用的嵌入方法技术 Lasso 回归：L1 正则化可以将不重要的特征系数压缩至零，自然地实现了特征的选择。 $ J(\\theta) = \\text{MSE} + \\alpha \\sum_{i=1}^{n} |\\theta_i| $\n决策树：通过信息增益或基尼不纯度等指标，在构建树的过程中进行特征选择。 正则化网络：例如 Elastic Net，结合了 L1 和 L2 正则化，同时兼顾特征选择和模型的稳健性。 支持向量机：使用线性核的 SVM 并引入 L1 正则化，可以在分类的同时进行特征选择。 嵌入方法由于直接考虑到了模型的学习过程，通常在保证模型性能的同时能够获得较为精简的特征子集。不过，最终选择哪种特征选择方法还需结合实际问题的需求和特点来决定。\n模型评估 准确率和召回率 准确率（Precision）和召回率（Recall）是分类模型性能评估的两个重要指标，它们分别关注了模型预测正类样本的准确性和完整性。这两个指标常常和其他指标一起用来评估模型在正类预测上的表现。\n1. 准确率（Precision） 准确率关注的是模型预测为正类的样本中有多少是真正的正类样本。其计算公式为：\n$ \\text{Precision} = \\frac{\\text{TP}}{\\text{TP} + \\text{FP}} $\n其中，TP（True Positive）是真正类（模型预测为正类，实际也为正类）的样本数量，FP（False Positive）是假正类（模型预测为正类，实际为负类）的样本数量。\n2. 召回率（Recall） 召回率关注的是实际所有正类样本中有多少被模型预测出来了。其计算公式为：\n$ \\text{Recall} = \\frac{\\text{TP}}{\\text{TP} + \\text{FN}} $\n其中，FN（False Negative）是假负类（模型预测为负类，实际为正类）的样本数量。\n区别 关注点不同：准确率关注的是预测为正类的样本中实际正类的比例，而召回率关注的是实际正类样本中被正确预测出的比例。 权衡关系：在多数情况下，准确率和召回率呈现一种权衡的关系，提高准确率可能会降低召回率，反之亦然。这种权衡关系通常使用 F1 分数（F1 Score）来综合衡量，其计算公式为： $ F1 = 2 \\times \\frac{\\text{Precision} \\times \\text{Recall}}{\\text{Precision} + \\text{Recall}} $\n应用场景：在某些场景下，我们可能更关心准确率，比如在垃圾邮件检测中，我们不希望重要邮件被误判为垃圾邮件。在其他场景下，我们可能更关心召回率，例如在疾病检测中，我们不希望漏检任何一个病患。 P-R 曲线 P-R 曲线（Precision-Recall Curve）是一种用于评估二元分类模型（Binary Classification）性能的工具。该曲线绘制了在不同决策阈值下，模型的准确率（Precision）和召回率（Recall）之间的关系。在一些实际问题（特别是在正负类样本不平衡的情况下）中，P-R 曲线是一个很有用的工具，因为它关注的重点是正类的预测能力。\nP-R 曲线与 ROC 曲线的区别 关注点不同：P-R 曲线关注的是正类的预测性能，而 ROC 曲线同时考虑了正类和负类的预测性能。 Y 轴标度不同：P-R 曲线的 Y 轴是 Precision，而 ROC 曲线的 Y 轴是 True Positive Rate（也叫做 Recall 或敏感性）。 选择依据：在正负样本严重不均衡的情况下，P-R 曲线通常更能反映模型对正类样本预测的真实情况。 参数调优 参数调优（Hyperparameter Tuning）是机器学习中一个关键的步骤，它涉及到在给定的搜索空间中寻找模型表现最优的参数配置。对模型的参数进行优化可以显著提高模型的预测能力。下面简单介绍几种常用的参数调优方法：网格搜索、随机搜索以及贝叶斯优化。\n1. 网格搜索（Grid Search）(穷举法) 网格搜索是一种穷举搜索方法。它通过预先定义好的参数范围和取值，生成参数组合的“网格”，然后遍历这些组合来寻找最优参数。\n优点：理论上能找到最优参数组合（至少在你设定的范围和步长内）。 缺点：计算量大，尤其是当参数空间较大或模型较复杂时。 2. 随机搜索（Random Search）(网格中抽样) 不同于网格搜索，随机搜索并不尝试所有可能的参数组合，而是在参数空间中随机抽样，根据这些样本来找到最优参数。\n优点：比网格搜索更高效，尤其是在参数空间较大时；并且在实践中，随机搜索通常能够在相对较少的迭代次数中找到不错的参数组合。 缺点：没有网格搜索精确，可能错过某些参数组合。 3. 贝叶斯优化（Bayesian Optimization） 贝叶斯优化使用概率模型（通常是高斯过程）来预测在哪里可以找到有效的参数组合，并据此进行下一步的搜索，因此，它在每一步迭代时都会考虑到之前的搜索结果。\n优点：相比于网格搜索和随机搜索，贝叶斯优化通常能更快地找到最优参数组合；并且它可以更有效地利用有限的资源。 缺点：建立和调优概率模型可能在某些情况下比直接进行参数搜索更为复杂和计算密集。 过拟合与欠拟合 欠拟合和过拟合是机器学习中常见的两种模型表现问题。它们描述了模型与数据之间的关系，以及模型对新数据的泛化能力。\n欠拟合（Underfitting） 概念 当模型过于简单，无法捕捉到数据中的模式和关系时，我们称之为欠拟合。一个欠拟合的模型在训练数据和测试数据上的表现都会较差。\n如何避免 使用更复杂的模型：例如，对于线性回归，可以尝试多项式回归。 增加特征：引入更多的特征，或者构建特征的组合。 减少正则化：如果使用了正则化技术（如 L1 或 L2 正则化），尝试减小正则化系数。 过拟合（Overfitting） 概念 当模型过于复杂，不仅学习了数据中的真实模式，还学习了数据中的噪声，我们称之为过拟合。一个过拟合的模型在训练数据上的表现很好，但在测试数据上的表现较差，因为它对新的、未见过的数据泛化能力较差。\n如何避免 获取更多的数据：更多的数据可以帮助模型泛化得更好。 使用简化的模型：例如，从神经网络中减少隐藏层或隐藏单元。 添加正则化：如 L1 或 L2 正则化，这可以约束模型的复杂性。 特征选择：减少不相关或冗余的特征。 早停：对于某些迭代的模型（如神经网络），当验证误差停止减少或开始增加时，停止训练。 使用集成方法：如 Bagging 和 Boosting，通过组合多个模型的预测来减少过拟合。 交叉验证：使用交叉验证选择模型的超参数，以确保模型在多个子集上的表现都较好。 剪枝：对于决策树等模型，减少模型的深度或叶节点数量。 SVM 支持向量机 (SVM) 基本概念 支持向量机（Support Vector Machine，SVM）是一种用于分类和回归的监督学习算法。在分类问题中，SVM 试图找到一个超平面，最大化两个类别之间的边缘（margin），即数据点到超平面的最小距离。\n公式推导 基本的线性 SVM 分类器求解的问题可以表述为以下优化问题：\n$ \\min_{\\mathbf{w}, b} \\frac{1}{2}|\\mathbf{w}|^2\\ s.t.\\ y_i(\\mathbf{w} \\cdot \\mathbf{x}_i + b) \\geq 1, \\quad i = 1, \\ldots, N $\n这里：\n$\\lambda \\sum w_i^2$ 是超平面的法向量 $b$ 是超平面的偏置项 $ \\lambda \\sum w_i^2$ 是数据点 $y_i$ 是数据点对应的类别标签（通常是 +1 或 -1） 对偶和 KKT 条件 对偶问题是指从原始优化问题（Primal Problem）出发，通过一些数学变换得到的另一个问题。对于 SVM 来说，我们可以用拉格朗日乘子法把原始问题转化为它的对偶问题，这使得问题的求解更加高效，并允许我们用核技巧（Kernel trick）来处理非线性问题。\nKKT（Karush-Kuhn-Tucker）条件提供了一个检查某个点是否是优化问题解的必要和充分条件。在 SVM 中，KKT 条件允许我们确定一个数据点是否是支持向量。\n优劣势 优点 泛化能力强：在很多实际问题中，SVM 具有较好的泛化性能。 处理非线性问题：通过核技巧，SVM 可以处理非线性问题。 全局最优解：SVM 的解是全局最优的，而不是局部最优。 稀疏性：只有支持向量会参与到最终模型的决策中。 缺点 核函数选择：正确选择或构造核函数可能比较困难。 大规模数据：在大规模数据集上，SVM 的计算复杂度较高，训练过程可能比较耗时。 多分类问题：标准的 SVM 只适用于二分类问题。虽然可以通过一些策略（例如“一对一”或“一对其余”）来解决多分类问题，但这些策略在某些场景下可能不是很有效。 注意：以上内容仅为概述性的讨论。具体的公式推导、对偶问题、KKT 条件等涉及较深入的数学理论和技术细节，您可能需要参考相关教材或研究文章以获取更深入的理解和洞察。\n决策树 1. ID3 算法 最大信息增益公式 信息增益（Information Gain, IG）表示得知特征 $X$ 的信息而使得类 $Y$ 的信息的不确定性减少的程度。计算公式如下：\n$ IG(Y|X) = H(Y) - H(Y|X) $\n$ 信息增益=Y 熵-X 下 Y 条件熵 $\n其中， $H(Y)$ 是数据集 $D$ 的熵（Entropy）, 计算公式为：\n$ H(Y) = -\\sum_{i=1}^{m} p(y_i) \\log_2 p(y_i) $\n而条件熵 $X$ 表示在已知随机变量 $X$ 的条件下随机变量 $Y$ 的不确定性，计算公式为：\n$ H(Y|X) = \\sum_{i=1}^{n} p(x_i) H(Y|x_i) $\n2. C4.5 算法 最大信息增益率公式 C4.5 算法使用信息增益率（Gain Ratio）来选择分裂特征，计算公式如下：\n$ GR(Y|X) = \\frac{IG(Y|X)}{IV(X)} $\n其中，信息增益 $G(X|Y)$ 与 ID3 中的定义相同，而固有值 $IV(X)$ 定义为：\n$ IV(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i) $\n信息增益率更好的原因 偏向处理: 信息增益倾向于选择具有更多值的属性，因为这样的属性能更好地区分数据，但可能导致过拟合。 信息增益率在信息增益的基础上除以一个称为属性固有值（Intrinsic Value）的值，从而减轻了对具有多个值的属性的偏见。 模型泛化能力: 通过减轻对具有更多类别的特征的偏见，信息增益率可能会提高模型的泛化能力，使模型在未见过的数据上表现得更好。 特征选择的准确性: 信息增益率通过固有值的归一化来提供更准确的特征选择，从而可能会导致建立一个更简单和更有效的模型。 处理连续和离散属性: 在处理连续属性时，信息增益率可能提供更好的特征选择，因为它能减轻信息增益对高度区分的特征的偏好。 3. CART 算法 基尼指数公式 CART 使用基尼指数（Gini Index）来选择分裂点，基尼指数反映了从数据集$D$中随机抽取两个样本，其类标记不一致的概率，计算公式为：\n$ Gini(D) = 1 - \\sum_{i=1}^{m} p^2(y_i) $\n对于二分类问题，该公式可以简化为：\n$ Gini(D) = 2p(1-p) $\n其中，$p$是正类样本的比例。\n回归树步骤 对于回归树，CART 会尝试找到使得划分后的子集内的样本目标值的方差最小的特征进行分裂。\n遍历所有的特征及其可能的取值，找到最佳的特征及其取值作为分裂依据。 使用选定的特征和取值进行分裂，生成子节点。 对子节点递归调用以上步骤，生成决策树。 三种树的区别 ID3：使用信息增益来选择特征，可能倾向于选择取值较多的特征。 C4.5：使用信息增益率来选择特征，修正了 ID3 的缺点，计算相对复杂。 CART：可以用于分类（使用基尼指数）和回归（使用均方误差）问题，生成的是二叉树。 现有的算法几乎都使用 C4.5 和 CART。在 sklearn 中，两种算法除了分裂标准不同外，其余都类似，都生成二叉树。\n集成学习 GBDT (Gradient Boosting Decision Tree) 基本概念 GBDT 是一种迭代的决策树算法，它通过拟合残差来生成每一棵树，将所有树的结果累加起来作为最终预测输出。\n残差 残差的定义: 数学上，如果用 $y $ 表示实际的观测值，用 $\\hat{y}$ 表示当前模型的预测值，那么残差 $r$ 可以定义为 $\\hat{y}$ 。代表实际观测值与当前模型的预测值之间的差异。 残差的计算和利用: 在每一轮的迭代中，GBDT 都会计算当前模型对每个训练样本的残差。然后，它会构建一个新的决策树来拟合这些残差，而不是直接拟合实际的观测值。 通过这种方式，每个新的决策树都试图纠正前一个模型的错误。 模型的更新: 在构建了新的决策树之后，GBDT 会将其加入到当前的模型中，以更新模型的预测，引入了学习率来防止过拟合。 梯度的角色: 实际上，残差是损失函数相对于模型预测的负梯度。在每一轮的迭代中，通过计算和拟合残差，GBDT 实际上是在执行梯度下降算法来最小化损失函数。 损失函数的选择: GBDT 可以用于回归和分类问题，通过选择不同的损失函数，比如平方损失、对数损失等，可以使 GBDT 适用于不同类型的问题。残差的计算方式会根据所选择的损失函数而有所不同。 主要步骤 初始化：用一个常数值来预测，通常是目标变量的均值。 迭代：在每次迭代中： 计算残差（真实值与当前模型的预测值之差）。 使用残差作为目标变量 (这里有点难理解，其实是不用原来的决策类了，而是用残差当作的新的决策类来进行训练) 训练一个基学习器（通常是一个决策树）。 将基学习器的预测结果乘以一个步长（学习率）加到模型中。 输出：所有树的预测结果相加，得到最终的预测值。 特点 适用于回归和分类问题。 能处理混合类型的特征。 有较好的解释性。 XGBoost (Extreme Gradient Boosting) 基本概念 XGBoost 也是一种基于树的集成模型，它基于 GBDT，并在速度和性能上做了很多优化和改进。\n优化与改进 正则化：在目标函数中加入了正则化项，用来控制模型的复杂度，防止过拟合。 优化目标函数：使用了一阶和二阶梯度信息，在寻找最佳分裂点时考虑到了增益的一阶和二阶导数。 稀疏感知算法：能自动处理稀疏数据，也能自定义缺失值的处理方式。 列抽样：通过列抽样来防止过拟合，增强模型的泛化能力。 并行化：在特征划分上进行并行计算，大大提升了速度。 特点 在精度上通常优于其他算法。 在使用上提供了大量的可调参数。 具有很强的灵活性，能自定义优化目标和评价准则。 可以高效地处理大规模数据集。 优化 平方差损失 概念 平方差损失（Mean Squared Error, MSE）常用于回归问题，计算模型预测值与真实值之间的平方差的平均值。表达式为：\n$ MSE = \\frac{1}{n}\\sum_{i=1}^{n}(y_i - \\hat{y}_i)^2 $\n其中， $y_i$ 是真实值，$\\hat{y}$ 是模型的预测值，n 是样本数量。\n梯度下降公式推导 对于参数 $\\theta$ 的梯度，可以通过对 $\\theta$ 求导来获得：\n$ \\frac{\\partial MSE}{\\partial \\theta} = \\frac{-2}{n}\\sum_{i=1}^{n}(y_i - \\hat{y}_i)\\frac{\\partial \\hat{y}_i}{\\partial \\theta} $\n在具体的模型（如线性回归模型）中，$\\hat{y}_i$ 会是 $\\theta$ 的具体函数形式，从而可以进一步推导梯度表达式。\n凸函数 概念 凸函数是一种在整个定义域内上凸的函数。对于定义在某个凸集 C 上的函数 f，如果对于任意的 $x_1, x_2 \\in C$ 和任意的 $ \\alpha \\in [0,1]$，都有：\n$ f(\\alpha x_1 + (1-\\alpha)x_2) \\leq \\alpha f(x_1) + (1-\\alpha)f(x_2) $\n则称函数 $f$ 是凸函数。凸函数的一个重要性质是：局部最小值也是全局最小值。\n梯度下降 梯度下降是一种优化算法，主要用于寻找函数的局部最小值。基本思想是在每一步迭代中，找到函数在当前点的梯度方向，并沿着梯度方向的负方向移动一定的步长，以此来更新参数值：\n$ \\theta_{t+1} = \\theta_{t} - \\alpha \\nabla f(\\theta_t) $\n其中，$\\theta$ 是需要优化的参数，$\\alpha$ 是学习率，$\\nabla f(\\theta_t)$ 是 $f$ 在 $\\theta_t$ 处的梯度。\n牛顿法 牛顿法是一种在实数域和复数域上近似求解方程的迭代方法。在优化问题中，牛顿法主要用于求解无约束优化问题的极值。牛顿法更新参数的公式为：\n$ \\theta_{t+1} = \\theta_{t} - \\left[ Hf(\\theta_t) \\right]^{-1} \\nabla f(\\theta_t) $\n其中，$\\theta$ 是需要优化的参数，\n$ Hf(\\theta_t) $\n是$f$在 $\\theta_t$ 处的海森矩阵（Hessian Matrix，即梯度的导数矩阵）。\n总结来说，平方差损失、凸函数、梯度下降、牛顿法这些概念和方法在机器学习的模型训练过程中经常被用到，分别在损失函数定义、函数性质探讨、参数优化等方面发挥着重要作用。\n正则化和稀疏性 (重点内容) 正则化（Regularization） 概念 正则化是机器学习模型为了防止过拟合而在损失函数中添加的一个额外项，通常是模型参数的函数。加入正则化项后，模型在训练过程中不仅要最小化原来的损失函数，还要最小化正则化项，从而防止模型复杂度过高。\n主要形式 L1 正则化：模型参数权重绝对值之和，表达式形式： $ L_1 = \\lambda \\sum_{i=1}^{n} |\\theta_i| $ L2 正则化：模型参数权重平方和的平方根，表达式形式： $ L_2 = \\lambda \\sum_{i=1}^{n} \\theta_i^2 $ 其中，$\\theta$ 是模型参数，$\\lambda$ 是正则化强度参数。\n作用 防止过拟合：通过约束模型参数的大小，防止模型过于复杂。 模型选择：在一定程度上起到了特征选择的作用（特别是 L1 正则化）。 稀疏性（Sparsity） 概念 稀疏性在机器学习中通常是指模型的一部分参数或者特征为零，即模型或数据中有大量的零元素。\n与正则化的关系 L1 正则化与稀疏性：L1 正则化倾向于产生稀疏解，即模型的一部分参数会被压缩为 0，起到了特征选择的效果。 L2 正则化与稀疏性：L2 正则化倾向于让模型的参数接近 0 但不为 0，得到的模型一般不是稀疏的。 稀疏性的好处 计算效率：稀疏矩阵的存储和运算通常比密集矩阵更加高效。 解释性：稀疏模型通常更容易解释，因为模型只依赖于一部分特征。 泛化能力：通过减少模型依赖的特征数量，可能提高模型的泛化能力。 深度学习 CNN（卷积神经网络） 基本概念 卷积层：通过卷积操作进行特征提取。卷积核（或滤波器）在输入数据上滑动，通过卷积操作提取空间特征。 激活层：通常在卷积层之后，使用非线性激活函数，如 ReLU，增强网络的表达能力。 池化层：进行下采样，减小数据的空间尺寸，以减少计算量，并增强特征的鲁棒性。 假设我们有一个 4x4 的特征图如下：\n1 2 3 4 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 我们使用一个 2x2 的池化窗口和步长为 2 的最大池化操作。在这种情况下，我们将 4x4 的特征图分为四个 2x2 的区域，并从每个区域中选取最大值。步长为 2 意味着池化窗口每次移动两个单位。\n第一个 2x2 区域（左上角）的最大值是 6 第二个 2x2 区域（右上角）的最大值是 8 第三个 2x2 区域（左下角）的最大值是 14 第四个 2x2 区域（右下角）的最大值是 16 因此，经过最大池化操作后，我们得到一个新的 2x2 的特征图：\n1 2 6 8 14 16 通过这个操作，我们保留了每个区域的最大值，同时将特征图的尺寸减小了。\n全连接层：将学到的空间特征用于最终的分类或回归任务。 特点 适合处理图像数据，能够有效提取图像的局部特征。 权值共享：减少模型参数，缓解过拟合。 空间不变性：通过权值共享和池化层，模型能够对输入数据的微小变化保持不变。 RNN（循环神经网络） 基本概念 循环结构：RNN 通过循环结构实现序列数据的时间依赖捕捉。 隐藏状态：在每个时间步，RNN 通过当前输入和前一时间步的隐藏状态来更新当前的隐藏状态。 时间展开：虽然 RNN 的结构是循环的，但在实际计算和分析中，通常将其在时间上展开以方便理解和计算。 特点 适合处理序列数据，如文本、时间序列数据等。 能够理论上捕捉时间序列中的长期依赖关系。 容易受到梯度消失或梯度爆炸问题的困扰。 变体 LSTM（长短时记忆网络）：通过引入门机制和单元状态来缓解梯度消失问题，能够更好地捕捉序列中的长期依赖关系。 GRU（门控循环单元）：类似 LSTM 但结构更简单，计算参数更少。 总结 CNN 主要用于处理具有空间结构的数据（如图像）。 RNN 主要用于处理具有时间依赖关系的序列数据（如文本）。 这两种网络结构在深度学习领域有着广泛的应用，并且在图像识别、自然语言处理等任务上取得了显著的成功。\nAttention Mechanism Attention Mechanism 的核心思想在于赋予模型对输入数据不同部分关注（或称注意）的能力。在自然语言处理中，尤其在序列到序列的模型中，Attention 机制帮助模型在不同阶段关注输入序列的不同部分，从而更好地解码出目标序列。\nSelf-Attention Self-Attention 是 Attention 机制的一种变体，它允许模型在同一序列内部的不同位置之间进行关注。不同于传统的 Attention 机制将关注点放在一个不同的序列上（如在翻译任务中，对源序列进行关注），Self-Attention 则是在同一序列的不同位置上计算注意力权重。\n计算步骤 计算查询（Query）、键（Key）和值（Value）：对于输入序列中的每个位置，我们都会得到一个 Query、一个 Key 和一个 Value，它们通常是通过不同的参数化可学习的线性变换得到的。 $ Q = XW_Q, K = XW_K, V = XW_V $\n其中，$X$ 是输入序列，$W_Q, W_K, W_V$ 是对应的权重矩阵。\n计算注意力权重：用 Query 和 Key 的点积计算注意力分数，再通过 softmax 函数获取权重。 $ AttentionScores = softmax\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right) $\n这里，$d_k$ 是 Key 的维度，除以 $\\sqrt{d_k}$ 是为了缓解梯度消失或爆炸的问题。\n计算加权和：利用得到的注意力权重和 Value 的线性组合得到输出。 $ Z = AttentionScores \\times V $\n特点 自适应关注：Self-Attention 允许模型自适应地关注输入序列中不同位置的信息，有助于捕捉序列内部的依赖关系。 并行计算：不同于 RNN 需要顺序计算序列的每一个位置，Self-Attention 可以并行计算序列所有位置的输出，从而在计算上更加高效。 多头注意力：在实际应用中，我们通常使用多头注意力（Multi-Head Attention）来捕捉序列中的多种依赖关系。不同的注意力头可以学习到序列中不同层次的信息。 应用：Transformer 模型 Self-Attention 机制在 Transformer 模型中得到了广泛应用。Transformer 模型基于 Self-Attention 来处理序列数据，摒弃了传统的 RNN 结构，充分利用 Self-Attention 的并行性和强大的表达能力，成为了现代自然语言处理模型（例如 BERT、GPT 等）的核心组成部分。\n简历相关 论文简介 论文 1：主要基于课题组内部的相关族算法进行了改进，引入了正域覆盖度的概念，提高算法抗噪声性能，且不牺牲算法效率。\n论文 2：首次提出了专为单调有序数据设计的数据粒化策略，并依此策略设计了高效的单调特征选择和分类算法，相比传统优势粗糙集的特征选择算法提升了数百倍效率。\n论文 3：首次将模糊数学引入单调有序数据中，增强了论文 2 中算法处理连续值属性的能力。还将并行计算和样本抽样引入了算法中，进一步提升计算效率。\nAI 框架简介 技术手段：nodejs、Juia、HTML、mongodb\nnodejs 主要用于前端脚本的编写，实现页面逻辑。优势在于语法简单，容易实现，可跨平台等。\nHTML 主要用于前端页面的编写，实现界面呈现和用户交互等，配合 nodejs 使用。\nJulia 出于对高性能计算的考虑，选择 Julia 作为后端框架，使用 HTTP、JSON、MLBase 等库辅助编写。\nmongodb 非关系型数据库，在未来有数据存储需求后考虑引入。\nPCA 算法 主成分分析（Principal Component Analysis, PCA）是一种广泛应用的线性降维技术，旨在从数据中找出最重要的特征并降低数据的维度，以减小计算成本和提高模型性能。以下是 PCA 算法的主要步骤和特点：\n中心化数据: 首先，计算每个特征的均值，并将数据中心化，即从每个特征值中减去该特征的均值。 数据规模 $n\\times m$ 计算协方差矩阵: 计算数据的协方差矩阵。协方差矩阵能够捕捉数据特征之间的相关性。 $m\\times m$ 求协方差矩阵的特征值和特征向量: 计算协方差矩阵的特征值和特征向量。特征向量表示数据的主成分方向，而特征值表示这些方向上的方差大小。 特征向量 $m\\times 1$, 特征值$1$，特征值和特征向量可能有多个，但都一一对应。 排序和选择主成分: 根据特征值的大小对特征值和特征向量进行排序，并选择前$k$个最大的特征值对应的特征向量，其中$k$是你想要降低到的维度。 每个特征向量 $m\\times 1$，原始数据 $n\\times m$，因此每个特征向量可以得到一个 $[n\\times m] \\times [m \\times 1]$ 的 $n \\times 1$向量。 投影数据: 将原始数据投影到选定的主成分上，得到降维后的数据。 $k$个特征值得到了$k$个$n\\times 1$向量，组合为$n\\times k$的矩阵，降维完成。 特点:\n无监督: PCA 是一种无监督的降维技术，不需要任何标签信息，只依赖于数据的结构。 线性降维: PCA 只能捕捉数据的线性结构，如果数据具有非线性结构，PCA 可能不是最好的选择。 方差最大化: PCA 试图找到能够最大化数据方差的主成分，这意味着它倾向于保留数据中的主要结构和模式。 降噪: 通过保留数据中的主要成分并忽略较小的成分，PCA 也可以用于降噪。 可视化: PCA 可以用于将高维数据降低到 2 或 3 维，以便于可视化。 缺点：\n使得原本可解释的数据失去了可解释性。\n","date":"2024-02-13T21:23:56Z","permalink":"https://songguokunsgg.github.io/p/%E5%A6%82%E4%BD%95%E5%87%86%E5%A4%87%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E9%9D%A2%E8%AF%95/","title":"如何准备机器学习工程师的面试？"},{"content":"虽然标题被我改成这样，但我仍然不建议主力机使用 linux, 除非你一定不会使用以下功能之一：\nMSOffice onedrive 重度依赖 QQ 和微信 一些专用工业软件 公司独有软件 iTunes visual studio 等 钉钉（视频分享模糊，其他功能正常） 以下用户请慎重使用 wayland，说不定会让你直接放弃 linux\n使用 nvidia 单显卡 我的主力机体验了一下就回 win11 了，现在配的垃圾台式（e3 1230 + rx580）还坚持着 arch，用着还挺爽。\n2022 年 10 月 23 日更新一波，之前因为一些软件用不了，我又回到了 win11，还小小的升级了一波配置（从 i7+3050 成为了 i7 加 3060）但是有些操作在 win 下面还是不太方便，于是我又把 linux 装上了，这次为了省事装的 manjaro，然后把源换成了 arch 的，但是，问题太多（我太天真了），最后还是换回了 arch\n我的配置（开了独显直连）\n经过几个月的发展，wayland 又取得了一些进步，我觉得离取代 xorg 只剩最后一步了（Electron 输入法问题）。\nnvidia 显卡的配置（intel 和 AMD 显卡无需配置） 5.18 及之后的内核需要在内核启动参数中添加 ibt=off，才可以启动成功\nnvidia 单显卡（包括开启独显直连的情况） 如果不开独显直连，那安装很简单，开了的话会复杂一点，类似于 nvidia 主机装 wayland.\n1 2 GBM_BACKEND=nvidia-drm __GLX_VENDOR_LIBRARY_NAME=nvidia 需要把这两行添加到 /etc/profile 中，然后修改内核 /etc/defualt/grub\n也就是在这一行后面添加 nvidia-drm.modeset=1，也可以启动的时候添加，但每次都需要操作，麻烦，改完之后如下：\n1 GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet udev.log_priority=3 nvidia-drm.modeset=1\u0026#34; 然后使用 update-grub（没有的话 AUR 安装）命令更新 grub，重启就可以使用 wayland-session 了，如果没有这个命令，或者直接\n1 sudo grub-mkconfig -o /boot/grub/grub.cfg 也可以直接修改 /boot/grub/grub.cfg 文件，不过不太安全，慎用。 I+N 双显卡（笔记本推荐方案） 在不做专门配置的情况下，默认使用了 intel 核显，在有需要的时候通过 prime-run 调用独显，因此不用过多的配置。但在 5.18 之后的内核仍然需要禁用 ibt。\n笔记本推荐使用双显卡，主要是因为 nvidia 对 wayland 支持实在太差，当然，如果你使用 x11，那么开独显直连也不错。\n缩放功能的改进 这个改进是 KDE 做的，因此只适用于 KDE，并且版本必须高于 5.26.\n之前有说到，xwayland 应用在 wayland 缩放下面会很糊，这是由于 xwayland 的缩放策略是直接按比例放大所导致的，而我之前给出的解决方案是不缩放 wayland，而是使用大字体曲线救国，xwayland 应用在内部单独缩放。这样做能解决一些问题，但也带来了一些问题，例如不美观等。而 KDE5.26 提供了x 应用单独缩放的功能，\n可以看到 x11 应用可以单独走自身的缩放，经过测试，这个功能非常好。electron 应用对 wayland 支持较差，主要表现在中文输入法无法使用（目前无解），也就是说，在以前，你必须二选一：不缩放，使用 xwayland，拥有输入法功能；缩放，使用 wayland 后端，但输入法无了，只能用剪切板。而现在，你可以使用 xwayland 二者得兼。\n经过测试，edge、vscode、vscode-insider 完全正常，无模糊现象。\n而其他平台对 wayland 支持越来越好，奇怪的问题或许会少很多。\n一个小小的猜想 之前有提到，我在双显卡模式下，无法外接显示器，这是因为 HDMI 和 TypeC 接口都是连接在 nvidia 显卡上导致的，因此，无法独显直连的笔记本修改了 nvidia 后端和 grub 之后，或许可以使用外接屏（纯猜想，我就不折腾了）\n现在的 linux 发行版对于 wayland 的支持都做得还算不错了，但是有些问题还是需要自己解决，所以很想写一篇体验文 + 排坑文。\n我所使用的桌面环境为 plasma 5.25 版本，从 X11 切换到 wayland 十分方便\n1 pacman -S plasma-wayland-session plasma-wayland-protocols qt5-wayland qt6-wayland xorg-xwayland 装上这些个玩意之后，就可以在 sddm 中看见 plasma(wayland) 选项，选择之后就可以进入 wayland 的 kde.\n从 设置 - 关于本系统 中可以看到图形平台为 wayland.\nwayland 的优点 整体动画和特效很惊艳，没有了 X11 那种山寨的感觉，纯 wayland 环境下完全没有屏幕撕裂，实时帧率远高于 X11 环境（gnome 尤其明显，kde 不仔细感受倒是看不出来）。\nwayland 的缺点 软件兼容性一般，许多应用还没有做适配，实际是跑在 xwayland 上面的。 wine 兼容性不太好，wine-qq 容易出现拖影和花屏的情况（无解）。 报废了绝大多数录屏和截图软件，必须寻找适配 wayland的（建议 spectacle 和 obs-studio）。 不能全局缩放，会导致字体模糊发虚，没找到解决方法，但是在一些应用中，可以手动指定启动参数，使应用单独缩放，并且字体不会发虚（KDE5.26 已经解决）。 不再是 Client-Server 模式，天生远程功能差（可以用 wayvnc）。 整体来看，kde 在 wayland 下表现非常好，用作日常使用完全没有问题，但是最好在一开始，就先解决一些问题。\n界面字体太小（以解决，安装 KDE5.26 即可） X11 下往往通过全局缩放来解决，但 wayland 下我们只能退而求其次，通过修改字体大小来解决。\n根据我测试，字体修改之后，UI 也被跟着一起修改了，不会出现奇怪的视觉效果，体验还不错（比起发虚）。\n设置 - 外观 - 字体\n将字号调大为之前的 n 倍即可\n然后在 edge、chrome、vscode 等 electron 软件中单独设置界面缩放。\nAlacritty 无法显示输入法 我使用 Alacritty 终端，在 wayland 下只能输入英文，所以我们用 X 启动它，在 /usr/share/applications/Alacritty.desktop 中修改带 Exec 的行为\n1 2 3 TryExec=env WINIT_UNIX_BACKEND=x11 alacritty 4 Exec=env WINIT_UNIX_BACKEND=x11 alacritty 即可解决输入问题，其他终端类似。\n也可以更换支持 xwayland 和 wayland 的终端，例如 electerm 和 konsole，但这个软件性能太差，不推荐使用。\n7 月 22 日：我用回了 kde 自带的 konsole，慢点就慢点吧，还算好用。。。。\nwechat-uos 字体太小 electron 应用大多数默认跑在 xwayland，无法通过全局缩放方式解决（除非你能忍受字体发虚）在 KDE 中，已经不存在这个问题，x 应用能够单独设置缩放，绝对是个划时代功能。\n修改 /usr/share/applications/wechat-uos.desktop 中的 Exec 行\n1 3 Exec=wechat-uos --force-device-scale-factor=1.5 %U 可以缩放为之前的 1.5 倍\n部分软件可以实现缩放（迅雷也可以），部分不行（例如 steam），感觉基于 electron 开发的大多数都可行。\n我们也可以指定参数跑在 wayland 上（后文）\n6 月 20 日更新\nsteam 游戏问题 steam 上的一些游戏是支持 wayland 的，但也有个别不支持，比如 dota2\nsteam 允许为每个游戏单独指定运行环境\n右键 dota2-属性 - 启动选项\n填入\n1 SDL_VIDEODRIVER=x11 prime-run %COMMAND% -perfectworld SDL_VIDEODRIVER=x11：以 x11 运行游戏\nprime-run：使用独显运行（仅限 nvidia 双显卡，独显直连无需操作）\n%COMMAND% （启动命令）\n-perfectworld（进入国服）\n进入游戏之后没有自动全屏，需要根据你的快捷键设置（我是 F11）手动全屏\n题外话 steam 本身也是不支持 wayland 的，他本身就跑在 xwayland 上\n启动 steam 后输入命令\n1 xlsclients -a 可以看到输出有：\n1 2 3 \u0026lt;user\u0026gt; electron \u0026lt;user\u0026gt; microsoft-edge \u0026lt;user\u0026gt; steam steam、edge 和 icalingua++（就是那个 electron）都是跑在 xwayland 上的，wechat-uos 也是跑在 xwayland 上。\nsteam 的缩放功能 steam 无法使用系统的缩放比例，但它本身是可以缩放的，在 steam.desktop 文件的 Exec 行添加\n1 GDK_SCALE=2 就可以进行 2 倍缩放，目前只支持两倍，所以 1080p 的用户就忍忍吧，2k 可以 2 倍没有问题\n将 electron 应用跑在 wayland 上 很简单，加参数就行，仍然以 wechat-uos 为例\n1 sudo vim /usr/share/applications/wechat-uos.desktop 启动选项修改为 1 Exec=wechat-uos --enable-features=UseOzonePlatform --ozone-platform=wayland %U 注意，wayland 参数与前文缩放参数只能选一个，否则无法启动！！\nelectron12 及以后的程序几乎都可以这么设置\n发现一件有趣的事：wechat-uos 可以通过 ctrl+\u0026quot;+\u0026ldquo;进行放大，不必指定参数，直接冲 wayland 吧。\n又发现一件可悲的事，wayland 下的 electron 输入法直接无了，只能依靠剪切板，如何抉择，见仁见智了。\n听说等 wayland 支持 gtk4 之后，输入法问题将会解决。\n7 月 23 日 更新一波\n多屏显示问题（已解决） 在我的设备上 wayland-session 无法检测到第二块屏幕，无论是 kde 还是 gnome。切换到 x11 后均正常，但是我查了很多资料，都没能解决这个问题。。。所以欢迎已经解决这个问题的朋友教教我（求）。\n2022.10 月更新\n这是由于笔记本 HDMI 接口和 T-c 接口直连了 nvidia 显卡导致的解决方案在最上面已经给出，但目前只是猜想（不想拿主力机做实验了）\n腾讯会议问题 众所周知，腾讯会议不支持 wayland，可以用，但不能使用屏幕分享，解决方案：使用 obs 的虚拟摄像头连接屏幕，然后腾讯会议连摄像头即可\n安装 obs-studio 据说在 gnome 上有一个专门的录屏软件，叫做 **kooha，**不过我用的是 kde，这款软件在 kde 上是无法使用的，所以我们最好通过 OBS Studio 进行录屏。\n但是要确保你安装使用了 pipewire.\n1 pacman -S obs-studio 除此之外，还需要安装两个软件包\n1 pacman -S xdg-desktop-portal-wlr libpipewire02 如果不安装这两个软件包，在 obs 中是不会显示 屏幕采集 (pipewire) 选项的。\n安装好之后打开 obs\n![]((20221025)2022_年用 Wayland 开启 linux_EberyThingSay/v2-e32ea9af148b5d86a93ea0081d691ef2_b.jpg)\n然后就可以进行 屏幕录制，视频播放器我选择了 mpv，非常好用。\n1 pacman -S mpv 安装 v4l2loopback 虚拟摄像机功能 1 sudo pacman -S v4l2loopback 新版 obs 已经原生支持虚拟摄像机，所以无需过多配置\n重点是下面两个命令\n1 2 sudo modprobe --remove v4l2loopback sudo modprobe v4l2loopback devices=2 第一行是移除虚拟相机\n第二行是添加虚拟相机\n可以 alias 一下\n1 alias vcam=\u0026#39;sudo modprobe --remove v4l2loopback \u0026amp;\u0026amp; sudo modprobe v4l2loopback devices=2\u0026#39; 这样每次 vcam 一下就可以开启虚拟摄像机功能了\n如果点了虚拟摄像机没反应，vcam 一下就行了，这个摄像机将会出现在腾讯会议中，实现屏幕共享。\n其他直播软件，包括钉钉在内，只要可以连接摄像头，理论上都是可行的\n","date":"2022-10-25T16:32:54Z","permalink":"https://songguokunsgg.github.io/p/2022-%E5%B9%B4%E7%94%A8-wayland-%E5%BC%80%E5%90%AF-linux/","title":"2022 年，用 Wayland 开启 linux"},{"content":"引言 2 个月前初次体验了 syslab，感觉很多地方不完善，于是向官方提了一些建议，大概是如下内容\n没有 linux 版本 数据文件强制要求装在 D 盘，实际上蛮多人已经不分区了，不太友好 开箱即用体验不咋地 这次更新幅度挺大，所以又有了体验一下的兴趣。\n经过测试，安装的时候已经不需要存在 D 盘，而是直接装在了 C 盘（笑哭），单分区党可以使用了。Linux 版根据官方说法是需要向客服咨询，我认为可能是功能不完善或者出于商业的考虑，暂时不体验 Linux 版。我的系统上已经有了一套 julia 环境，为了防止冲突，我使用 win10 虚拟机进行体验。\n体验 启动界面如图所示，跟之前没有什么区别，但是加载速度比之前版本快了很多倍，之前版本我在实机都需要 10 分钟初始化，新版 2 分钟不到就完成了，第二次启动只需要不到 1 分钟就可以加载好所有的库和 LSP。由于基于 vscode 修改，可以安装 vscode 插件，所以上面的主题也可以自行搜刮，先搞个 one dark pro。\n自带了一些主题，也可以自行下载别的主题\n前版本的预加载需要手动修改 perloaded.jl 文件，现在直接勾选即可，点击高级配置也可以跳转到 perloaded.jl 修改界面。\n可以切换镜像站和配置启动参数，再也不需要 julia -t 5 XXX.jl 了。\n自动补全功能正常，无需任何配置，开箱即用，但我感觉有点延迟，没有我用 vscode ssh 到 arch 虚拟机流畅，可能是虚拟机或者 windows 的原因。\njulia 版本为 1.7.3，比最新的落后一个版本，不知道能不能升级。\n先整个 hello 看看，没有问题。\n绘图功能还挺方便的，还可以对图进行各种操作，有点 matlab 那味了。用原生 julia 的话需要添加 Plots 库才有这些功能，并且可视化功能较差。\njulia 的调试功能我一直不太会用，这里就不说明了。下面是一些其他功能的展示\n设置界面，你会用 vscode 就会用这个，上手门槛 0\n升级包，卡了有一阵子，原因是无法联网，需要在设置里面换源，换源之后一切正常，不过我发现原本有的同元自己的库没有了，只剩了中科大源，清华源等。我觉得这样挺好，能够更好的接轨 julia 自身的生态。\n可以看到自带的软件包比较丰富，并行计算，绘图，python 调用都已经支持，无需额外做过多配置，这一点挺好的，但是，有几个包编译失败了，也许，不升级才是更好的选择。\nemmm，升级之后好像出现了一些问题，建议开箱即用不要升级。\n下面来跑一个 CART 试试，先添加 DecisionTree、DataFrames 库，还有 MLBase 库等。\n然后使用编写好的 CART 代码进行测试，一顿操作猛如虎，终于跑起来了\n可以看到混淆矩阵和分类精度等信息。\n总结 优点 相比之前的版本进步很大（只针对 syslab），可以算是市面上最好的 Julia IDE 了，弥补了这方面的空缺。我尝试过多种 Julia 编辑方式，其中体验好的只有 vscode 和 neovim，编写非常舒适。但是他们的配置都挺复杂的，而且，vscode 具有通用性，插件装多了还挺慢的，neovim 对于图形的显示不太友好，必须用文件浏览器查看，所以，在此之前我都选择用 vscode remote 我的虚拟机使用，体验尚可（linux 编译速度比 windows 快很多）。而 syslab 我认为完全可以当做一款 IDE 使用了，无需配置开箱即用，希望能促进新人入坑。 相比 matlab，功能方面还有很大的欠缺（toolbox 等），加载速度不及 matlab，但颜值和编辑器完爆 matlab。vscode 的主题可以提供多样的 UI 样式，vim 插件等可以提供多样的输入方式，matlab 则较为固定，只提供了一套 emacs 的快捷键。（但是，我觉得 syslab 右边的工作区真挺丑的，希望改改。。。） 缺点 加载速度真的慢，不过这有 julia 语言本身的原因，估计是没办法了。 较为重量级，安装的时候就把所有模块都安装了，但实际上很多是挺冗余的，如果能像 matlab 那样选模块装就好了。考虑到还要和其他产品联动，估计也有点困难（安装配置好后 6.5G，暂时也不需要考虑这个问题）。 没有提供 julia 版本升级的方式，估计他的本意是安装即用，并不考虑升级包什么的。 体验得比较草率。。。总之，对于懒人而言，我觉得 syslab 是目前最好的 IDE，直接上手就行，对于爱折腾的或者硬盘空间吃紧的，这个软件并不是一个好的选择。目前这款软件替代 matlab 的希望为 0，但是单纯的把它看成一个 julia 的 IDE 的话，是非常优秀的，你值得拥有。\n","date":"2022-09-21T21:00:00Z","permalink":"https://songguokunsgg.github.io/p/%E5%90%8C%E5%85%83-syslab-2022b-%E7%89%88%E6%9C%AC%E4%BD%93%E9%AA%8C/","title":"同元 syslab 2022b 版本体验"},{"content":"此方法仅适用于 plasma 5.24 及之前的版本，今天是 2022 年 6 月 17 日，最新的 Plasma 5.25.0 已经无法使用这个方法，请不要再继续！！如何查看 plasma 版本：\n1 2 pacman -S neofetch neofetch 输出内容中即可看见 plasma 版本\n5.18 内核滚挂之后，我的 i3wm 也跟着挂了，不过所幸我在 gitee 上有配置备份。但之后的一段时间用了 KDE+KWin 的平铺脚本，最开始的体验还不错，但随着时间的推移，一些 bug 开始暴露出来，不禁让我怀念起 i3wm，但是 i3 也有一些显示上的 bug……没办法，我觉得在 KDE 上使用 i3 也许是个不错的选择。\n判断你是否需要 KDE+i3 适合 i3 的人 喜欢平铺式窗口管理器 喜欢极简桌面 对效率要求大于美化 不追求边边角角的功能配置 年轻，有精力折腾 适合 KDE 的人 不爱折腾 不喜欢写配置文件 偶尔用用，保留了 win 的使用习惯 不爱用命令行 以上均为我个人瞎 bb，请勿以此人身攻击\nKDE+i3 你将获得 KDE 的全功能（KWin 除外：废话） 完善的平铺式窗口管理器 一些 bug（难免的） 比纯 i3 大得多的内存占用 如果你觉得可以接受，就可以进行下一步了。这里需要说明一下，今天时间为 2022 年 6 月 7 日，高考的第一天，plasma 版本为 5.24.5，如果看到这里你不知道以下名词的概念和区别，请不要再继续\n1 plasma kde WM DE 滚挂 平铺 konsole vim 安装 i3 所需的软件 KDE 已经自带了不少的系统软件，但是 KDE 的特效合成器与壁纸管理与 i3 是独立的，所以我们需要针对 i3 进行单独配置。主要为以下三个\n1 sudo pacman -S i3 picom feh alacritty 其中 picom 为特效管理器，管理 i3 的窗口动画，透明等等，feh 则负责管理 i3 的壁纸\n其他的软件，例如 wifi 管理，蓝牙，剪切板，应用启动器都在 KDE 中带有了，无需额外配置。还有一个重要的东西是终端，我不喜欢 KDE 的终端 konsole，所以以 alacritty 为例.（konsole 在 i3 中不一定能用，推荐更换 i3 常用的终端，例如 alacritty、kitty、st 等）\n还有，选 i3 仓库的时候选 i3-wm , 别选 i3-gaps 否则屏幕周边会有大边框很难看。\n1 2 3 4 5 :: 在组 i3 中有 5 成员： :: 软件仓库 community 1) i3-gaps 2) i3-wm 3) i3blocks 4) i3lock 5) i3status 输入某个选择 ( 默认=全部选定 ):2 将 KDE 的 WM 从 KWin 更换为 i3 添加自启动脚本（适用某个用户） 在某个位置创建一个 sh 脚本（以/usr/local/）为例\n1 vim /usr/local/kde-i3.sh 加入\n1 2 #!/bin/sh export KDEWM=/usr/bin/i3 添加执行权限\n1 sudo chmod +x /usr/local/kde-i3.sh 意为将 KDEWM 这个变量设为 /usr/bin/i3\n然后将这个脚本添加到 KDE 的开机启动中：\n设置—开机与关机—自动启动\n然后添加一个软链接\n1 2 cd $HOME/.config/plasma-workspace/env sudo ln -s /usr/local/kde-i3.sh ./ 当然也可以一步到位\n1 sudo ln -s /usr/local/kde-i3.sh $HOME/.config/plasma-workspace/env/ 根据官方的说法，这个软链接是为了让这个脚本在会话启动之前执行，但设置里面不提供这个选项了，所以只能通过软链接的方式进行。\n添加 XSession 会话（用于所有用户） 1 cd /usr/share/xsessions 在不同的发行版中，XSession 文件位置有所不同，需要根据实际情况确定，Arch 下面是这个路径。复制一份 plasma.desktop 文件为 plasma-i3.desktop\n1 cp plasma.desktop plasma-i3.desktop 打开 plasma-i3.desktop\n1 vim plasma-i3.desktop 最顶上有如下内容\n1 2 3 4 5 6 7 8 9 10 1 [Desktop Entry] 2 Type=XSession 3 Exec=/usr/bin/startplasma-x11 4 TryExec=/usr/bin/startplasma-x11 5 DesktopNames=KDE 6 Name=Plasma (X11) 7 Name[ar]=ﺏﻻﺰﻣﺍ (ﺎﻜﺳ ) 8 Name[ast]=Plasma (X11) 9 Name[az]=Plasma (X11) 10 Name[ca]=Plasma (X11) 需要注意的是 Exec 和 TryExec 所在的两行，将它们修改为\n1 2 3 Exec=/usr/share/xsessions/start.sh 4 TryExec=/usr/share/xsessions/start.sh 然后编辑 start.sh，加入如下内容\n1 2 3 #!/bin/sh export KDEWM=/usr/bin/i3 /usr/bin/startplasma-x11 添加执行权限\n1 sudo chmod +x start.sh 配置 i3 这一步比较复杂，我很想把我的配置贴出来，但是……\ngitee 审核不通过！！！（因为我壁纸也放在配置文件夹，全是二次元美少女）\n所以这里的话我手动贴一些配置……\ni3 的配置文件位于 ~/.config/i3/config\n配置 config 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 # i3 配置文件(sukipai) #################### # i3wm 基础设置 #################### # 基础按键设置 set $mod Mod4 set $left j set $right l set $up i set $down k # 标题字体 font pango: Source Code Pro 12 # Title format title_align center # Hide borders hide_edge_borders none default_border none default_floating_border none # default windows layout workspace_layout tabbed # i3 gaps # gaps inner i3 # reload the configuration file bindsym $mod+Shift+c reload # restart i3 inplace (can be used to upgrade i3) bindsym $mod+Shift+r restart # exit i3 (logs you out of your X session) # bindsym Mod4+Shift+e exec \u0026#34;i3-nagbar -t warning -f \u0026#39;pango: Microsoft YaHei 12\u0026#39; -m \u0026#39;Do you really want to exit i3?\u0026#39; -b \u0026#39;Yes, exit i3\u0026#39; \u0026#39;i3-msg exit\u0026#39;\u0026#34; # Theme colors # gruvbox theme # class border backgr. text indicator client.focused #3c3836 #32302f #fabd2f #fabd2f client.focused_inactive #3c3836 #504945 #d5c4a1 #504945 client.unfocused #3c3836 #504945 #d5c4a1 #504945 client.urgent #7c6f64 #fabd2f #3c3836 #fabd2f 这一部分主要为外观，说几点：\nMod4 指 win 键 exit i3 的配置建议注释掉，有 kde 在，我们不需要这个功能，反而给自己找麻烦。 配置按键 仍然是在 config\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 ############# # 快捷键 ############# ## application binding # start a terminal bindsym $mod+Return exec --no-startup-id alacritty ## i3wm binding # Use Mouse+$mod to drag floating windows floating_modifier $mod # kill focused window bindsym $mod+Shift+q kill # change focus bindsym $mod+$left focus left bindsym $mod+$down focus down bindsym $mod+$up focus up bindsym $mod+$right focus right # alternatively, you can use the cursor keys: bindsym $mod+Left focus left bindsym $mod+Down focus down bindsym $mod+Up focus up bindsym $mod+Right focus right # move focused window bindsym $mod+Shift+$left move left bindsym $mod+Shift+$dowm move down bindsym $mod+Shift+$up move up bindsym $mod+Shift+$right move right # alternatively, you can use the cursor keys: bindsym $mod+Shift+Left move left bindsym $mod+Shift+Down move down bindsym $mod+Shift+Up move up bindsym $mod+Shift+Right move right # split in horizontal orientation bindsym $mod+h split h # split in vertical orientation bindsym $mod+v split v # enter fullscreen mode for the focused container bindsym $mod+f fullscreen toggle # change container layout (stacked, tabbed, toggle split) bindsym $mod+s layout stacking bindsym $mod+w layout tabbed bindsym $mod+e layout toggle split # toggle tiling / floating bindsym $mod+Shift+space floating toggle # change focus between tiling / floating windows bindsym $mod+space focus mode_toggle # focus the parent container bindsym $mod+a focus parent #################### # Workspace behavier #################### # set workspace set $ws1 \u0026#34;1\u0026#34; set $ws2 \u0026#34;2\u0026#34; set $ws3 \u0026#34;3\u0026#34; set $ws4 \u0026#34;4\u0026#34; set $ws5 \u0026#34;5\u0026#34; set $ws6 \u0026#34;6\u0026#34; set $ws7 \u0026#34;7\u0026#34; set $ws8 \u0026#34;8\u0026#34; set $ws9 \u0026#34;9\u0026#34; set $ws10 \u0026#34;10\u0026#34; # switch to workspace bindsym $mod+1 workspace number $ws1 bindsym $mod+2 workspace number $ws2 bindsym $mod+3 workspace number $ws3 bindsym $mod+4 workspace number $ws4 bindsym $mod+5 workspace number $ws5 bindsym $mod+6 workspace number $ws6 bindsym $mod+7 workspace number $ws7 bindsym $mod+8 workspace number $ws8 bindsym $mod+9 workspace number $ws9 bindsym $mod+0 workspace number $ws10 # move focused container to workspace bindsym $mod+Shift+1 move container to workspace number $ws1 bindsym $mod+Shift+2 move container to workspace number $ws2 bindsym $mod+Shift+3 move container to workspace number $ws3 bindsym $mod+Shift+4 move container to workspace number $ws4 bindsym $mod+Shift+5 move container to workspace number $ws5 bindsym $mod+Shift+6 move container to workspace number $ws6 bindsym $mod+Shift+7 move container to workspace number $ws7 bindsym $mod+Shift+8 move container to workspace number $ws8 bindsym $mod+Shift+9 move container to workspace number $ws9 bindsym $mod+Shift+0 move container to workspace number $ws10 这一部分就不多说了，基本都是这样配置的。\n配置 picom 和 feh picom 还是 config……\n1 exec --no-startup-id picom --config ~/.config/i3/picom/picom.conf -b --experimental-backends 意思是自启动 picom 并读取位于 ~/.config/i3/picom/picom.conf 的配置文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 # Backend # glx mode have more performance, prevent tearing backend = \u0026#34;glx\u0026#34;; # GLX backend glx-no-stencil = true; glx-copy-from-front = false; glx-no-rebind-pixmap = true; glx-swap-method = -1; # prevent flickering after wake up glx-use-copysubbuffer-mesa = true; # Shadows shadow = true; shadow-radius = 50; shadow-offset-x = -40; shadow-offset-y = -40; shadow-opacity = 0.8; shadow-exclude = [ \u0026#34;class_g = \u0026#39;Dunst\u0026#39;\u0026#34;, \u0026#34;class_g ?= \u0026#39;polybar\u0026#39;\u0026#34;, \u0026#34;class_g ?= \u0026#39;fcitx\u0026#39;\u0026#34;, \u0026#34;class_g ?= \u0026#39;fcitx5\u0026#39;\u0026#34;, \u0026#34;class_g ?= \u0026#39;rofi\u0026#39;\u0026#34;, \u0026#34;class_g = \u0026#39;i3-frame\u0026#39;\u0026#34;, \u0026#34;window_type = \u0026#39;dnd\u0026#39;\u0026#34;, \u0026#34;window_type = \u0026#39;tooltip\u0026#39;\u0026#34;, \u0026#34;_GTK_FRAME_EXTENTS@:c\u0026#34;, \u0026#34;_NET_WM_STATE@:32a *= \u0026#39;_NET_WM_STATE_HIDDEN\u0026#39;\u0026#34;, ]; shadow-ignore-shaped = true; # Opacity active-opacity = 0.93; inactive-opacity = 0.85; frame-opacity = 1; inactive-opacity-override = false; # to show inactive windows inactive-dim = 0.2; opacity-rule = [ \u0026#34;75:class_g = \u0026#39;Dunst\u0026#39;\u0026#34;, \u0026#34;75:class_g = \u0026#39;i3-frame\u0026#39;\u0026#34;, # fix: i3 titlebar \u0026#34;99:class_g = \u0026#39;Vmware\u0026#39;\u0026#34;, \u0026#34;99:class_g = \u0026#39;Shotwell\u0026#39;\u0026#34;, \u0026#34;99:class_g = \u0026#39;Google-chrome\u0026#39;\u0026#34;, ]; # Fading fading = true; fade-delta = 10; fade-in-step = 0.09; fade-out-step = 0.09; fade-exclude = [ # \u0026#34;class_g = \u0026#39;Dunst\u0026#39;\u0026#34;, # \u0026#34;class_g ?= \u0026#39;Vlc\u0026#39;\u0026#34;, # \u0026#34;class_g ?= \u0026#39;Fcitx\u0026#39;\u0026#34;, # \u0026#34;class_g ?= \u0026#39;fcitx\u0026#39;\u0026#34;, # \u0026#34;class_g ?= \u0026#39;Fcitx5\u0026#39;\u0026#34;, # \u0026#34;class_g ?= \u0026#39;fcitx5\u0026#39;\u0026#34;, # \u0026#34;class_g ?= \u0026#39;pycharm\u0026#39;\u0026#34;, # \u0026#34;window_type = \u0026#39;dnd\u0026#39;\u0026#34;, # \u0026#34;window_type = \u0026#39;tooltip\u0026#39;\u0026#34;, # \u0026#34;_GTK_FRAME_EXTENTS@:c\u0026#34;, ]; # Other mark-wmwin-focused = true; mark-ovredir-focused = true; use-ewmh-active-win = true; detect-rounded-corners = true; detect-client-opacity = true; vsync = true; dbe = false; unredir-if-possible = false; focus-exclude = [ ]; detect-transient = true; detect-client-leader = true; # Window type settings wintypes: { tooltip = { fade = true; shadow = true; opacity = 0.9; focus = true;}; dock = { shadow = false; } dnd = { shadow = false; } popup_menu = { opacity = 0.9; } dropdown_menu = { opacity = 0.9; } }; # XSync xrender-sync-fence = true; 复制粘贴就行，你也可以自行更改，这个配置还算易读。\nfeh feh 一次只能设置一张图片，还是 config\n1 feh --bg-fill --no-fehbg --randomize ~/.config/i3/wallpapers/src/1.png ~/.config/i3/wallpapers/src/1.png 为你的壁纸路径\n但我显然不满足于一张图片，我想要切换，所以可以写个脚本，这里我选择 lua 实现，你也可以选择写 bash 脚本\n1 vim ~/.config/i3/wallpapers/autochange.lua 内容如下\n1 2 3 4 5 6 7 8 9 function sleep(n) os.execute(\u0026#34;sleep \u0026#34; .. n) end while (true) do os.execute(\u0026#34;feh --bg-fill --no-fehbg --randomize ~/.config/i3/wallpapers/src/*\u0026#34;) sleep(900) end 前提是你得装了 lua\n1 pacman -S lua 然后每过 15 分钟就会在 ~/.config/i3/wallpapers/src/* 下随机选取一张壁纸。\n重启 恭喜你，不出意外的话，已经可以使用了。\n","date":"2022-06-19T15:38:08Z","permalink":"https://songguokunsgg.github.io/p/kde-i3-%E9%85%8D%E7%BD%AE%E5%85%A8%E5%8A%9F%E8%83%BD%E5%B9%B3%E9%93%BA%E5%BC%8F%E6%A1%8C%E9%9D%A2arch/","title":"KDE+i3 配置全功能平铺式桌面（Arch）"},{"content":"docker 最常用的打包命令是 commit，但是这样的打包方式是增量式的（类似 git），也就是说，这个镜像只会越来越大，不会减小，打包次数多了之后，镜像会变得非常大，所以我们可以采用 tar 命令打包基础镜像的方式进行解决。\n这样打包后的镜像会将文字编码更改为 POSIX，导致中文无法显示，因此需要将编码更改为 en_US.utf8，因此需要在容器中提前进行如下两步（archlinux 为例）。\n在/etc/profile 中加入以下语句 1 export LANG=en_US.utf8 在 ~/.zshrc 中加入 1 source /etc/profile 就可以永久解决该问题\n进行清理（根据实际情况） 1 clean 进入根目录（\u0026ldquo;cd /\u0026quot;）打包 1 tar --exclude=./proc --exclude=./sys --exclude=./home/jupyter-file -cvf /home/jupyter-file/base_img.tar . \u0026ndash;exclude 为排除某个目录\n意思是将除了/proc /sys /home 之外的目录打包为 base_img.tar，放置在某个目录下 5. 导入包\n1 cat base_img.tar | docker import - imagename:latest tar 的大小就是镜像的大小，注意里面的排除目录和镜像存放目录的合理选择。\n","date":"2022-06-04T12:31:22Z","permalink":"https://songguokunsgg.github.io/p/%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85-docker-%E9%95%9C%E5%83%8F%E5%87%8F%E5%B0%91%E9%95%9C%E5%83%8F%E4%BD%93%E7%A7%AF/","title":"重新打包 docker 镜像，减少镜像体积"},{"content":"2022 年 12 月 8 日小更新一波\n增加了 i3 的一些配置说明 2022 年 11 月 17 日小更新一波\n增加了一些双系统相关说明 增加了终端字体推荐 修改了一些错误内容 其实 arch 的安装不是一件很难的事情，但是随着时间的推移会出现一些坑，所以我记录一下安装过程。\n参考文章：\nhttps://zhuanlan.zhihu.com/p/478075538本文分为三个部分进行讲解，第一部分是安装整个系统（不带图形界面），第二部分是安装桌面或者窗口管理器，第三部分是进行一些简单配置，第四部分是一些简单总结。\n本文讲解虽然较为详细，但是不建议纯小白尝试（跟着来也没啥问题。。。）建议你能够做对下列名词解释再继续：\n1 vim neovim nvim NVME SATA BIOS UEFI kernel Nvidia console bash :q ^X ^C 如果上述单词中 80% 以上不知道什么意思，建议左转 ubuntu 或者 deepin，对 linux 稍作了解之后再尝试 Arch。\n1. 系统安装 1.1 进入 live 系统 其实这个 live 系统和 ubuntu 或者 manjaro 的 live 系统是完全一致的，只是有没有图形界面，以及系统安装程序的区别，在 arch 的 live 系统中，需要我们手动输入命令进行操作。\n制作启动盘的过程就不详细说了，建议使用 ventoy 进行制作（我们以 ventoy 为例），避免重复格式化 U 盘的问题，当然，使用 rufus 也是可以的，不推荐使用UltraISO，容易出问题。 确认系统的引导方式是 UEFI,，如果不是，请进入 BIOS 开启。 插入 U 盘，重启电脑，根据电脑型号按相应的键盘按键进入启动引导选择，选择刚刚 USB 启动器。进入 ventoy 界面，选取你下载的 ArchLinux 安装镜像（*.iso），进入 Arch 安装界面。 选择画面中的第一项（Arch Linuxinstallmedium(x86_64,UEFI)），按回车键，待加载完成后，进入 ArchLinux 的 Live 环境。如果出现“root@archiso~#”，说明启动成功，已经进入终端。 验证是否为 UEFI 启动（如果你确定已经是 UEFI 的话可以略过）\n输入“ls /sys/firmware/efi/efivars”\n输入这一行代码后，如果反馈目录不存在，则说明电脑没有以 UEFI 启动，需要重新执行步骤 3，不要继续，因为没有 UEFI 启动在后面写入引导的时候几乎绝对报错。如果有输出，说明电脑是以 UEFI 启动的。 1.2 联网 arch 的系统镜像只有 800m，并没有包含所有的系统文件，所以网络是必要的。 1.2.1 电脑有 wifi 的情况，跟参考文章中操作一致 输入“iwctl”进入 iwd 模式，也就是终端最前方有“[iwd]#”字样。 在 iwd 模式下输入“device list”，按回车（按回车是基本操作，所以下文省略），查询电脑的网卡。记住你的网卡号，一般是 wlan0 或者 wlan1（本文以多数情况 wlan0 为例） 在 iwd 模式下输入“station wlan0 scan”，然后再输入“station wlan0 get-networks”，显示周围的 wifi 的 ssid 扫描结果。（如果你知道自己要连接的 wifi 名称，可以跳过这一步） 在 iwd 模式下输入“station wlan0 connect ”，如果是加密的 wifi，系统会提示输入 wifi 密码，如无意外，就连上网了。 验证联网。按 ctrl+c 退出 iwd 模式，回到[root@archiso~]模式，输入“ping baidu.com”，如果有返回数据，说明已经连上网了。 1.2.2 电脑没有 wifi 的情况 这种情况下，usb 无线网卡一般是用不了的，因为 arch 的 iso 中不带有驱动，而网店里的免驱网卡驱动需要在 AUR 里才能找到，因此，只能考虑 USB 共享手机网络，或者连接网线（这个就不多说了）。 （以 iphone 为例）选一根质量好的线，连上电脑的 usb 口即可。 此时手机上会让你信任该设备，信任即可。 打开热点，输入“ping baidu.com”，如果有返回数据，说明已经连上网了。 iphone 设备，以及 usb 接口的驱动在 live 系统中是存在的，所以非常简单，安卓设备也应该是类似的方法。但是有一点大坑需要注意，usb 接口驱动需要在后续所安装的系统中单独安装，否则，重启之后是连不上手机的。\n1 pacman -S usbmuxd 1.2.3 更新时间 1 timedatectl set-ntp true 1.3 磁盘分区 以前的 arch 需要使用 fdisk 命令进行分区，劝退了不少人，现在提供了更人性化的 cfdisk 工具进行分区，操作简单很多了，操作过程与参考文章类似。\n输入“fdisk -l”，查看硬盘列表，SATA 硬盘或者机械硬盘是/dev/sdX，nvme 固态硬盘则显示/dev/nvme0nX。 认准你想作为系统盘的硬盘（sda 的例子参考文章已经给出，所以我以/dev/nvme0n1 为例），输入“cfdisk /dev/nvme0n1”进入伪图形界面进行分区。 参考划分大小如下 分区 挂载点 我划分的大小，仅供参考 /dev/nvme0n1p1 / 100g（软件包都会装在根目录，建议大一点） /dev/nvme0n1p2 /boot/efi 500m（不要低于 500m） /dev/nvme0n1p3 /home 60g（看个人情况，我的文件多为代码，占用空间较小） /dev/nvme0n1p4 swap 24g（交换空间，即虚拟内存） 注意：\nboot 分区一定是挂载到/boot/efi，后续挂载的时候会再提到。 home 分区在重装系统的时候是可以复用的，建议单独分区以避免丢失文件。 swap 视自己内存情况而定，一般 \u0026lt;= 电脑内存（我内存 16g，分了 24g swap 好像也没啥） 1.4 分区格式化 依次输入下面的命令：（需要确认时输入“y”）\n1 2 3 4 5 mkfs.fat -F32 /dev/nvme0n1p2 (boot分区必须使用fat32格式) mkfs.ext4 /dev/nvme0n1p1 (/ 和 /home 一般使用ext4分区格式) mkswap /dev/nvme0n1p4 (swap分区使用swap格式) swapon /dev/nvme0n1p4 (激活swap分区，不激活不会使用这部分空间) mkfs.ext4 /dev/nvme0n1p3 (/home分区) 格式化结束之后，使用 lsblk 命令查看分区是否划分以及格式化正确\n1 2 3 4 5 nvme0n1 259:0 0 476.9G 0 disk ├─nvme0n1p1 259:1 0 59.3G 0 part ├─nvme0n1p2 259:2 0 24G 0 part ├─nvme0n1p3 259:3 0 117.9G 0 part ├─nvme0n1p4 259:4 0 477M 0 part 我这里跟例子分区顺序不太一样，请根据自己实际情况确定。\n1.5 分区挂载 基本和参考文章中一样，但是他犯了一个严重错误，boot 分区一定是挂载到/boot/efi，，而不是/efi\n依次输入下面的命令：\n1 2 3 4 5 mount /dev/nvme0n1p1 /mnt (将 / 分区挂载到 live系统中的 /mnt 目录，此时 /mnt 目录就是我们所安装系统的 / 目录) mkdir -p /mnt/boot/efi (在新系统的 / 目录中新建 efi 文件夹，-p 参数表示递归创建) mount /dev/nvme0n1p2 /mnt/boot/efi (将 boot 分区挂载到efi文件夹) mkdir /mnt/home (同理，创建home目录) mount /dev/nvme0n1p3 /mnt/home (将home分区挂载到home目录) 挂载完成之后会变成这样（根据你的实际分区情况显示）\n1 2 3 4 5 nvme0n1 259:0 0 476.9G 0 disk ├─nvme0n1p1 259:1 0 59.3G 0 part /home ├─nvme0n1p2 259:2 0 24G 0 part [SWAP] ├─nvme0n1p3 259:3 0 117.9G 0 part / ├─nvme0n1p4 259:4 0 477M 0 part /boot/efi 1.6 安装必要的包，并在系统中写入分区表 跟参考文章类似，但是，如果你使用 usb 分享网络，要多加一个 usbmuxd 包。\n换源：很重要，不然等到天荒地老。方法很多，可以直接修改/etc/pacman.d/mirrorlist 文件，也可以直接\n1 reflector --country China --age 72 --sort rate --protocol https --save /etc/pacman.d/mirrorlist 解决问题，我一般还是手动换，即替换/etc/pacman.d/mirrorlist 中内容为（任选其一，建议第一个）：\n1 2 3 4 5 6 7 8 9 10 Server = https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.dgut.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.nju.edu.cn/archlinux/$repo/os/$arch Server = https://mirror.redrock.team/archlinux/$repo/os/$arch Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch 安装基本系统（包括 linux 内核以及基础软件包），这里相比参考文章多给了几个软件包，因为这些对用户来说还是比较重要的，有几种内核可以安装：\n普通内核 (linux linux-headers) lts 稳定版内核 (linux-lts linux-lts-headers) zen 内核 (linux-zen,linux-zen-headers)（高性能） 按自己的需求安装就可以\n这里需要提前说一下，linux-zen 内核不支持 nvidia 显卡，有这个需求的就别装了，如果是原版 linux 内核的话，就要做好随时滚挂的准备，最近的 5.18 内核更新就会导致 nvidia-5.15 版本驱动失效无法开机（需要在启动选项中添加 ibt=off），如果你希望稳定使用，就选择 linux-lts 内核和 linux-lts-headers，并安装相应的 nvidia-lts 驱动（后面会有详细说明），不过不用太担心，即便是系统安装完成，你也可以随时切换自己想要的内核版本。\n1 2 3 pacstrap /mnt base linux linux-headers linux-firmware base-devel （usbmuxd） 或者 pacstrap /mnt base linux-lts linux-lts-headers linux-firmware base-devel （usbmuxd） 写入分区表：\n1 genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 开机的时候，系统按照 fstab 文件的分区信息进行挂载，你也可以修改 fstab 以达到自动挂载某个磁盘的功能，例如\n1 UUID=86ABB6FEAA91229C /home/XXX/Documents ntfs-3g defaults 0 0 就可以把 UUID 为 86ABB6FEAA91229C 的 ntfs 分区挂载到 /home/XXX/Documents 下面（PS：双系统用这个方式挂载 win 盘很爽\n然后使用如下命令进入新系统，进入后会显示[root@archiso /]# 。\n1 arch-chroot /mnt 1.7 新系统的配置 1.7.1 安装必要软件包 参考文章给出的命令如下：\n1 pacman -S vim iwd networkmanager ttf-dejavu sudo bluez 我解释一下这都是干嘛的。\nvim：文本编辑器，可替代有 neovim，nano，其中 nano 对新手比较友好，推荐经验较少或者刚入坑的同志使用。 iwd,networkmanager：用 iwd 作为 nm 的 backend 进行使用。（但是我这样使用在 i3 下会出现不少问题，比如网络经常自动断，且短时间无法重连等 (KDE 也会出现，但感觉没有 i3 频繁，我觉得可能是命令行的原因，安装完成之后卸载掉 networkmanager 问题解决。另外，如果需要使用网线和 usb 网络共享，networkmanager 必须安装，最好加装一个 dhcpcd） ttf-dejavu：开源字体 sudo：用于非 root 用户暂时获取 root 权限 bluez：蓝牙模块 usbmuxd：参考文章没给这个。现在系统中使用的网络来自于 live 系统，不装这个的话，重启是无法通过 usb 连接手机共享网络的，根据个人情况选择，建议安装。 wqy-zenhei：中文字体，避免进入系统后无法显示中 dhcpcd：连网线用 ntfs-3g：挂载 ntfs 磁盘需要 我最后选择这样安装，所以后续以 vim 为例。\n1 pacman -S neovim iwd ttf-dejavu sudo bluez usbmuxd networkmanager dhcpcd wqy-zenhei ntfs-3g neovim 和 vim 的启动命令是不一样的，neovim 为“nvim”，vim 是“vim”我一般会通过软链接\n1 2 ln -s /bin/nvim /bin/vim ln -s /bin/nvim /bin/vi 将他们软链接起来看，这样的话，通过“vim”“vi”命令也可以启动 neovim 了。\nnano 的启动命令是“nano”\n1.7.2 一通设置 这一部分都是差不多的，也没啥坑。\n设置时区和时间 依次输入下面的命令：\n1 2 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime (设置时区为上海) hwclock --systohc 设置语言 输入“vim /etc/locale.gen”，删除【en_US.UTF-8】和【zh_CN.UTF-8】两项前面的“#”，保存。（如果有其他语言需求也可以自行取消注释，比如台湾地区和港澳地区）\n（vim 的光标移动、删除和保存退出等命令请另行百度），当然，也可以用 nano\n输入“locale-gen”，再输入\n1 echo LANG=en_US.UTF-8 \u0026gt;\u0026gt; /etc/locale.conf ，意思是将 \u0026ldquo;en_US.UTF-8\u0026rdquo; 追加到 /etc/locale.conf 文件里面，这里不建议使用\n1 echo LANG=zh_CN.UTF-8 \u0026gt;\u0026gt; /etc/locale.conf 这样会使系统语言成为中文，从而导致 tty 显示中文，但是 tty 本身是不支持中文的，所以会乱码。而中文的问题，一般会通过修改 ~/.xprofile（DE）或者 ~/.xinitrc（WM）进行解决\n设置 root 用户的密码 输入“passwd”，再输入密码，密码不会有任何显示，但是是输进去了的。\n设置主机名（系统名） 输入“echo {你要设置的主机名，随便一个，不要大括号，不要中文名} \u0026raquo; /etc/hostname”，例如\n1 echo sukipai \u0026gt;\u0026gt; /etc/hostname 主机名会显示在 bash 中，例如\n1 [sukipai@sukipai ~]$ 意为我用 sukipai(前) 用户登陆了名为 sukipai(后) 的主机。\n设置网络 输入“vim /etc/hosts”，把下面的文字打进去，保存（以sukipai为例）。（vim的光标移动、删除和保存退出等命令请另行百度。）\n1 2 3 127.0.0.1 localhost ::1 localhost 127.0.1.1 sukipai.localdomain sukipai 1.7.3 安装引导并重启系统 与参考文章中安装引导有一些差异，输入下面的命令：\n1 2 pacman -S grub efibootmgr (安装grub) grub-install /dev/nvme0n1 (超级大坑，注意选择的是整个硬盘，而不是boot分区) 一定要注意这个地方，是安装在整个磁盘，而不是 boot 分区。\n创建 grub 配置文件\n1 grub-mkconfig -o /boot/grub/grub.cfg 重启系统（请再次确认你是否需要，且已经安装 usbmuxd）：\n1 2 3 exit (退出新系统，回到live系统) umount -R /mnt (递归卸载 /mnt 中的磁盘) reboot (重启) 重启之后登录到 root 账户，密码就是你之前设置的。\n1.8 打开联网服务和蓝牙 首先激活服务 1 2 3 4 5 6 7 systemctl start iwd.service systemctl enable iwd.service systemctl start systemd-resolved.service systemctl enable systemd-resolved.service systemctl enable bluetooth.service systemctl enable NetworkManager systemctl enable dhcpcd 配置网络连接和 DNS 输入“vim /etc/iwd/main.conf”，把下面的文字打进去，保存。\n1 2 3 [General] EnableNetworkConfiguration=true NameResolvingService=systemd 安装了 netwokmanager 的配置 如果安装了 networkmanager，则需要将 backend 服务修改为 iwd，总体上 iwd 比 wpa 好用很多。\n输入“vim /etc/NetworkManager/NetworkManager.conf”，把下面的文字打进去，保存。（vim的光标移动、删除和保存退出等命令请另行百度。）\n1 2 [device] wifi.backend=iwd 如果只安装 networkmanager 而不安装 iwd 的话，是不需要这一步的，nm 会使用默认的 wpa。（猜测）\n然后重启，并安装先前的联网方法进行联网，并更换 mirrorlist 中的软件源 (如果前面更换过了，这里就不用更换了)，这里不再赘述。\n1.9 安装一些硬件设备 CPU 编码 1 2 pacman -S intel-ucode (intel的cpu装这个) pacman -S amd-ucode (amd的cpu装这个) 注意是 CPU 编码，不是显卡\n显卡驱动 1 2 3 pacman -S xf86-video-intel（Intel核心显卡驱动，用Intel核显就装，否则不用装） pacman -S mesa nvidia(-lts) nvidia-settings nvidia-dkms nvidia-utils nvidia-prime（nvidia显卡驱动，用nvidia显卡就装，否则不用装） pacman -S xf86-video-amdgpu (AMD显卡驱动，用amd显卡的就装) 这里举两个例子，我的笔记本，i7-11 代，搭配 intel 核显以及 3050 显卡，所以安装前两个。我的台式机，e3-1230 垃圾 CPU，搭配 HD6950 显卡，所以装第三个。nvidia-dkms 与 nvidia-lts 不兼容，如果装 lts 驱动的话无需安装 dkms。\n注意：nvidia 驱动的安装与前面选择的内核有关，如果你安装的是 linux-lts 内核，那么需要将 nvidia 更换为 nvidia-lts，linux-zen 不支持 nvidia 显卡（务必对号入座），如果你选择安装新内核，则需要修改一下 ibt=off，否则无法进入系统\n声卡驱动 在我的设备上，只需这样安装\n1 pacman -S pipewire (alsa-utils) pipewire-pulse pipewire-jack pipewire-alsa 就可以了，使用参考文章中的 pulseaudio 也是可以的。alsa-utils 用于终端下的音量调节，如果你使用 KDE，Gnome 等桌面环境，可以不装这个。\n使用 pulseaudio 的话，需要进行一下配置（我没试过），pipewire 则不用：\n输入“vim /etc/modprobe.d/disable_dmic.conf”，把下面的文字打进去，保存。\n1 options snd_hda_intel dmic_detect=0 1.10 创建一个用户 仍然以 sukipai 为例\n1 2 useradd -m -G wheel -s /bin/bash sukipai (添加一个名为sukipai的用户进入wheel用户组，并将bash作为启动命令) passwd sukipai (设置密码，和设置root是类似的) 然后输入\n1 visudo 如果报错的话 (应该不会)，就改为\n1 vim /etc/sudoers 找到如下内容，取消掉“# %wheel ALL=(ALL:ALL) ALL”前面的“# ”\n1 2 3 4 5 6 7 8 9 ## User privilege specification ## root ALL=(ALL:ALL) ALL ## Uncomment to allow members of group wheel to execute any command # %wheel ALL=(ALL:ALL) ALL ## Same thing without a password # %wheel ALL=(ALL:ALL) NOPASSWD: ALL 这里说一下，取消“# %wheel ALL=(ALL:ALL) NOPASSWD: ALL”前的“# ”也是可以的，区别就在于，取消这一行后，wheel 组的用户使用 sudo 就不用输密码了，如果你是新手，不建议这么做，如果你是老鸟，可以考虑取消 NOPASSWD 所在的这一行。（我取消的是 NOPASWD 这行，图方便）\n下面还有个 sudo 组的选项，但是我没有试过加入 sudo 组是什么效果，这里就不多说了。\n1.11 重启系统 1 reboot 此时的系统已经基本可以使用了，但是还没有配置图形界面，如果你不需要图形界面，就只需登陆 sukipai 用户就可以使用了。\n2. 图形界面安装 ！！！注意：从这里开始，如果登陆的是普通用户，则所有的 pacman 和 systemctl 都需要 sudo，如果嫌麻烦，可以先在 ~/.bashrc 中添加“alias pacman=\u0026lsquo;sudo pacman\u0026rsquo;和 alias systemctl=\u0026lsquo;sudo systemctl\u0026rsquo;”，我这里就不多写 sudo 了。如果提示需要权限，同样加 sudo 即可。所以这部分安装建议登陆 root 用户。\n首先需要选择 X11 或者是 Wayland，现在来看 Wayland 是比较先进的，但为了方便和兼容性还是用 X11 吧。 1 pacman -S xorg 这个是必须安装的，后面的 DE 和 WM 都是基于 x 服务。\n2.1 KDE 特点：美观，比较稳定，自定义功能强大，配置方便（最推荐）（括号中为推荐的可替代品）\n1 pacman -S plasma sddm konsole dolphin kate ark okular spectacle yay plasma：桌面环境\nsddm：登录管理器，KDE 配套的\nkonsole：kde 下的终端，功能多但是比较慢，也可以使用其他终端\n（alacritty,kitty）\nkate：文本编辑器，很强大，但是资料比较少，需要自己配置。我感觉比 vscode 好用很多，但是没火起来，很可惜。\n（vim,neovim,gvim,nano,gedit,sublime,vscode,atom）（sublime,vscode 需要在 AUR 源或者 Clansty 源中安装）\nark：解压与压缩\nokular：PDF 查看器\n（wps,edge,chrome,zotero……）\nspectacle：截图工具，这三件套配合 KDE 很方便\n安装完成之后，需要启用 sddm\n1 systemctl enable sddm 重启即可\n2.2 Gnome 特点：自定义功能丰富（但是被阻隔了），\n1 2 pacman -S gnome systemctl enable gdm 重启即可，部分软件仍然可以用上述软件替代\n2.3 i3 1 2 pacman -S xorg-xinit xorg-server （窗口管理器一般不会使用登陆管理器(dm)，所以xorg-xinit是必要的） pacman -S i3 (安装i3，或者i3-gaps) 由于窗口管理器配置比较复杂，所以这里只讲最基本的安装。\n在此之前，先补充一下用户登陆的时候发生了什么事。\n用户输入账户 sukipai 以及密码，正确。 tty 会解释执行用户目录下的 .bashrc 文件（如果你用的 zsh，则读取.zshrc，以此类推），相当于手动执行 source /.bashrc，（ 表示用户目录，我这里为/home/sukipai/） 此时登陆到了 tty1 你想要进入 i3，则需要执行 startx 命令 startx 会执行 ~/.xinitrc 中的内容 所以我们的逻辑就很清楚了，如果你想要自动登陆 i3，就需要修改.bashrc 中的逻辑，而 startx 时要做的事情，就需要写在 ~/.xinitrc 文件中。\n1 2 3 export LANG=zh_CN.UTF-8 # 将语言环境设置为中文 xrdb -merge ~/.Xresources # 读取~/.Xresources 文件中的信息，我用来修改dpi exec i3 # 进入i3wm 为什么要把“export LANG=zh_CN.UTF-8”写在 ~/.xinitrc 里面，是因为，如果你不想进入图形界面，那么你就会停留在 tty，而 tty 本身是不支持中文的。此时，LANG 的值仍然是之前所设置的“en_US.UTF-8”就不会出现乱码的问题，如果把这句话写在 ~/.bashrc 中，那么每次一登陆就会将语言修改为中文，导致 tty 永远处在乱码状态。\n说明一下.Xresources 文件，这个文件可以用来调节 dpi（默认 96），适合高分辨率屏幕，加入以下内容即可\n1 Xft.dpi: 192 里面的数字填 ( 放大倍数 ) * 96 就可以了，比如 192 就是放到 200%，给个简单参考\n15.5 寸笔记本，1920x1080，填 144 15.5 寸笔记本，2560x1440，填 192 如果觉得太大了，可以调小，建议为 25% 的倍数 那么如何设置自动进入 i3 桌面呢？很简单，将一下代码贴在 ~/.bashrc 中即可\n1 2 3 if [ -z \u0026#34;${DISPLAY}\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;${XDG_VTNR}\u0026#34; -eq 1 ]; then exec startx fi 这样我们就拥有了一个 i3wm 了。\n3. 后续的配置 KDE,gnome,i3 等桌面环境的配置，就不在这里赘述了，每个人的需求不一样。\n3.1 中文输入法 推荐使用 fcitx5\n1 sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-gtk fcitx5-qt fcitx5-configtool 然后添加环境变量\n1 2 3 4 5 6 7 8 sudo vim /etc/environment GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx INPUT_METHOD=fcitx SDL_IM_MODULE=fcitx GLFW_IM_MODULE=ibus 然后设置开机启动即可（桌面环境不同，方法也不同），这里提供一个简单的思路。\ntty 下面是不需要中文输入法的（也用不了），所以修改 ~/.xinitrc，添加代码\n1 fcitx5 -d \u0026amp; (后台运行fcitx5，且开机自启) wiki 上的描述\n1 2 3 4 注意： 如果您使用的桌面环境是兼容 XDG 的（例如 KDE、GNOME、Xfce、LXDE等），则 无需 此步骤（添加自启）。 如果使用i3、awesome等窗口管理器，需要在其脚本中添加 Fcitx5 以实现自启动。例如，如果您使用 i3 或 sway ,可以在配置文件中添加exec --no-startup-id fcitx5 -d 如果使用dwm，则需要添加 autostart 补丁。在 ~/.dwm/autostart.sh 中添加fcitx5 -d 根据需求自取即可。\n3.2 添加 archlinuxcn 源，并配置 yay 在装系统时我们已经将 /etc/pacman.d/mirrorlist 换为了国内源（有时候会玄学变回国外源，需要自己查看一下），所以只需要添加 archlinuxcn 即可。\n使用方法：在 /etc/pacman.conf 文件末尾添加以下两行：\n1 2 3 [archlinuxcn] SigLevel = Optional TrustAll Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 如果 SigLevel 那一行不加，后面安装 archlinuxcn-keyring 时不会报错的话，可以不加，但是我报错了所以加上了。\n这里有一个坑，要取消这两行前面的注释，不然有一部分 32 位包无法安装。\n1 2 84 # [muiltilib] 85 # Include = /etc/pacman.d/mirrorlist 之后安装 archlinuxcn-keyring 包导入 GPG key。\n1 2 sudo pacman -Syyu sudo pacman -S archlinuxcn-keyring 然后运行\n1 sudo pacman -S yay 安装 yay 即可，现在 yay 不能换国内源了，所以无需多余配置。电信网使用 yay 容易连不上，建议使用联通。\n安装终端字体，推荐 nerd-fonts-hack 需要 anchlinuxcn\n1 pacman -S nerd-fonts-hack 3.3 配置 zsh（可选） zsh 是一个非常好用的解释器，配置也不复杂。\nLinux 中国：配置一个简洁高效的 Zsh | Linux 中国这里就不多赘述，直接开搞\n1 2 3 sudo pacman -Sy zsh zsh-autosuggestions zsh-syntax-highlighting zsh-theme-powerlevel10k zsh-completions （安装zsh以及相应组件） chsh -s /usr/bin/zsh （修改为默认解释器） 然后把 ~/.bashrc 中的所有内容迁移到 ~/.zshrc ，没有就自己创建，并加入\n1 2 3 source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme 然后重启就可以使用了，可以删除掉 ~/.bashrc 和 ~/.bash_history 中的内容，因为已经不用了。\n再贴一份好用的配置文件，直接复制所有内容到 ~/.zshrc 最后就行了，然后按需修改，主要修改 alias 部分，以及删去 ibus 输入法相关配置。\nzsh 配置文件_kuikuitage 的博客-CSDN 博客链接里面的内容不太好复制，我这里直接贴上来吧 (一般来说，alias 和 function 用的比较多，其他内容不改就行)\nsource /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme #color{{{ autoload colors \u0026amp;\u0026amp; colors #命令别名 {{{ alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; alias rm=\u0026#39;rm -i\u0026#39; alias ls=\u0026#39;ls -a --color=auto\u0026#39; alias grep=\u0026#39;grep --color=auto\u0026#39; #终端代理 function proxy_on() { export http_proxy=http://127.0.0.1:7890 export https_proxy=$http_proxy echo -e \u0026#34;终端代理已开启。\u0026#34; } function proxy_off(){ unset http_proxy https_proxy echo -e \u0026#34;终端代理已关闭。\u0026#34; } for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do eval _$color=\u0026#39;%{$terminfo[bold]$fg[${(L)color}]%}\u0026#39; eval $color=\u0026#39;%{$fg[${(L)color}]%}\u0026#39; (( count = $count + 1 )) done FINISH=\u0026#34;%{$terminfo[sgr0]%}\u0026#34; #}}} #命令提示符 RPROMPT=$(echo \u0026#34;$RED%D %T$FINISH\u0026#34;) PROMPT=$(echo \u0026#34;$CYAN%n@$YELLOW%M:$GREEN%/$_YELLOW\u0026gt;$FINISH \u0026#34;) #PROMPT=$(echo \u0026#34;$BLUE%M$GREEN%/ #$CYAN%n@$BLUE%M:$GREEN%/$_YELLOW\u0026gt;\u0026gt;\u0026gt;$FINISH \u0026#34;) #标题栏、任务栏样式{{{ case $TERM in (*xterm*|*rxvt*|(dt|k|E)term) precmd () { print -Pn \u0026#34;\\e]0;%n@%M//%/\\a\u0026#34; } preexec () { print -Pn \u0026#34;\\e]0;%n@%M//%/\\ $1\\a\u0026#34; } ;; esac #}}} #编辑器 export EDITOR=vim #关于历史纪录的配置 {{{ #历史纪录条目数量 export HISTSIZE=10000 #注销后保存的历史纪录条目数量 export SAVEHIST=10000 #历史纪录文件 export HISTFILE=~/.zhistory #以附加的方式写入历史纪录 setopt INC_APPEND_HISTORY #如果连续输入的命令相同，历史纪录中只保留一个 setopt HIST_IGNORE_DUPS #为历史纪录中的命令添加时间戳 setopt EXTENDED_HISTORY #启用 cd 命令的历史纪录，cd -[TAB]进入历史路径 setopt AUTO_PUSHD #相同的历史路径只保留一个 setopt PUSHD_IGNORE_DUPS #在命令前添加空格，不将此命令添加到纪录文件中 #setopt HIST_IGNORE_SPACE #}}} #每个目录使用独立的历史纪录{{{ cd() { builtin cd \u0026#34;$@\u0026#34; # do actual cd fc -W # write current history file local HISTDIR=\u0026#34;$HOME/.zsh_history$PWD\u0026#34; # use nested folders for history if [ ! -d \u0026#34;$HISTDIR\u0026#34; ] ; then # create folder if needed mkdir -p \u0026#34;$HISTDIR\u0026#34; fi export HISTFILE=\u0026#34;$HISTDIR/zhistory\u0026#34; # set new history file touch $HISTFILE local ohistsize=$HISTSIZE HISTSIZE=0 # Discard previous dir\u0026#39;s history HISTSIZE=$ohistsize # Prepare for new dir\u0026#39;s history fc -R #read from current histfile } mkdir -p $HOME/.zsh_history$PWD export HISTFILE=\u0026#34;$HOME/.zsh_history$PWD/zhistory\u0026#34; function allhistory { cat $(find $HOME/.zsh_history -name zhistory) } function convhistory { sort $1 | uniq | sed \u0026#39;s/^:[0−9]∗:[0-9]*;.∗/\\1::::::\\2/\u0026#39; | awk -F\u0026#34;::::::\u0026#34; \u0026#39;{ $1=strftime(\u0026#34;%Y-%m-%d %T\u0026#34;,$1) \u0026#34;|\u0026#34;; print }\u0026#39; } #使用 histall 命令查看全部历史纪录 function histall { convhistory =(allhistory) | sed \u0026#39;/^.\\{20\\} *cd/i\\\\\u0026#39; } #使用 hist 查看当前目录历史纪录 function hist { convhistory $HISTFILE } #全部历史纪录 top50 function top50 { allhistory | awk -F\u0026#39;:[ 0-9]*:[0-9]*;\u0026#39; \u0026#39;{ $1=\u0026#34;\u0026#34; ; print }\u0026#39; | sed \u0026#39;s/ /\\n/g\u0026#39; | sed \u0026#39;/^$/d\u0026#39; | sort | uniq -c | sort -nr | head -n 50 } #}}} #杂项 {{{ #允许在交互模式中使用注释 例如： #cmd #这是注释 setopt INTERACTIVE_COMMENTS #启用自动 cd，输入目录名回车进入目录 #稍微有点混乱，不如 cd 补全实用 setopt AUTO_CD #扩展路径 #/v/c/p/p =\u0026gt; /var/cache/pacman/pkg setopt complete_in_word #禁用 core dumps limit coredumpsize 0 #Emacs风格 键绑定 bindkey -e #bindkey -v #设置 [DEL]键 为向后删除 #bindkey \u0026#34;\\e[3~\u0026#34; delete-char #以下字符视为单词的一部分 WORDCHARS=\u0026#39;*?_-[]~=\u0026amp;;!#$%^(){}\u0026lt;\u0026gt;\u0026#39; #}}} #自动补全功能 {{{ setopt AUTO_LIST setopt AUTO_MENU #开启此选项，补全时会直接选中菜单项 #setopt MENU_COMPLETE autoload -U compinit compinit #自动补全缓存 #zstyle \u0026#39;:completion::complete:*\u0026#39; use-cache on #zstyle \u0026#39;:completion::complete:*\u0026#39; cache-path .zcache #zstyle \u0026#39;:completion:*:cd:*\u0026#39; ignore-parents parent pwd #自动补全选项 zstyle \u0026#39;:completion:*\u0026#39; verbose yes zstyle \u0026#39;:completion:*\u0026#39; menu select zstyle \u0026#39;:completion:*:*:default\u0026#39; force-list always zstyle \u0026#39;:completion:*\u0026#39; select-prompt \u0026#39;%SSelect: lines: %L matches: %M [%p]\u0026#39; zstyle \u0026#39;:completion:*:match:*\u0026#39; original only zstyle \u0026#39;:completion::prefix-1:*\u0026#39; completer _complete zstyle \u0026#39;:completion:predict:*\u0026#39; completer _complete zstyle \u0026#39;:completion:incremental:*\u0026#39; completer _complete _correct zstyle \u0026#39;:completion:*\u0026#39; completer _complete _prefix _correct _prefix _match _approximate #路径补全 zstyle \u0026#39;:completion:*\u0026#39; expand \u0026#39;yes\u0026#39; zstyle \u0026#39;:completion:*\u0026#39; squeeze-shlashes \u0026#39;yes\u0026#39; zstyle \u0026#39;:completion::complete:*\u0026#39; \u0026#39;\\\\\u0026#39; #彩色补全菜单 eval $(dircolors -b) export ZLSCOLORS=\u0026#34;${LS_COLORS}\u0026#34; zmodload zsh/complist zstyle \u0026#39;:completion:*\u0026#39; list-colors ${(s.:.)LS_COLORS} zstyle \u0026#39;:completion:*:*:kill:*:processes\u0026#39; list-colors \u0026#39;=(#b) #([0-9]#)*=0=01;31\u0026#39; #修正大小写 zstyle \u0026#39;:completion:*\u0026#39; matcher-list \u0026#39;\u0026#39; \u0026#39;m:{a-zA-Z}={A-Za-z}\u0026#39; #错误校正 zstyle \u0026#39;:completion:*\u0026#39; completer _complete _match _approximate zstyle \u0026#39;:completion:*:match:*\u0026#39; original only zstyle \u0026#39;:completion:*:approximate:*\u0026#39; max-errors 1 numeric #kill 命令补全 compdef pkill=kill compdef pkill=killall zstyle \u0026#39;:completion:*:*:kill:*\u0026#39; menu yes select zstyle \u0026#39;:completion:*:*:*:*:processes\u0026#39; force-list always zstyle \u0026#39;:completion:*:processes\u0026#39; command \u0026#39;ps -au$USER\u0026#39; #补全类型提示分组 zstyle \u0026#39;:completion:*:matches\u0026#39; group \u0026#39;yes\u0026#39; zstyle \u0026#39;:completion:*\u0026#39; group-name \u0026#39;\u0026#39; zstyle \u0026#39;:completion:*:options\u0026#39; description \u0026#39;yes\u0026#39; zstyle \u0026#39;:completion:*:options\u0026#39; auto-description \u0026#39;%d\u0026#39; zstyle \u0026#39;:completion:*:descriptions\u0026#39; format $\u0026#39;\\e[01;33m -- %d --\\e[0m\u0026#39; zstyle \u0026#39;:completion:*:messages\u0026#39; format $\u0026#39;\\e[01;35m -- %d --\\e[0m\u0026#39; zstyle \u0026#39;:completion:*:warnings\u0026#39; format $\u0026#39;\\e[01;31m -- No Matches Found --\\e[0m\u0026#39; zstyle \u0026#39;:completion:*:corrections\u0026#39; format $\u0026#39;\\e[01;32m -- %d (errors: %e) --\\e[0m\u0026#39; # cd ~ 补全顺序 zstyle \u0026#39;:completion:*:-tilde-:*\u0026#39; group-order \u0026#39;named-directories\u0026#39; \u0026#39;path-directories\u0026#39; \u0026#39;users\u0026#39; \u0026#39;expand\u0026#39; #}}} ##行编辑高亮模式 {{{ # Ctrl+@ 设置标记，标记和光标点之间为 region zle_highlight=(region:bg=magenta #选中区域 special:bold #特殊字符 isearch:underline)#搜索时使用的关键字 #}}} ##空行(光标在行首)补全 \u0026#34;cd \u0026#34; {{{ user-complete(){ case $BUFFER in \u0026#34;\u0026#34; ) # 空行填入 \u0026#34;cd \u0026#34; BUFFER=\u0026#34;cd \u0026#34; zle end-of-line zle expand-or-complete ;; \u0026#34;cd --\u0026#34; ) # \u0026#34;cd --\u0026#34; 替换为 \u0026#34;cd +\u0026#34; BUFFER=\u0026#34;cd +\u0026#34; zle end-of-line zle expand-or-complete ;; \u0026#34;cd +-\u0026#34; ) # \u0026#34;cd +-\u0026#34; 替换为 \u0026#34;cd -\u0026#34; BUFFER=\u0026#34;cd -\u0026#34; zle end-of-line zle expand-or-complete ;; * ) zle expand-or-complete ;; esac } zle -N user-complete bindkey \u0026#34;\\t\u0026#34; user-complete #}}} ##在命令前插入 sudo {{{ #定义功能 sudo-command-line() { [[ -z $BUFFER ]] \u0026amp;\u0026amp; zle up-history [[ $BUFFER != sudo\\ * ]] \u0026amp;\u0026amp; BUFFER=\u0026#34;sudo $BUFFER\u0026#34; zle end-of-line #光标移动到行末 } zle -N sudo-command-line #定义快捷键为： [Esc] [Esc] bindkey \u0026#34;\\e\\e\u0026#34; sudo-command-line #}}} #[Esc][h] man 当前命令时，显示简短说明 alias run-help \u0026gt;\u0026amp;/dev/null \u0026amp;\u0026amp; unalias run-help autoload run-help #历史命令 top10 alias top10=\u0026#39;print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10\u0026#39; #}}} #路径别名 {{{ #进入相应的路径时只要 cd ~xxx hash -d A=\u0026#34;/media/ayu/dearest\u0026#34; hash -d H=\u0026#34;/media/data/backup/ayu\u0026#34; hash -d E=\u0026#34;/etc/\u0026#34; hash -d D=\u0026#34;/home/ayumi/Documents\u0026#34; #}}} ##for Emacs {{{ #在 Emacs终端 中使用 Zsh 的一些设置 不推荐在 Emacs 中使用它 #if [[ \u0026#34;$TERM\u0026#34; == \u0026#34;dumb\u0026#34; ]]; then #setopt No_zle #PROMPT=\u0026#39;%n@%M %/ #\u0026gt;\u0026gt;\u0026#39; #alias ls=\u0026#39;ls -F\u0026#39; #fi #}}} #{{{自定义补全 #补全 ping zstyle \u0026#39;:completion:*:ping:*\u0026#39; hosts 192.168.1.{1,50,51,100,101} www.google.com #补全 ssh scp sftp 等 #zstyle -e \u0026#39;:completion::*:*:*:hosts\u0026#39; hosts \u0026#39;reply=(${=${${(f)\u0026#34;$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)\u0026#34;}%%[# ]*}//,/ })\u0026#39; #}}} #{{{ F1 计算器 arith-eval-echo() { LBUFFER=\u0026#34;${LBUFFER}echo \\$(( \u0026#34; RBUFFER=\u0026#34; ))$RBUFFER\u0026#34; } zle -N arith-eval-echo bindkey \u0026#34;^[[11~\u0026#34; arith-eval-echo #}}} ####{{{ function timeconv { date -d @$1 +\u0026#34;%Y-%m-%d %T\u0026#34; } # }}} zmodload zsh/mathfunc autoload -U zsh-mime-setup zsh-mime-setup setopt EXTENDED_GLOB #autoload -U promptinit #promptinit #prompt redhat setopt correctall autoload compinstall #漂亮又实用的命令高亮界面 setopt extended_glob TOKENS_FOLLOWED_BY_COMMANDS=(\u0026#39;|\u0026#39; \u0026#39;||\u0026#39; \u0026#39;;\u0026#39; \u0026#39;\u0026amp;\u0026#39; \u0026#39;\u0026amp;\u0026amp;\u0026#39; \u0026#39;sudo\u0026#39; \u0026#39;do\u0026#39; \u0026#39;time\u0026#39; \u0026#39;strace\u0026#39;) recolor-cmd() { region_highlight=() colorize=true start_pos=0 for arg in ${(z)BUFFER}; do ((start_pos+=${#BUFFER[$start_pos+1,-1]}-${#${BUFFER[$start_pos+1,-1]## #}})) ((end_pos=$start_pos+${#arg})) if $colorize; then colorize=false res=$(LC_ALL=C builtin type $arg 2\u0026gt;/dev/null) case $res in *\u0026#39;reserved word\u0026#39;*) style=\u0026#34;fg=magenta,bold\u0026#34;;; *\u0026#39;alias for\u0026#39;*) style=\u0026#34;fg=cyan,bold\u0026#34;;; *\u0026#39;shell builtin\u0026#39;*) style=\u0026#34;fg=yellow,bold\u0026#34;;; *\u0026#39;shell function\u0026#39;*) style=\u0026#39;fg=green,bold\u0026#39;;; *\u0026#34;$arg is\u0026#34;*) [[ $arg = \u0026#39;sudo\u0026#39; ]] \u0026amp;\u0026amp; style=\u0026#34;fg=red,bold\u0026#34; || style=\u0026#34;fg=blue,bold\u0026#34;;; *) style=\u0026#39;none,bold\u0026#39;;; esac region_highlight+=(\u0026#34;$start_pos $end_pos $style\u0026#34;) fi [[ ${${TOKENS_FOLLOWED_BY_COMMANDS[(r)${arg//|/\\|}]}:+yes} = \u0026#39;yes\u0026#39; ]] \u0026amp;\u0026amp; colorize=true start_pos=$end_pos done } check-cmd-self-insert() { zle .self-insert \u0026amp;\u0026amp; recolor-cmd } check-cmd-backward-delete-char() { zle .backward-delete-char \u0026amp;\u0026amp; recolor-cmd } zle -N self-insert check-cmd-self-insert zle -N backward-delete-char check-cmd-backward-delete-char 3.4 安装必要软件 这个就自己按需安装了，根据评论区建议，可以添加一个 pacman.ltd 源，里面有很多常用的软件，matlab 和 mathmatica 都有，直接 \u0026ldquo;vim /etc/pacman.conf\u0026rdquo;，在后面添加：\n1 2 3 4 5 [Clansty] SigLevel = Never Server = https://repo.lwqwq.com/archlinux/$arch Server = https://pacman.ltd/archlinux/$arch Server = https://repo.clansty.com/archlinux/$arch vscode、matlab、texlive-full 之类的东西都可以直接 pacman 安装了。\n4 总结 本来没想要写这么多的，但是写了就。。。。。应该还算比较详细了，罗列了很多教程里面的坑，资料来源几乎都是 wiki，流程主要参考开头的文章，希望可以帮助到大家。我很喜欢 archlinux，能高兴能出一份力。\n然后总结一下需要注意的坑点\npacman 务必先换源 如果需要有线网和 usb 共享的话，iwd 和 networkmanager 必须安装，且在第一次重启之前装好。如果只需要无线网，可以卸载 networkmanager，只使用 iwd grub-install 是对整个硬盘，不是 boot 分区 KDE 有些组件比较臃肿，是可以替换的。 输入法不要再用旧版的 fcitx4 boot 分区挂载到 /boot/efi 而不是 /efi usb 共享网络安装时，提前安装好 usbmuxd，networkmanager 如果需要开启 sshd 服务，请使用 sudo systemctl enble sshd，否则别人连不上你电脑 dhcpcd 是网线用户需要安装的必备组件 不取消注释 /etc/pacman.conf 中的 [multilib] 行，virtualbox 装不上。 ","date":"2022-05-13T16:35:20Z","permalink":"https://songguokunsgg.github.io/p/2022.5-archlinux-%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/","title":"2022.5 archlinux 详细安装过程"},{"content":"安装过程 DNS: 223.5.5.5，需要联网\n换源（转载自 Tismagic：PVE8.1 下软件源更新与其它配置） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 # 1. 更新debian 软件源 #(任选一个源) #1.1.1 清华源 # 参考: https://mirrors.tuna.tsinghua.edu.cn/help/debian/ sed -i.bak \u0026#34;s#ftp.debian.org/debian#mirrors.tuna.tsinghua.edu.cn/debian#g\u0026#34; /etc/apt/sources.list sed -i \u0026#34;s#security.debian.org#mirrors.tuna.tsinghua.edu.cn/debian-security#g\u0026#34; /etc/apt/sources.list #apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing #1.1.2 中科大源 # 参考: https://mirrors.ustc.edu.cn/help/proxmox.html sed -i.bak \u0026#39;s|^deb http://ftp.debian.org|deb https://mirrors.ustc.edu.cn|g\u0026#39; /etc/apt/sources.list sed -i \u0026#39;s|^deb http://security.debian.org|deb https://mirrors.ustc.edu.cn/debian-security|g\u0026#39; /etc/apt/sources.list #apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing #1.1.3 aliyun源 sed -i.bak \u0026#34;s#ftp.debian.org/debian#mirrors.aliyun.com/debian#g\u0026#34; /etc/apt/sources.list #修改文件的同时, 会创建一个.bak后缀的备份文件 sed -i \u0026#34;s#security.debian.org#mirrors.aliyun.com/debian-security#g\u0026#34; /etc/apt/sources.list #阿里Debian源 #apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing #1.1.4 163源 sed -i.bak \u0026#34;s#ftp.debian.org/debian#mirrors.163.com/debian#g\u0026#34; /etc/apt/sources.list #163Debian源 sed -i \u0026#34;s#security.debian.org#mirrors.163.com/debian-security#g\u0026#34; /etc/apt/sources.list #163Debian源 #apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing # 2. PVE 软件源 # 删除默认企业源 rm -rf /etc/apt/sources.list.d/pve-enterprise.list #(任选一个源) # 2.1.1 清华源 echo \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bookworm pve-no-subscription\u0026#34; \u0026gt; /etc/apt/sources.list.d/pve-no-subscription.list # 2.1.2 中科大源 echo \u0026#34;deb https://mirrors.ustc.edu.cn/proxmox/debian/pve bookworm pve-no-subscription\u0026#34; \u0026gt; /etc/apt/sources.list.d/pve-no-subscription.list #3 CEPH分布式源 #3.1.1 中科大源 echo \u0026#34;deb https://mirrors.ustc.edu.cn/proxmox/debian/ceph-quincy bookworm no-subscription\u0026#34; \u0026gt; /etc/apt/sources.list.d/ceph.list #中科大源 sed -i.bak \u0026#34;s#http://download.proxmox.com/debian#https://mirrors.ustc.edu.cn/proxmox/debian#g\u0026#34; /usr/share/perl5/PVE/CLI/pveceph.pm #中科大源 # -------------------------------------------------------- # 更新索引, 升级安装软件包, 重启系统 # -------------------------------------------------------- # 如果无法拉取https软件源时安装 apt update \u0026amp;\u0026amp; apt-get install -y apt-transport-https ca-certificates --fix-missing apt update \u0026amp;\u0026amp; apt dist-upgrade #4.LXC容器仓库源(CT) # 4.1.1 中科大源 sed -i.bak \u0026#34;s#http://download.proxmox.com/images#https://mirrors.ustc.edu.cn/proxmox/images#g\u0026#34; /usr/share/perl5/PVE/APLInfo.pm systemctl restart pvedaemon # 稍等下手动刷新webui 页面 # 删除订阅弹窗 sed -Ezi.bak \u0026#34;s/(Ext.Msg.show\\(\\{\\s+title: gettext\\(\u0026#39;No valid sub)/void\\(\\{ \\/\\/\\1/g\u0026#34; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js \u0026amp;\u0026amp; systemctl restart pveproxy.service # 执行完成后，需注销PVE登录后, 重新启动浏览器 启用内网穿透 https://www.natfrp.com/tunnel/ 申请一个免费节点（本地端口为 8006）\n下载 sakura 的 Frpc 文件\n1 wget https://nya.globalslb.net/natfrp/client/launcher-unix/3.1.0/natfrp-service_linux_amd64.tar.zst 假设保存在 /root/Documents/ 下面，cd 到该目录，解压缩，给权限\n1 2 3 cd /root/Documents tar -I zstd xvf natfrp-service_linux_amd64.tar.zst chmod +x ./* 先运行一次 ./frpc 生成配置文件，配件文件保存在 ./frpc.ini 中\nPVE 系统添加 frpc 自启动 1 vim /etc/init.d/sakuraFprc 然后编写一个启动脚本，如果你的文件目录跟我放的一样，可以复制粘贴\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/bin/sh ### BEGIN INIT INFO # Provides: sakuraFrpc # Required-Start: $network $remote_fs $local_fs # Required-Stop: $network $remote_fs $local_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: A frpc clients # Description: A frpc clients ### END INIT INFO nohup /root/Documents/frpc -c /root/Documents/frpc.ini \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp; exit 0 让 frpc 在系统启动时保持运行\n重启，登陆 root, 查看进程是否存在\n1 ps -ef | grep frpc 如果有类似\n1 /root/Documents/frpc -c /root/Documents/frpc.ini 这样的输出就可以了，直接通过 sakura 的 [IP]:[Port] 访问即可\n","date":"2022-05-11T14:02:02Z","permalink":"https://songguokunsgg.github.io/p/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%88%B0/","title":"内网穿透是什么，有哪些工具可以做到？"},{"content":"说明 本文的所有的 Springboot、SQL 资料均来源于网络以及 ChatGPT，本人只进行了些许整理。最初是为自己面试准备的，面试结束了分享给大家。如果您觉得没有帮助，请划走，如果您觉得有所帮助，可以帮忙点个关注，谢谢。\nJava 面向对象的三个特征 封装：对象只需要选择性的对外公开一些属性和行为。继承：子对象可以继承父对象的属性和行为，并且可以在其之上进行修改以适合更特殊的场景需求。多态：允许不同类的对象对同一消息做出响应。\nJava 中基本的数据类型有哪些 以及他们的占用字节 数据类型占用字节\n数据类型 占用字节数 byte 1 short 2 int 4 long 8 float 4 double 8 char 2 boolean 4 int 和 Integer 的区别 int 是 Java 中的原始类型，Integer 是 Java 为 int 提供的封装类，他们有不同的特征和用法，包括大小、速度、默认值。\nString、StringBuilder、StringBuffer 的区别及使用场景 String 一旦定义就不可改变，可空赋值。操作少量数据时使用。StringBuilder 可改变，线程不安全。操作单线程大量数据时使用。StringBuffer 可改变，线程安全。操作多线程大量数据时使用。\nArrayList、Vector 和 LinkedList 的区别及使用场景 ArrayList 和 Vector 都是使用数组方式存储数据，允许按序号索引元素，但是插入数据会涉及到元素移动等内存操作，所以索引快插入慢。\nArrayList 懒加载 默认大小### 每次扩容 1.5 倍 线程不安全 性能较高 Vector 实例化时初始化 默认大小### 每次扩容 2 倍 线程安全 性能较低 已弃用\n额外回答加分项：多读少写建议使用 CopyOnWriteArrayList CopyOnWriteArrayList 原理是发生修改的时候复制一份 多写少读或读写比较均匀建议使用 Connections.synchronizedList\nLinkedList 使用双向链表方式存储数据，插入只需要记录本项的前后项，索引需要向前或向后进行遍历，所以插入速度较快，线程不安全，频繁在任意位置插入和删除的情况可以使用，如果需要多线程访问，可以使用 Connections.synchronizedList() 或 ConcurrentLinkedQueue\nCollection 和 Collections 的区别 Collection 是集合类上级接口，继承他的主要有 List 和 Set Collections 是集合类的帮助类，提供了对集合的搜索、排序、线程安全化等操作。\nList 和 Map 的区别 List 是存储单列数据的集合，Map 是存储键值对双列数据的集合。List 存储的数据是有顺序且可重复的，Map 存储的数据是无顺序，键不可重复，值可重复的。\nHashMap 和 HashTable 的区别 HashMap 是 Map 接口的实现，非线程安全，允许空键值。HashTable 是 Dictionary 的子类，线程安全，不允许空键值。几乎被淘汰，建议使用 ConcurrentHashMap 来替代它。HashMap 使用的是快速失败迭代器，在迭代器创建后，除非通过迭代器自身的 remove 或者 add 方法，其他任何方式的修改都会抛出异常。\nHashMap 底层实现原理和扩容机制 JDK1.8 以前：数组 + 单链表的组合，以键值对的方式存储元素。JDK1.8 及以后：引入红黑树结构，添加元素时，若链表个数大于 8，链表会转换为红黑树，反之小于 6 时会修剪或还原成链表结构。选择 6 和 8 可以有效防止频繁的链表和红黑树转换。扩容条件：\n存放新值的时候当前已有元素个数大于阈值。存放新值的时候当前存放数据发生 hash 碰撞（当前 key 计算的 hash 值换算出来的数组下标位置已经存在值）默认容量是 16，负载因子 0.75，所以扩容阈值是 12。每次扩容的容量是原有的 2 倍。\nHashMap 什么样的类适合作为键 String 最为常见，因为 String 对象不可变，且重写了 equals 和 hashcode 方法。不可变性是必要的，如果 key 的 hashcode 存入和获取是不一致，就无法找到。获取对象时需要用到 equals 和 hashCode 方法，正确的重写这两个方法是非常重要的，因为两个不相等的对象返回不同的 hashCode 的话，碰撞的几率就会小些，就可以提高 HashMap 的性能。\nfinal、finally、finalize 的区别 final 用于修饰属性、方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。finally 是异常处理语句结构的一部分，表示总是执行。finalize 是 Object 类的一个方法，在 GC 执行时会调用被回收对象的此方法。\nsleep() 和 wait() 的区别 sleep() 是 Thread 类的，wait() 是 Object 类的方法 sleep 不会释放锁，wait 会释放锁。sleep 可在任意地方使用，wait notify notifyAll 只能在 synchronized 块。sleep 必须捕获异常，而 wait 不需要。\n抽象类和接口的区别、以及使用场景 抽象类中可以有构造方法、静态方法、普通方法、普通成员变量。接口中不能有。抽象类中的抽象方法访问类型可以是 public、protected 和默认类型，接口中只能是 public。抽象类中的静态成员变量访问类型可以任意，接口中只能是 public 的。一个类只能继承一个类，但是可以实现多个接口。抽象类和子类为“是不是”的关系。主要用于为一些类提供公共实现代码。接口和实现为“有没有”的关系。主要用于代码的扩展性和可维护性。\nOverload（重载）和 Override（重写）的区别 重载是一个类中多态性的一种表现，在一个类中定义了多个同名的方法，他们有不同的参数列表。重写是父类与子类之间多态的一种表现，子类中定义了与父类有相同名称和参数的方法时，子类对象使用该方法会调用子类中的定义。\nforward（转发）和 redirect（重定向）的区别 forward 是服务器请求资源，服务器访问目标 URL，把响应内容发给用户，用户不知道数据是从哪来的。redirect 是服务器向客户端发送一个状态码，告知重新请求该 URL。\n连接池的工作机制 服务器启动时会建立一定数量的池连接，客户端需要连接时，池会返回一个未使用的连接并将其标记为忙，如果没有空闲连接，池会新建一定数量的连接，当连接使用完毕后，池会将其标记为空闲。\n什么是序列化 序列化就是一种用来处理对象流的机制，就是将对象的内容进行流化，可以对流化后的对象进行读写操作，也可以将流化后的对象传输于网络之间。可通过实现 java.io.Serializable 接口来实现序列化。\n第三方框架部分 什么是 AOP、Spring AOP 的底层原理是什么 AOP 是面向切面编程，用于在不改变原有逻辑的基础上增加一些额外的功能，如事务管理、日志、缓存、权限控制等。Spring AOP 是基于代理的。如果目标对象实现了接口，则默认采用 JDK 动态代理。如果目标对象没有实现接口，则采用 CgLib 进行动态代理。如果目标对象实现了接口，且强制 CgLib 代理，则采用 CgLib 动态代理。\n什么是 IOC、IOC 注入方式有哪些 IOC 翻译为控制反转，他还有个别名为 DI（依赖注入）。IOC 就是由 IOC 容器来负责对象的生命周期和对象之间的关系。控制反转就是本来应该你做的事情，让系统去做，比如通常获取一个对象需要通过 new，而使用 IOC 则是 IOC 将对象创建后注入到被注入的对象中。注解注入（Spring）、构造器注入、setter 方法注入、接口方式注入（不推荐）\nSpring Boot 的核心注解是什么，它是由哪几个注解组成的 核心注解：@SpringBootApplication 包含： @SpringBootConfiguration 实现配置文件功能 @EnableAutoConfiguration 打开自动配置功能 @CompoentScan 组件扫描功能\nSpringBoot 怎么读取配置文件 属性上使用@Value 注解 类上使用@ConfigurationProperties 注解 读取指定文件注解可在类上使用@PropertySource（不支持 yml 文件读取）注入 Environment 对象获取到。\nSpringCloud 和 Dubbo 的区别 SpringCloud 采用基于 HTTP 的 REST API，Dubbo 采用 RPC 方式。\nSpringCloud 的 Hystrix 断路器特性 请求熔断：请求服务失败量超过一定比例（默认 50%）断路器会切换到开路状态，这时所有请求不会发送到后端服务，断路器在保持开路状态一段时间后（默认 5 秒），自动切换到半开路状态。这时如果下一次请求成功，断路器切回闭路状态，否则重新切换到开路状态。服务降级：对于查询操作，可以实现一个 fallback 方法。当请求服务出现异常时，可以使用 fallback 方法返回的值。依赖隔离：通过线程池来实现资源隔离，比如一个服务调用另外两个服务，如果这两个服务在同一线程池，那么如果一个服务卡住，后面的请求又来了，就会导致后面的请求都会卡住等待。请求缓存：缓存上次请求结果，返回给后续请求。请求合并：把多个请求合并成一个请求，提升效率。\nMySQL 数据库部分 事物的四大特性和隔离级别 原子性：不可分割的操作单元，要么全部成功，要么回滚。一致性：如果执行事物之前数据库是一致的，那么执行后还是一致的。隔离性：事物操作之间彼此独立和透明，互不影响。持久性：事物一旦提交，其结果就是永久的。未提交读：允许脏读，其他事物只要修改了数据，即使未提交，本事物也能看到修改后的数据值。提交读：只能读取到已提交的数据。可重复读（innoDB 默认）：无论其他事物是否修改并提交了数据，这个事物中的数据不受影响。串行读：完全串行化的读，每次读都要获得锁，读写相互都会阻塞。\nMySQL 优化相关 使用更小的整数类型、尽可能的定义字段为 not null（否则会导致索引复杂）、只创建需要的索引、分库分表。使用 explain 检查复杂 SQL 语句、LIMIT 语句尽量要跟 order by 或 distinct、插入多条数据时使用单条 INSERT 语句。\nMySQL 存储引擎 InnoDB 和 MyISAM 的区别 InnoDB 支持事物，MyISAM 不支持。InnoDB 支持外键，MyISAM 不支持。InnoDB 是聚集索引，MyISAM 是非聚集索引。索引和数据文件是分离的。InnoDB 必须要有主键（没有会自己找或创建），MyISAM 可以没有。InnoDB 不保存表的行数，MyISAM 用了一个变量保存表的行数。InnoDB 支持表、行级锁 默认行级锁，MyISAM 只支持表级锁。\nMySQL 在哪些情况下不使用索引 like 查询使用%开头不能使用索引，但用%结尾的可以使用索引。where 语句中使用\u0026lt;\u0026gt;或!=。where 语句中使用 or，且没有把 or 中的所有字段加上索引。where 语句中对字段表达式操作。where 语句中使用 NOT IN。使用简单的 IN 会使用索引。\nMySQL 分库分表策略 垂直切分：某个表字段过多，可以将不常用或字段长度较大的字段拆分出去到扩展表中。水平切分：分为库内分表和分库分表，是根据表内数据的逻辑关系，按照不同的条件分散到多个数据库或表中。\nMySQL 三个范式 满足原子性 满足唯一性 满足无传递依赖（每个字段依赖且仅依赖于主键 常用的 SQL 语句\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CREATE DATABASE \u0026lt;database_name\u0026gt; DEFAULT CHARACTER SET utf8; ALTER DATABASE \u0026lt;database_name\u0026gt;; DROP DATABASE [IF EXISTS] \u0026lt;database_name\u0026gt;; SHOW DATABASES LIKE \u0026lt;module\u0026gt; WHERE \u0026lt;condition\u0026gt;; USE \u0026lt;database_name\u0026gt;; CREATE TABLE \u0026lt;table_name\u0026gt;; DELETE TABLE \u0026lt;table_name\u0026gt;; INSERT INTO \u0026lt;table_name\u0026gt; (column1,column2,...) VALUES (value1,value2,...); UPDATE \u0026lt;table_name\u0026gt; SET column1=1,column2=2 WHERE id=61618; DELETE FROM \u0026lt;table_name\u0026gt; WHERE \u0026lt;condition\u0026gt;; SELECT * FROM \u0026lt;table_name\u0026gt; WHERE \u0026lt;condition\u0026gt;; TRUNCATE TABLE \u0026lt;table_name\u0026gt; MySQL存储引擎 SHOW ENGINES; MySQL数据类型 整型：TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 浮点型：FLOAT, DOUBLE, DECIMAL(可变) 字符串：CHAR(8), VARCHAR(255) 文本：TEXT, BLOB 时间：DATE, TIME, DATETIME, TIMESTAMP, YEAR MySQL 修改表操作 1 2 3 4 5 6 7 8 9 10 11 12 ALTER TABLE \u0026lt;table_name\u0026gt; ADD \u0026lt;columnN\u0026gt; VARCHAR(50) NOT NULL; -- 修改字段定义; ALTER TABLE \u0026lt;table_name\u0026gt; MODIFY \u0026lt;columnN\u0026gt; VARCHAR(50); -- 展示数据表; DESC \u0026lt;table_name\u0026gt;; ALTER TABLE \u0026lt;table_name\u0026gt; CHANGE COLUMN \u0026lt;old_column\u0026gt; \u0026lt;new_column\u0026gt;; ALTER TABLE \u0026lt;table_name\u0026gt; DROP \u0026lt;column\u0026gt;; ALTER TABLE \u0026lt;table_name\u0026gt; RENAME AS \u0026lt;new_table_name\u0026gt;; RENAME TABLE \u0026lt;table_name\u0026gt; \u0026lt;new_table_name\u0026gt;; DROP TABLE \u0026lt;table_name\u0026gt;; CREATE TABLE \u0026lt;table_name\u0026gt; LIKE \u0026lt;back_table_name\u0026gt;; MySQL运算符 * / = \u0026lt; \u0026gt; \u0026lt;= \u0026gt;= != is null, is not null, between and, in , not in, like, not like, regexp AND OR XOR NOT MySQL 流程控制 IF 1 2 3 4 5 6 7 IF \u0026lt;condition\u0026gt; THEN ... ELSE IF \u0026lt;condition\u0026gt; THEN ... ELSE ... END IF CASE 1 2 3 4 5 6 7 8 9 10 11 12 CASE \u0026lt;var\u0026gt; WHEN \u0026lt;val\u0026gt; THEN ... WHEN \u0026lt;val\u0026gt; THEN ... WHEN \u0026lt;val\u0026gt; THEN ... END CASE WHILE WHILE \u0026lt;condition\u0026gt; THEN ... END WHILE MySQL 多表联查 内连接 两个表存在相同的字段\n外连接 1 2 LEFT JOIN RIGHT JOIN 这种查询建议选择写一段代码进行，提升可读性。\nMySQL 子查询 1 2 3 4 5 6 7 IN, \u0026lt;compare\u0026gt;, EXISTS, ANY(挑一个), ALL(选全部) -- 基本语法, 两个表可以相同也可以不同 SELECT \u0026lt;columns\u0026gt; FROM \u0026lt;table1_name\u0026gt; WHERE \u0026lt;key?\u0026gt; \u0026lt;subQuery\u0026gt; ( SELECT \u0026lt;columns\u0026gt; FROM \u0026lt;table2_name\u0026gt;) -- 例如 SELECT \u0026lt;columns\u0026gt; FROM \u0026lt;table1_name\u0026gt; WHERE id IN( SELECT id FROM \u0026lt;table1_name\u0026gt; WHERE id BETWEEN 7 AND 10) SELECT \u0026lt;columns\u0026gt; FROM \u0026lt;table1_name\u0026gt; WHERE id \u0026gt; ANY( SELECT id FROM \u0026lt;table1_name\u0026gt; WHERE id BETWEEN 7 AND 10) MySQL 索引 主键是一种特殊的索引\n存储过程与函数 主要区别在于，存储过程一般用于增删改，而函数一般用于计算结果，不改动数据库本身。\n存储过程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 CREATE PROCEDURE procedure_name (IN parameter INTEGER) BEGIN IF \u0026lt;condition\u0026gt; THEN ... END IF WHILE \u0026lt;condition\u0026gt; THEN ... END WHILE CASE \u0026lt;var\u0026gt; WHEN 1 THEN ... WHEN 2 THEN ... END CASE END -- 调用 @parameter=7; CALL procedure_name(@parameter); -- 删除 DROP PROCEDURE procedure_name; 函数 1 2 3 4 5 6 7 8 9 10 CREATE FUNCTION func_name (parameter INTEGER) RETURNS VARCHAR(255) BEGIN RETURN (SELECT \u0026lt;column\u0026gt; FROM \u0026lt;table_name\u0026gt; WHERE id = parameter) END -- 调用 @parameter=5; func_name(@parameter); -- 删除 DROP FUNCTION func_name ","date":"2022-02-13T15:32:19Z","permalink":"https://songguokunsgg.github.io/p/java-%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%AF%94%E8%BE%83%E7%BB%8F%E5%85%B8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E6%9C%89%E5%93%AA%E4%BA%9B/","title":"java 工程师面试过程中，比较经典的面试题有哪些？"}]